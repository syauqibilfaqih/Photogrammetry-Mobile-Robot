
MobileRobotFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b520  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800b6b0  0800b6b0  0001b6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bab4  0800bab4  000209d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bab4  0800bab4  0001bab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800babc  0800babc  000209d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800babc  0800babc  0001babc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009d0  20000000  0800bac8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000209d0  2**0
                  CONTENTS
 10 .bss          0000050c  200009d0  200009d0  000209d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000edc  20000edc  000209d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010578  00000000  00000000  00020a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002603  00000000  00000000  00030f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00033580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d50  00000000  00000000  000343d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b62  00000000  00000000  00035128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111cc  00000000  00000000  00057c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd1f2  00000000  00000000  00068e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136048  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e70  00000000  00000000  00136098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009d0 	.word	0x200009d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b698 	.word	0x0800b698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009d4 	.word	0x200009d4
 80001cc:	0800b698 	.word	0x0800b698

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f94f 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f004 fffe 	bl	8005f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f967 	bl	8001282 <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f92f 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000020 	.word	0x20000020
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	20000000 	.word	0x20000000

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000004 	.word	0x20000004
 8001014:	200009ec 	.word	0x200009ec

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200009ec 	.word	0x200009ec

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000004 	.word	0x20000004

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff29 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff3e 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff8e 	bl	800116c <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff31 	bl	80010dc <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa2 	bl	80011d4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff feb6 	bl	8001018 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e099      	b.n	80013ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d8:	e00f      	b.n	80012fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012da:	f7ff fe9d 	bl	8001018 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d908      	bls.n	80012fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2220      	movs	r2, #32
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2203      	movs	r2, #3
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e078      	b.n	80013ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e8      	bne.n	80012da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_DMA_Init+0x158>)
 8001314:	4013      	ands	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4313      	orrs	r3, r2
 800134a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	2b04      	cmp	r3, #4
 8001352:	d107      	bne.n	8001364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4313      	orrs	r3, r2
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f023 0307 	bic.w	r3, r3, #7
 800137a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4313      	orrs	r3, r2
 8001384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	2b04      	cmp	r3, #4
 800138c:	d117      	bne.n	80013be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fb01 	bl	80019a8 <DMA_CheckFifoParam>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013ba:	2301      	movs	r3, #1
 80013bc:	e016      	b.n	80013ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fab8 	bl	800193c <DMA_CalcBaseAndBitshift>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	223f      	movs	r2, #63	; 0x3f
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	f010803f 	.word	0xf010803f

080013f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_DMA_Start_IT+0x26>
 800141a:	2302      	movs	r3, #2
 800141c:	e040      	b.n	80014a0 <HAL_DMA_Start_IT+0xa8>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d12f      	bne.n	8001492 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2202      	movs	r2, #2
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fa4a 	bl	80018e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001450:	223f      	movs	r2, #63	; 0x3f
 8001452:	409a      	lsls	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0216 	orr.w	r2, r2, #22
 8001466:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0208 	orr.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e005      	b.n	800149e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800149a:	2302      	movs	r3, #2
 800149c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800149e:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014b6:	f7ff fdaf 	bl	8001018 <HAL_GetTick>
 80014ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d008      	beq.n	80014da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e052      	b.n	8001580 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0216 	bic.w	r2, r2, #22
 80014e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <HAL_DMA_Abort+0x62>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0208 	bic.w	r2, r2, #8
 8001518:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152a:	e013      	b.n	8001554 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800152c:	f7ff fd74 	bl	8001018 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b05      	cmp	r3, #5
 8001538:	d90c      	bls.n	8001554 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e015      	b.n	8001580 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e4      	bne.n	800152c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	223f      	movs	r2, #63	; 0x3f
 8001568:	409a      	lsls	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d004      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00c      	b.n	80015c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2205      	movs	r2, #5
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015d8:	4b8e      	ldr	r3, [pc, #568]	; (8001814 <HAL_DMA_IRQHandler+0x248>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a8e      	ldr	r2, [pc, #568]	; (8001818 <HAL_DMA_IRQHandler+0x24c>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0a9b      	lsrs	r3, r3, #10
 80015e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2208      	movs	r2, #8
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01a      	beq.n	8001638 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d013      	beq.n	8001638 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0204 	bic.w	r2, r2, #4
 800161e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	2208      	movs	r2, #8
 8001626:	409a      	lsls	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	2201      	movs	r2, #1
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d012      	beq.n	800166e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	2201      	movs	r2, #1
 800165c:	409a      	lsls	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	f043 0202 	orr.w	r2, r3, #2
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	2204      	movs	r2, #4
 8001674:	409a      	lsls	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d012      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001690:	2204      	movs	r2, #4
 8001692:	409a      	lsls	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	f043 0204 	orr.w	r2, r3, #4
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2210      	movs	r2, #16
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d043      	beq.n	800173c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d03c      	beq.n	800173c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	2210      	movs	r2, #16
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d018      	beq.n	800170e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d108      	bne.n	80016fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d024      	beq.n	800173c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
 80016fa:	e01f      	b.n	800173c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01b      	beq.n	800173c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
 800170c:	e016      	b.n	800173c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0208 	bic.w	r2, r2, #8
 800172a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	2220      	movs	r2, #32
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 808f 	beq.w	800186c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8087 	beq.w	800186c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	2220      	movs	r2, #32
 8001764:	409a      	lsls	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b05      	cmp	r3, #5
 8001774:	d136      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0216 	bic.w	r2, r2, #22
 8001784:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001794:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <HAL_DMA_IRQHandler+0x1da>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0208 	bic.w	r2, r2, #8
 80017b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ba:	223f      	movs	r2, #63	; 0x3f
 80017bc:	409a      	lsls	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d07e      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
        }
        return;
 80017e2:	e079      	b.n	80018d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01d      	beq.n	800182e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10d      	bne.n	800181c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	2b00      	cmp	r3, #0
 8001806:	d031      	beq.n	800186c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e02c      	b.n	800186c <HAL_DMA_IRQHandler+0x2a0>
 8001812:	bf00      	nop
 8001814:	20000020 	.word	0x20000020
 8001818:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d023      	beq.n	800186c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
 800182c:	e01e      	b.n	800186c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10f      	bne.n	800185c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0210 	bic.w	r2, r2, #16
 800184a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	2b00      	cmp	r3, #0
 8001872:	d032      	beq.n	80018da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d022      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2205      	movs	r2, #5
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	3301      	adds	r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d307      	bcc.n	80018b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f2      	bne.n	8001898 <HAL_DMA_IRQHandler+0x2cc>
 80018b2:	e000      	b.n	80018b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
 80018d6:	e000      	b.n	80018da <HAL_DMA_IRQHandler+0x30e>
        return;
 80018d8:	bf00      	nop
    }
  }
}
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b40      	cmp	r3, #64	; 0x40
 800190c:	d108      	bne.n	8001920 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800191e:	e007      	b.n	8001930 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3b10      	subs	r3, #16
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <DMA_CalcBaseAndBitshift+0x64>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <DMA_CalcBaseAndBitshift+0x68>)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d909      	bls.n	800197e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	1d1a      	adds	r2, r3, #4
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	659a      	str	r2, [r3, #88]	; 0x58
 800197c:	e007      	b.n	800198e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	aaaaaaab 	.word	0xaaaaaaab
 80019a4:	0800b6fc 	.word	0x0800b6fc

080019a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11f      	bne.n	8001a02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d856      	bhi.n	8001a76 <DMA_CheckFifoParam+0xce>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <DMA_CheckFifoParam+0x28>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019f3 	.word	0x080019f3
 80019d8:	080019e1 	.word	0x080019e1
 80019dc:	08001a77 	.word	0x08001a77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d046      	beq.n	8001a7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f0:	e043      	b.n	8001a7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019fa:	d140      	bne.n	8001a7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a00:	e03d      	b.n	8001a7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0a:	d121      	bne.n	8001a50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d837      	bhi.n	8001a82 <DMA_CheckFifoParam+0xda>
 8001a12:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <DMA_CheckFifoParam+0x70>)
 8001a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a2f 	.word	0x08001a2f
 8001a20:	08001a29 	.word	0x08001a29
 8001a24:	08001a41 	.word	0x08001a41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2c:	e030      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d025      	beq.n	8001a86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3e:	e022      	b.n	8001a86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a48:	d11f      	bne.n	8001a8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a4e:	e01c      	b.n	8001a8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d903      	bls.n	8001a5e <DMA_CheckFifoParam+0xb6>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d003      	beq.n	8001a64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a5c:	e018      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
      break;
 8001a62:	e015      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
      break;
 8001a74:	e00b      	b.n	8001a8e <DMA_CheckFifoParam+0xe6>
      break;
 8001a76:	bf00      	nop
 8001a78:	e00a      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e008      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e006      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a82:	bf00      	nop
 8001a84:	e004      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a86:	bf00      	nop
 8001a88:	e002      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e16b      	b.n	8001d94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f040 815a 	bne.w	8001d8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d017      	beq.n	8001b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80b4 	beq.w	8001d8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <HAL_GPIO_Init+0x30c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a5f      	ldr	r2, [pc, #380]	; (8001dac <HAL_GPIO_Init+0x30c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_GPIO_Init+0x30c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c42:	4a5b      	ldr	r2, [pc, #364]	; (8001db0 <HAL_GPIO_Init+0x310>)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_GPIO_Init+0x314>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02b      	beq.n	8001cc6 <HAL_GPIO_Init+0x226>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_GPIO_Init+0x318>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x222>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a50      	ldr	r2, [pc, #320]	; (8001dbc <HAL_GPIO_Init+0x31c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x21e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4f      	ldr	r2, [pc, #316]	; (8001dc0 <HAL_GPIO_Init+0x320>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x21a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4e      	ldr	r2, [pc, #312]	; (8001dc4 <HAL_GPIO_Init+0x324>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x216>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <HAL_GPIO_Init+0x328>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x212>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4c      	ldr	r2, [pc, #304]	; (8001dcc <HAL_GPIO_Init+0x32c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x20a>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e00e      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x310>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae90 	bls.w	8001abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40021c00 	.word	0x40021c00
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e001      	b.n	8001dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	041a      	lsls	r2, r3, #16
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e267      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d075      	beq.n	8001f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8e:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d00c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d112      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x108>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d157      	bne.n	8001f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e242      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x74>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6f      	ldr	r2, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6c      	ldr	r2, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001f08:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a68      	ldr	r2, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a65      	ldr	r2, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f876 	bl	8001018 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff f872 	bl	8001018 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e207      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f862 	bl	8001018 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f85e 	bl	8001018 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1f3      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b51      	ldr	r3, [pc, #324]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0xe8>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d063      	beq.n	800204e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9e:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1c7      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4937      	ldr	r1, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e03a      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCC_OscConfig+0x244>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f817 	bl	8001018 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff f813 	bl	8001018 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1a8      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4925      	ldr	r1, [pc, #148]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_OscConfig+0x244>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7fe fff6 	bl	8001018 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe fff2 	bl	8001018 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e187      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d036      	beq.n	80020c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7fe ffd6 	bl	8001018 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7fe ffd2 	bl	8001018 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e167      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x200>
 800208e:	e01b      	b.n	80020c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7fe ffbf 	bl	8001018 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	e00e      	b.n	80020bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209e:	f7fe ffbb 	bl	8001018 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d907      	bls.n	80020bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e150      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	42470000 	.word	0x42470000
 80020b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ea      	bne.n	800209e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8097 	beq.w	8002204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b7d      	ldr	r3, [pc, #500]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a7c      	ldr	r2, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe ff7b 	bl	8001018 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe ff77 	bl	8001018 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e10c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x474>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x2ea>
 800214c:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	e01c      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x30c>
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a5b      	ldr	r2, [pc, #364]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800217c:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218e:	f023 0304 	bic.w	r3, r3, #4
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7fe ff3c 	bl	8001018 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe ff38 	bl	8001018 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0cb      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ee      	beq.n	80021a4 <HAL_RCC_OscConfig+0x334>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff26 	bl	8001018 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff22 	bl	8001018 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0b5      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80a1 	beq.w	8002350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d05c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d141      	bne.n	80022a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fef6 	bl	8001018 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe fef2 	bl	8001018 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e087      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	491b      	ldr	r1, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe fecb 	bl	8001018 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe fec7 	bl	8001018 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e05c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x416>
 80022a4:	e054      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_RCC_OscConfig+0x478>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe feb4 	bl	8001018 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe feb0 	bl	8001018 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e045      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x470>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x444>
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e038      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x4ec>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d028      	beq.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d121      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d11a      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	3b01      	subs	r3, #1
 8002336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0cc      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d90c      	bls.n	800239c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d044      	beq.n	8002480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d003      	beq.n	800241e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e067      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4934      	ldr	r1, [pc, #208]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7fe fde2 	bl	8001018 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fdde 	bl	8001018 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e04f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d20c      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f82d 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd42 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	0800b708 	.word	0x0800b708
 8002524:	20000020 	.word	0x20000020
 8002528:	20000000 	.word	0x20000000

0800252c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_RCC_EnableCSS+0x14>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	4247004c 	.word	0x4247004c

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002548:	b094      	sub	sp, #80	; 0x50
 800254a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
 8002550:	2300      	movs	r3, #0
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002554:	2300      	movs	r3, #0
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255c:	4b79      	ldr	r3, [pc, #484]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d00d      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x40>
 8002568:	2b08      	cmp	r3, #8
 800256a:	f200 80e1 	bhi.w	8002730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x34>
 8002572:	2b04      	cmp	r3, #4
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x3a>
 8002576:	e0db      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b73      	ldr	r3, [pc, #460]	; (8002748 <HAL_RCC_GetSysClockFreq+0x204>)
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800257c:	e0db      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_GetSysClockFreq+0x208>)
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002582:	e0d8      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002584:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800258c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258e:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259a:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	2200      	movs	r2, #0
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
 80025ae:	2300      	movs	r3, #0
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	6139      	str	r1, [r7, #16]
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e8:	4659      	mov	r1, fp
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4651      	mov	r1, sl
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4651      	mov	r1, sl
 80025f8:	ebb2 0801 	subs.w	r8, r2, r1
 80025fc:	4659      	mov	r1, fp
 80025fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002616:	4690      	mov	r8, r2
 8002618:	4699      	mov	r9, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb18 0303 	adds.w	r3, r8, r3
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	462b      	mov	r3, r5
 8002624:	eb49 0303 	adc.w	r3, r9, r3
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002636:	4629      	mov	r1, r5
 8002638:	024b      	lsls	r3, r1, #9
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002640:	4621      	mov	r1, r4
 8002642:	024a      	lsls	r2, r1, #9
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264a:	2200      	movs	r2, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
 800264e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002654:	f7fe faf8 	bl	8000c48 <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002660:	e058      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	4618      	mov	r0, r3
 800266c:	4611      	mov	r1, r2
 800266e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
 8002678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	f04f 0000 	mov.w	r0, #0
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	0159      	lsls	r1, r3, #5
 800268a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268e:	0150      	lsls	r0, r2, #5
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4641      	mov	r1, r8
 8002696:	ebb2 0a01 	subs.w	sl, r2, r1
 800269a:	4649      	mov	r1, r9
 800269c:	eb63 0b01 	sbc.w	fp, r3, r1
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b4:	ebb2 040a 	subs.w	r4, r2, sl
 80026b8:	eb63 050b 	sbc.w	r5, r3, fp
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	00eb      	lsls	r3, r5, #3
 80026c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ca:	00e2      	lsls	r2, r4, #3
 80026cc:	4614      	mov	r4, r2
 80026ce:	461d      	mov	r5, r3
 80026d0:	4643      	mov	r3, r8
 80026d2:	18e3      	adds	r3, r4, r3
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	464b      	mov	r3, r9
 80026d8:	eb45 0303 	adc.w	r3, r5, r3
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ea:	4629      	mov	r1, r5
 80026ec:	028b      	lsls	r3, r1, #10
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f4:	4621      	mov	r1, r4
 80026f6:	028a      	lsls	r2, r1, #10
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	61fa      	str	r2, [r7, #28]
 8002704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002708:	f7fe fa9e 	bl	8000c48 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	3301      	adds	r3, #1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272e:	e002      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetSysClockFreq+0x204>)
 8002732:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002738:	4618      	mov	r0, r3
 800273a:	3750      	adds	r7, #80	; 0x50
 800273c:	46bd      	mov	sp, r7
 800273e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	00f42400 	.word	0x00f42400
 800274c:	007a1200 	.word	0x007a1200

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_GetHCLKFreq+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000020 	.word	0x20000020

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800276c:	f7ff fff0 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0a9b      	lsrs	r3, r3, #10
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCC_GetPCLK1Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	0800b718 	.word	0x0800b718

08002790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002794:	f7ff ffdc 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0b5b      	lsrs	r3, r3, #13
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	0800b718 	.word	0x0800b718

080027b8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d104      	bne.n	80027d2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80027c8:	f000 f80a 	bl	80027e0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_RCC_NMI_IRQHandler+0x24>)
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	701a      	strb	r2, [r3, #0]
  }
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	4002380e 	.word	0x4002380e

080027e0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e041      	b.n	8002884 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f003 ff33 	bl	8006680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 fcdb 	bl	80031e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d001      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04e      	b.n	8002942 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a23      	ldr	r2, [pc, #140]	; (8002950 <HAL_TIM_Base_Start_IT+0xc4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d01d      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_TIM_Base_Start_IT+0xc8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <HAL_TIM_Base_Start_IT+0xcc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_TIM_Base_Start_IT+0xd0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_TIM_Base_Start_IT+0xd4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_TIM_Base_Start_IT+0xd8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_TIM_Base_Start_IT+0xdc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b06      	cmp	r3, #6
 800291c:	d010      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	e007      	b.n	8002940 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40010400 	.word	0x40010400
 8002964:	40014000 	.word	0x40014000
 8002968:	40001800 	.word	0x40001800

0800296c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e041      	b.n	8002a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f003 fe54 	bl	8006640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 fc1c 	bl	80031e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_TIM_PWM_Start+0x24>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e022      	b.n	8002a76 <HAL_TIM_PWM_Start+0x6a>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d109      	bne.n	8002a4a <HAL_TIM_PWM_Start+0x3e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	e015      	b.n	8002a76 <HAL_TIM_PWM_Start+0x6a>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d109      	bne.n	8002a64 <HAL_TIM_PWM_Start+0x58>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e008      	b.n	8002a76 <HAL_TIM_PWM_Start+0x6a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07c      	b.n	8002b78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <HAL_TIM_PWM_Start+0x82>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a8c:	e013      	b.n	8002ab6 <HAL_TIM_PWM_Start+0xaa>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d104      	bne.n	8002a9e <HAL_TIM_PWM_Start+0x92>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a9c:	e00b      	b.n	8002ab6 <HAL_TIM_PWM_Start+0xaa>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d104      	bne.n	8002aae <HAL_TIM_PWM_Start+0xa2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aac:	e003      	b.n	8002ab6 <HAL_TIM_PWM_Start+0xaa>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	6839      	ldr	r1, [r7, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fde2 	bl	8003688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <HAL_TIM_PWM_Start+0x174>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_TIM_PWM_Start+0xcc>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2c      	ldr	r2, [pc, #176]	; (8002b84 <HAL_TIM_PWM_Start+0x178>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_PWM_Start+0xd0>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_TIM_PWM_Start+0xd2>
 8002adc:	2300      	movs	r3, #0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_TIM_PWM_Start+0x174>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x136>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d01d      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x136>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_TIM_PWM_Start+0x17c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d018      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x136>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_TIM_PWM_Start+0x180>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x136>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_TIM_PWM_Start+0x184>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x136>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_TIM_PWM_Start+0x178>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x136>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_TIM_PWM_Start+0x188>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_TIM_PWM_Start+0x136>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_TIM_PWM_Start+0x18c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d111      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d010      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b64:	e007      	b.n	8002b76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40010400 	.word	0x40010400
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40001800 	.word	0x40001800

08002b9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e097      	b.n	8002ce0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f003 fc9d 	bl	8006504 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be0:	f023 0307 	bic.w	r3, r3, #7
 8002be4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f000 faf9 	bl	80031e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c3c:	f023 030c 	bic.w	r3, r3, #12
 8002c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	011a      	lsls	r2, r3, #4
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	031b      	lsls	r3, r3, #12
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002c82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d110      	bne.n	8002d3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d1e:	7b7b      	ldrb	r3, [r7, #13]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d001      	beq.n	8002d28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e069      	b.n	8002dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d38:	e031      	b.n	8002d9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d110      	bne.n	8002d62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d40:	7bbb      	ldrb	r3, [r7, #14]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d46:	7b3b      	ldrb	r3, [r7, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d001      	beq.n	8002d50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e055      	b.n	8002dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d60:	e01d      	b.n	8002d9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d6e:	7b7b      	ldrb	r3, [r7, #13]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d102      	bne.n	8002d7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d74:	7b3b      	ldrb	r3, [r7, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e03e      	b.n	8002dfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_TIM_Encoder_Start+0xc4>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d008      	beq.n	8002dbc <HAL_TIM_Encoder_Start+0xd4>
 8002daa:	e00f      	b.n	8002dcc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2201      	movs	r2, #1
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fc67 	bl	8003688 <TIM_CCxChannelCmd>
      break;
 8002dba:	e016      	b.n	8002dea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fc5f 	bl	8003688 <TIM_CCxChannelCmd>
      break;
 8002dca:	e00e      	b.n	8002dea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fc57 	bl	8003688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	2104      	movs	r1, #4
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc50 	bl	8003688 <TIM_CCxChannelCmd>
      break;
 8002de8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0202 	mvn.w	r2, #2
 8002e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9b0 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9a2 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9b3 	bl	80031c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0204 	mvn.w	r2, #4
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f986 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f978 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f989 	bl	80031c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0208 	mvn.w	r2, #8
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f95c 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f94e 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f95f 	bl	80031c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0210 	mvn.w	r2, #16
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2208      	movs	r2, #8
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f932 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f924 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f935 	bl	80031c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0201 	mvn.w	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f002 ff04 	bl	8005d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b80      	cmp	r3, #128	; 0x80
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fc16 	bl	80037e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8fa 	bl	80031d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0220 	mvn.w	r2, #32
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fbe0 	bl	80037cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800302e:	2302      	movs	r3, #2
 8003030:	e0ae      	b.n	8003190 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	f200 809f 	bhi.w	8003180 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	0800307d 	.word	0x0800307d
 800304c:	08003181 	.word	0x08003181
 8003050:	08003181 	.word	0x08003181
 8003054:	08003181 	.word	0x08003181
 8003058:	080030bd 	.word	0x080030bd
 800305c:	08003181 	.word	0x08003181
 8003060:	08003181 	.word	0x08003181
 8003064:	08003181 	.word	0x08003181
 8003068:	080030ff 	.word	0x080030ff
 800306c:	08003181 	.word	0x08003181
 8003070:	08003181 	.word	0x08003181
 8003074:	08003181 	.word	0x08003181
 8003078:	0800313f 	.word	0x0800313f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f950 	bl	8003328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0208 	orr.w	r2, r2, #8
 8003096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0204 	bic.w	r2, r2, #4
 80030a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6999      	ldr	r1, [r3, #24]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	619a      	str	r2, [r3, #24]
      break;
 80030ba:	e064      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f9a0 	bl	8003408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6999      	ldr	r1, [r3, #24]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	021a      	lsls	r2, r3, #8
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	619a      	str	r2, [r3, #24]
      break;
 80030fc:	e043      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f9f5 	bl	80034f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0208 	orr.w	r2, r2, #8
 8003118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0204 	bic.w	r2, r2, #4
 8003128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69d9      	ldr	r1, [r3, #28]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	61da      	str	r2, [r3, #28]
      break;
 800313c:	e023      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fa49 	bl	80035dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69d9      	ldr	r1, [r3, #28]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	021a      	lsls	r2, r3, #8
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	61da      	str	r2, [r3, #28]
      break;
 800317e:	e002      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800318e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a40      	ldr	r2, [pc, #256]	; (80032fc <TIM_Base_SetConfig+0x114>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d013      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003206:	d00f      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a3d      	ldr	r2, [pc, #244]	; (8003300 <TIM_Base_SetConfig+0x118>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00b      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a3c      	ldr	r2, [pc, #240]	; (8003304 <TIM_Base_SetConfig+0x11c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3b      	ldr	r2, [pc, #236]	; (8003308 <TIM_Base_SetConfig+0x120>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3a      	ldr	r2, [pc, #232]	; (800330c <TIM_Base_SetConfig+0x124>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d108      	bne.n	800323a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <TIM_Base_SetConfig+0x114>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02b      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d027      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a2c      	ldr	r2, [pc, #176]	; (8003300 <TIM_Base_SetConfig+0x118>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d023      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <TIM_Base_SetConfig+0x11c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <TIM_Base_SetConfig+0x120>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01b      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a29      	ldr	r2, [pc, #164]	; (800330c <TIM_Base_SetConfig+0x124>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d017      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a28      	ldr	r2, [pc, #160]	; (8003310 <TIM_Base_SetConfig+0x128>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a27      	ldr	r2, [pc, #156]	; (8003314 <TIM_Base_SetConfig+0x12c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00f      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a26      	ldr	r2, [pc, #152]	; (8003318 <TIM_Base_SetConfig+0x130>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00b      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <TIM_Base_SetConfig+0x134>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a24      	ldr	r2, [pc, #144]	; (8003320 <TIM_Base_SetConfig+0x138>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a23      	ldr	r2, [pc, #140]	; (8003324 <TIM_Base_SetConfig+0x13c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <TIM_Base_SetConfig+0x114>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0xf8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <TIM_Base_SetConfig+0x124>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d103      	bne.n	80032e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	615a      	str	r2, [r3, #20]
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40010000 	.word	0x40010000
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40000c00 	.word	0x40000c00
 800330c:	40010400 	.word	0x40010400
 8003310:	40014000 	.word	0x40014000
 8003314:	40014400 	.word	0x40014400
 8003318:	40014800 	.word	0x40014800
 800331c:	40001800 	.word	0x40001800
 8003320:	40001c00 	.word	0x40001c00
 8003324:	40002000 	.word	0x40002000

08003328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 0302 	bic.w	r3, r3, #2
 8003370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a20      	ldr	r2, [pc, #128]	; (8003400 <TIM_OC1_SetConfig+0xd8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_OC1_SetConfig+0x64>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <TIM_OC1_SetConfig+0xdc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10c      	bne.n	80033a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 0308 	bic.w	r3, r3, #8
 8003392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a15      	ldr	r2, [pc, #84]	; (8003400 <TIM_OC1_SetConfig+0xd8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_OC1_SetConfig+0x8e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a14      	ldr	r2, [pc, #80]	; (8003404 <TIM_OC1_SetConfig+0xdc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40010000 	.word	0x40010000
 8003404:	40010400 	.word	0x40010400

08003408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0210 	bic.w	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0320 	bic.w	r3, r3, #32
 8003452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a22      	ldr	r2, [pc, #136]	; (80034ec <TIM_OC2_SetConfig+0xe4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_OC2_SetConfig+0x68>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a21      	ldr	r2, [pc, #132]	; (80034f0 <TIM_OC2_SetConfig+0xe8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10d      	bne.n	800348c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <TIM_OC2_SetConfig+0xe4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_OC2_SetConfig+0x94>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <TIM_OC2_SetConfig+0xe8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d113      	bne.n	80034c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40010000 	.word	0x40010000
 80034f0:	40010400 	.word	0x40010400

080034f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800353c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <TIM_OC3_SetConfig+0xe0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_OC3_SetConfig+0x66>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <TIM_OC3_SetConfig+0xe4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10d      	bne.n	8003576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <TIM_OC3_SetConfig+0xe0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_OC3_SetConfig+0x92>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <TIM_OC3_SetConfig+0xe4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d113      	bne.n	80035ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800358c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40010400 	.word	0x40010400

080035dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	031b      	lsls	r3, r3, #12
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <TIM_OC4_SetConfig+0xa4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC4_SetConfig+0x68>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a11      	ldr	r2, [pc, #68]	; (8003684 <TIM_OC4_SetConfig+0xa8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d109      	bne.n	8003658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800364a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40010400 	.word	0x40010400

08003688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2201      	movs	r2, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e05a      	b.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a21      	ldr	r2, [pc, #132]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d022      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d01d      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d018      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10c      	bne.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40001800 	.word	0x40001800

080037cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e03f      	b.n	8003886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f003 f82e 	bl	800687c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 ffad 	bl	8004798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b08a      	sub	sp, #40	; 0x28
 8003892:	af02      	add	r7, sp, #8
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d17c      	bne.n	80039a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_Transmit+0x2c>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e075      	b.n	80039aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Transmit+0x3e>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e06e      	b.n	80039aa <HAL_UART_Transmit+0x11c>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2221      	movs	r2, #33	; 0x21
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e2:	f7fd fb99 	bl	8001018 <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	d108      	bne.n	8003910 <HAL_UART_Transmit+0x82>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e003      	b.n	8003918 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003920:	e02a      	b.n	8003978 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fc65 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e036      	b.n	80039aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003950:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	3302      	adds	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e007      	b.n	800396a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1cf      	bne.n	8003922 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2140      	movs	r1, #64	; 0x40
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fc35 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e006      	b.n	80039aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	4613      	mov	r3, r2
 80039be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d130      	bne.n	8003a2e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Transmit_IT+0x26>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e029      	b.n	8003a30 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Transmit_IT+0x38>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e022      	b.n	8003a30 <HAL_UART_Transmit_IT+0x7e>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	; 0x21
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d11d      	bne.n	8003a92 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_UART_Receive_DMA+0x26>
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e016      	b.n	8003a94 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_UART_Receive_DMA+0x38>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00f      	b.n	8003a94 <HAL_UART_Receive_DMA+0x58>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fc25 	bl	80042d8 <UART_Start_Receive_DMA>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	e000      	b.n	8003a94 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b0ba      	sub	sp, #232	; 0xe8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10f      	bne.n	8003b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_UART_IRQHandler+0x66>
 8003aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fd91 	bl	8004622 <UART_Receive_IT>
      return;
 8003b00:	e256      	b.n	8003fb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80de 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x22c>
 8003b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80d1 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_UART_IRQHandler+0xae>
 8003b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_UART_IRQHandler+0xd2>
 8003b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0202 	orr.w	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_UART_IRQHandler+0xf6>
 8003b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d011      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x126>
 8003b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f043 0208 	orr.w	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 81ed 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_UART_IRQHandler+0x14e>
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fd1c 	bl	8004622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_UART_IRQHandler+0x17a>
 8003c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d04f      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fc24 	bl	8004464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d141      	bne.n	8003cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1d9      	bne.n	8003c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d013      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <HAL_UART_IRQHandler+0x3dc>)
 8003c84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fc7c 	bl	8001588 <HAL_DMA_Abort_IT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e00e      	b.n	8003cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f99a 	bl	8003fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00a      	b.n	8003cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f996 	bl	8003fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e006      	b.n	8003cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f992 	bl	8003fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cc2:	e170      	b.n	8003fa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	bf00      	nop
    return;
 8003cc6:	e16e      	b.n	8003fa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 814a 	bne.w	8003f66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8143 	beq.w	8003f66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 813c 	beq.w	8003f66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	f040 80b4 	bne.w	8003e7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8140 	beq.w	8003faa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d32:	429a      	cmp	r2, r3
 8003d34:	f080 8139 	bcs.w	8003faa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	f000 8088 	beq.w	8003e5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1d9      	bne.n	8003d4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e1      	bne.n	8003d9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3314      	adds	r3, #20
 8003ddc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e3      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2e:	f023 0310 	bic.w	r3, r3, #16
 8003e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e40:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e3      	bne.n	8003e1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fd fb25 	bl	80014a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8c0 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e74:	e099      	b.n	8003faa <HAL_UART_IRQHandler+0x50e>
 8003e76:	bf00      	nop
 8003e78:	0800452b 	.word	0x0800452b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 808b 	beq.w	8003fae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8086 	beq.w	8003fae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e3      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003efe:	633a      	str	r2, [r7, #48]	; 0x30
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e3      	bne.n	8003eda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0310 	bic.w	r3, r3, #16
 8003f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f44:	61fa      	str	r2, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	617b      	str	r3, [r7, #20]
   return(result);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e3      	bne.n	8003f20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f848 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f64:	e023      	b.n	8003fae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_UART_IRQHandler+0x4ea>
 8003f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fae7 	bl	8004552 <UART_Transmit_IT>
    return;
 8003f84:	e014      	b.n	8003fb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00e      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x514>
 8003f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fb27 	bl	80045f2 <UART_EndTransmit_IT>
    return;
 8003fa4:	e004      	b.n	8003fb0 <HAL_UART_IRQHandler+0x514>
    return;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003fae:	bf00      	nop
  }
}
 8003fb0:	37e8      	adds	r7, #232	; 0xe8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop

08003fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b09c      	sub	sp, #112	; 0x70
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d172      	bne.n	800410e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	2200      	movs	r2, #0
 800402c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800403e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004044:	66bb      	str	r3, [r7, #104]	; 0x68
 8004046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800404e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004050:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800405c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	667b      	str	r3, [r7, #100]	; 0x64
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3314      	adds	r3, #20
 8004080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004082:	647a      	str	r2, [r7, #68]	; 0x44
 8004084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e5      	bne.n	8004062 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	623b      	str	r3, [r7, #32]
   return(result);
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	663b      	str	r3, [r7, #96]	; 0x60
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040b6:	633a      	str	r2, [r7, #48]	; 0x30
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d119      	bne.n	800410e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040fa:	61fa      	str	r2, [r7, #28]
 80040fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	69b9      	ldr	r1, [r7, #24]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	617b      	str	r3, [r7, #20]
   return(result);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	2b01      	cmp	r3, #1
 8004114:	d106      	bne.n	8004124 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800411a:	4619      	mov	r1, r3
 800411c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800411e:	f7ff ff69 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004122:	e002      	b.n	800412a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004124:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004126:	f001 f95f 	bl	80053e8 <HAL_UART_RxCpltCallback>
}
 800412a:	bf00      	nop
 800412c:	3770      	adds	r7, #112	; 0x70
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b01      	cmp	r3, #1
 8004146:	d108      	bne.n	800415a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff ff4e 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004158:	e002      	b.n	8004160 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7ff ff36 	bl	8003fcc <HAL_UART_RxHalfCpltCallback>
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004184:	2b80      	cmp	r3, #128	; 0x80
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b21      	cmp	r3, #33	; 0x21
 800419a:	d108      	bne.n	80041ae <UART_DMAError+0x46>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2200      	movs	r2, #0
 80041a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80041a8:	68b8      	ldr	r0, [r7, #8]
 80041aa:	f000 f933 	bl	8004414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b22      	cmp	r3, #34	; 0x22
 80041ce:	d108      	bne.n	80041e2 <UART_DMAError+0x7a>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80041dc:	68b8      	ldr	r0, [r7, #8]
 80041de:	f000 f941 	bl	8004464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0210 	orr.w	r2, r3, #16
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ee:	68b8      	ldr	r0, [r7, #8]
 80041f0:	f7ff fef6 	bl	8003fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b090      	sub	sp, #64	; 0x40
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420c:	e050      	b.n	80042b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d04c      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <UART_WaitOnFlagUntilTimeout+0x30>
 800421c:	f7fc fefc 	bl	8001018 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004228:	429a      	cmp	r2, r3
 800422a:	d241      	bcs.n	80042b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800424c:	637a      	str	r2, [r7, #52]	; 0x34
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	63bb      	str	r3, [r7, #56]	; 0x38
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004280:	623a      	str	r2, [r7, #32]
 8004282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69f9      	ldr	r1, [r7, #28]
 8004286:	6a3a      	ldr	r2, [r7, #32]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	61bb      	str	r3, [r7, #24]
   return(result);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e5      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e00f      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d09f      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3740      	adds	r7, #64	; 0x40
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b098      	sub	sp, #96	; 0x60
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2222      	movs	r2, #34	; 0x22
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	4a40      	ldr	r2, [pc, #256]	; (8004408 <UART_Start_Receive_DMA+0x130>)
 8004306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4a3f      	ldr	r2, [pc, #252]	; (800440c <UART_Start_Receive_DMA+0x134>)
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	4a3e      	ldr	r2, [pc, #248]	; (8004410 <UART_Start_Receive_DMA+0x138>)
 8004316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	2200      	movs	r2, #0
 800431e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004320:	f107 0308 	add.w	r3, r7, #8
 8004324:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	f7fd f85e 	bl	80013f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d019      	beq.n	8004396 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004378:	65bb      	str	r3, [r7, #88]	; 0x58
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004382:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004384:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e5      	bne.n	8004362 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3314      	adds	r3, #20
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	657b      	str	r3, [r7, #84]	; 0x54
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	617b      	str	r3, [r7, #20]
   return(result);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e0:	653b      	str	r3, [r7, #80]	; 0x50
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043ea:	627a      	str	r2, [r7, #36]	; 0x24
 80043ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6a39      	ldr	r1, [r7, #32]
 80043f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3760      	adds	r7, #96	; 0x60
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	0800400d 	.word	0x0800400d
 800440c:	08004133 	.word	0x08004133
 8004410:	08004169 	.word	0x08004169

08004414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	; 0x24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60bb      	str	r3, [r7, #8]
   return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	61ba      	str	r2, [r7, #24]
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004458:	bf00      	nop
 800445a:	3724      	adds	r7, #36	; 0x24
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b095      	sub	sp, #84	; 0x54
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800448c:	643a      	str	r2, [r7, #64]	; 0x40
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e5      	bne.n	800446c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d119      	bne.n	8004510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f023 0310 	bic.w	r3, r3, #16
 80044f2:	647b      	str	r3, [r7, #68]	; 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fc:	61ba      	str	r2, [r7, #24]
 80044fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	613b      	str	r3, [r7, #16]
   return(result);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800451e:	bf00      	nop
 8004520:	3754      	adds	r7, #84	; 0x54
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff fd4b 	bl	8003fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b21      	cmp	r3, #33	; 0x21
 8004564:	d13e      	bne.n	80045e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	d114      	bne.n	800459a <UART_Transmit_IT+0x48>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d110      	bne.n	800459a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	621a      	str	r2, [r3, #32]
 8004598:	e008      	b.n	80045ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6211      	str	r1, [r2, #32]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4619      	mov	r1, r3
 80045ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10f      	bne.n	80045e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fcd0 	bl	8003fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b08c      	sub	sp, #48	; 0x30
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b22      	cmp	r3, #34	; 0x22
 8004634:	f040 80ab 	bne.w	800478e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d117      	bne.n	8004672 <UART_Receive_IT+0x50>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d113      	bne.n	8004672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004660:	b29a      	uxth	r2, r3
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	; 0x28
 8004670:	e026      	b.n	80046c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004684:	d007      	beq.n	8004696 <UART_Receive_IT+0x74>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <UART_Receive_IT+0x82>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e008      	b.n	80046b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4619      	mov	r1, r3
 80046ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d15a      	bne.n	800478a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0220 	bic.w	r2, r2, #32
 80046e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	d135      	bne.n	8004780 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	613b      	str	r3, [r7, #16]
   return(result);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f023 0310 	bic.w	r3, r3, #16
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	623a      	str	r2, [r7, #32]
 800473c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	61bb      	str	r3, [r7, #24]
   return(result);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b10      	cmp	r3, #16
 800475a:	d10a      	bne.n	8004772 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fc3b 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
 800477e:	e002      	b.n	8004786 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fe31 	bl	80053e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e002      	b.n	8004790 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3730      	adds	r7, #48	; 0x30
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800479c:	b0c0      	sub	sp, #256	; 0x100
 800479e:	af00      	add	r7, sp, #0
 80047a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	68d9      	ldr	r1, [r3, #12]
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	ea40 0301 	orr.w	r3, r0, r1
 80047c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047f0:	f021 010c 	bic.w	r1, r1, #12
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047fe:	430b      	orrs	r3, r1
 8004800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	6999      	ldr	r1, [r3, #24]
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	ea40 0301 	orr.w	r3, r0, r1
 800481e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <UART_SetConfig+0x2cc>)
 8004828:	429a      	cmp	r2, r3
 800482a:	d005      	beq.n	8004838 <UART_SetConfig+0xa0>
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b8d      	ldr	r3, [pc, #564]	; (8004a68 <UART_SetConfig+0x2d0>)
 8004834:	429a      	cmp	r2, r3
 8004836:	d104      	bne.n	8004842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004838:	f7fd ffaa 	bl	8002790 <HAL_RCC_GetPCLK2Freq>
 800483c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004840:	e003      	b.n	800484a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004842:	f7fd ff91 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004854:	f040 810c 	bne.w	8004a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485c:	2200      	movs	r2, #0
 800485e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800486a:	4622      	mov	r2, r4
 800486c:	462b      	mov	r3, r5
 800486e:	1891      	adds	r1, r2, r2
 8004870:	65b9      	str	r1, [r7, #88]	; 0x58
 8004872:	415b      	adcs	r3, r3
 8004874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800487a:	4621      	mov	r1, r4
 800487c:	eb12 0801 	adds.w	r8, r2, r1
 8004880:	4629      	mov	r1, r5
 8004882:	eb43 0901 	adc.w	r9, r3, r1
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800489a:	4690      	mov	r8, r2
 800489c:	4699      	mov	r9, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	eb18 0303 	adds.w	r3, r8, r3
 80048a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048a8:	462b      	mov	r3, r5
 80048aa:	eb49 0303 	adc.w	r3, r9, r3
 80048ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048c6:	460b      	mov	r3, r1
 80048c8:	18db      	adds	r3, r3, r3
 80048ca:	653b      	str	r3, [r7, #80]	; 0x50
 80048cc:	4613      	mov	r3, r2
 80048ce:	eb42 0303 	adc.w	r3, r2, r3
 80048d2:	657b      	str	r3, [r7, #84]	; 0x54
 80048d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048dc:	f7fc f9b4 	bl	8000c48 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4b61      	ldr	r3, [pc, #388]	; (8004a6c <UART_SetConfig+0x2d4>)
 80048e6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	011c      	lsls	r4, r3, #4
 80048ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004900:	4642      	mov	r2, r8
 8004902:	464b      	mov	r3, r9
 8004904:	1891      	adds	r1, r2, r2
 8004906:	64b9      	str	r1, [r7, #72]	; 0x48
 8004908:	415b      	adcs	r3, r3
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004910:	4641      	mov	r1, r8
 8004912:	eb12 0a01 	adds.w	sl, r2, r1
 8004916:	4649      	mov	r1, r9
 8004918:	eb43 0b01 	adc.w	fp, r3, r1
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800492c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004930:	4692      	mov	sl, r2
 8004932:	469b      	mov	fp, r3
 8004934:	4643      	mov	r3, r8
 8004936:	eb1a 0303 	adds.w	r3, sl, r3
 800493a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800493e:	464b      	mov	r3, r9
 8004940:	eb4b 0303 	adc.w	r3, fp, r3
 8004944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800495c:	460b      	mov	r3, r1
 800495e:	18db      	adds	r3, r3, r3
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
 8004962:	4613      	mov	r3, r2
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
 800496a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800496e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004972:	f7fc f969 	bl	8000c48 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4611      	mov	r1, r2
 800497c:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <UART_SetConfig+0x2d4>)
 800497e:	fba3 2301 	umull	r2, r3, r3, r1
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1acb      	subs	r3, r1, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004992:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <UART_SetConfig+0x2d4>)
 8004994:	fba3 2302 	umull	r2, r3, r3, r2
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a0:	441c      	add	r4, r3
 80049a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049b4:	4642      	mov	r2, r8
 80049b6:	464b      	mov	r3, r9
 80049b8:	1891      	adds	r1, r2, r2
 80049ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80049bc:	415b      	adcs	r3, r3
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049c4:	4641      	mov	r1, r8
 80049c6:	1851      	adds	r1, r2, r1
 80049c8:	6339      	str	r1, [r7, #48]	; 0x30
 80049ca:	4649      	mov	r1, r9
 80049cc:	414b      	adcs	r3, r1
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049dc:	4659      	mov	r1, fp
 80049de:	00cb      	lsls	r3, r1, #3
 80049e0:	4651      	mov	r1, sl
 80049e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e6:	4651      	mov	r1, sl
 80049e8:	00ca      	lsls	r2, r1, #3
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	4642      	mov	r2, r8
 80049f2:	189b      	adds	r3, r3, r2
 80049f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049f8:	464b      	mov	r3, r9
 80049fa:	460a      	mov	r2, r1
 80049fc:	eb42 0303 	adc.w	r3, r2, r3
 8004a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a18:	460b      	mov	r3, r1
 8004a1a:	18db      	adds	r3, r3, r3
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1e:	4613      	mov	r3, r2
 8004a20:	eb42 0303 	adc.w	r3, r2, r3
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a2e:	f7fc f90b 	bl	8000c48 <__aeabi_uldivmod>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <UART_SetConfig+0x2d4>)
 8004a38:	fba3 1302 	umull	r1, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	2164      	movs	r1, #100	; 0x64
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	3332      	adds	r3, #50	; 0x32
 8004a4a:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <UART_SetConfig+0x2d4>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	f003 0207 	and.w	r2, r3, #7
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4422      	add	r2, r4
 8004a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a60:	e105      	b.n	8004c6e <UART_SetConfig+0x4d6>
 8004a62:	bf00      	nop
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a82:	4642      	mov	r2, r8
 8004a84:	464b      	mov	r3, r9
 8004a86:	1891      	adds	r1, r2, r2
 8004a88:	6239      	str	r1, [r7, #32]
 8004a8a:	415b      	adcs	r3, r3
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a92:	4641      	mov	r1, r8
 8004a94:	1854      	adds	r4, r2, r1
 8004a96:	4649      	mov	r1, r9
 8004a98:	eb43 0501 	adc.w	r5, r3, r1
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	00eb      	lsls	r3, r5, #3
 8004aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aaa:	00e2      	lsls	r2, r4, #3
 8004aac:	4614      	mov	r4, r2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	18e3      	adds	r3, r4, r3
 8004ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ab8:	464b      	mov	r3, r9
 8004aba:	eb45 0303 	adc.w	r3, r5, r3
 8004abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ade:	4629      	mov	r1, r5
 8004ae0:	008b      	lsls	r3, r1, #2
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae8:	4621      	mov	r1, r4
 8004aea:	008a      	lsls	r2, r1, #2
 8004aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004af0:	f7fc f8aa 	bl	8000c48 <__aeabi_uldivmod>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4b60      	ldr	r3, [pc, #384]	; (8004c7c <UART_SetConfig+0x4e4>)
 8004afa:	fba3 2302 	umull	r2, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	011c      	lsls	r4, r3, #4
 8004b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	1891      	adds	r1, r2, r2
 8004b1a:	61b9      	str	r1, [r7, #24]
 8004b1c:	415b      	adcs	r3, r3
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b24:	4641      	mov	r1, r8
 8004b26:	1851      	adds	r1, r2, r1
 8004b28:	6139      	str	r1, [r7, #16]
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	414b      	adcs	r3, r1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	00cb      	lsls	r3, r1, #3
 8004b40:	4651      	mov	r1, sl
 8004b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b46:	4651      	mov	r1, sl
 8004b48:	00ca      	lsls	r2, r1, #3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4642      	mov	r2, r8
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b58:	464b      	mov	r3, r9
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	eb42 0303 	adc.w	r3, r2, r3
 8004b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	008b      	lsls	r3, r1, #2
 8004b80:	4641      	mov	r1, r8
 8004b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b86:	4641      	mov	r1, r8
 8004b88:	008a      	lsls	r2, r1, #2
 8004b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b8e:	f7fc f85b 	bl	8000c48 <__aeabi_uldivmod>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <UART_SetConfig+0x4e4>)
 8004b98:	fba3 1302 	umull	r1, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	2164      	movs	r1, #100	; 0x64
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	3332      	adds	r3, #50	; 0x32
 8004baa:	4a34      	ldr	r2, [pc, #208]	; (8004c7c <UART_SetConfig+0x4e4>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb6:	441c      	add	r4, r3
 8004bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8004bc0:	677a      	str	r2, [r7, #116]	; 0x74
 8004bc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	464b      	mov	r3, r9
 8004bca:	1891      	adds	r1, r2, r2
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	415b      	adcs	r3, r3
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	1851      	adds	r1, r2, r1
 8004bda:	6039      	str	r1, [r7, #0]
 8004bdc:	4649      	mov	r1, r9
 8004bde:	414b      	adcs	r3, r1
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bee:	4659      	mov	r1, fp
 8004bf0:	00cb      	lsls	r3, r1, #3
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	00ca      	lsls	r2, r1, #3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4603      	mov	r3, r0
 8004c02:	4642      	mov	r2, r8
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c08:	464b      	mov	r3, r9
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1c:	667a      	str	r2, [r7, #100]	; 0x64
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	008b      	lsls	r3, r1, #2
 8004c2e:	4641      	mov	r1, r8
 8004c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c34:	4641      	mov	r1, r8
 8004c36:	008a      	lsls	r2, r1, #2
 8004c38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c3c:	f7fc f804 	bl	8000c48 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <UART_SetConfig+0x4e4>)
 8004c46:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2164      	movs	r1, #100	; 0x64
 8004c4e:	fb01 f303 	mul.w	r3, r1, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	3332      	adds	r3, #50	; 0x32
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <UART_SetConfig+0x4e4>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 020f 	and.w	r2, r3, #15
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4422      	add	r2, r4
 8004c6c:	609a      	str	r2, [r3, #8]
}
 8004c6e:	bf00      	nop
 8004c70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7a:	bf00      	nop
 8004c7c:	51eb851f 	.word	0x51eb851f

08004c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <MX_DMA_Init+0x88>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <MX_DMA_Init+0x88>)
 8004c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <MX_DMA_Init+0x88>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c9e:	607b      	str	r3, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <MX_DMA_Init+0x88>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <MX_DMA_Init+0x88>)
 8004cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <MX_DMA_Init+0x88>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	200d      	movs	r0, #13
 8004cc4:	f7fc fab3 	bl	800122e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004cc8:	200d      	movs	r0, #13
 8004cca:	f7fc facc 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	2010      	movs	r0, #16
 8004cd4:	f7fc faab 	bl	800122e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004cd8:	2010      	movs	r0, #16
 8004cda:	f7fc fac4 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	203a      	movs	r0, #58	; 0x3a
 8004ce4:	f7fc faa3 	bl	800122e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004ce8:	203a      	movs	r0, #58	; 0x3a
 8004cea:	f7fc fabc 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2046      	movs	r0, #70	; 0x46
 8004cf4:	f7fc fa9b 	bl	800122e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004cf8:	2046      	movs	r0, #70	; 0x46
 8004cfa:	f7fc fab4 	bl	8001266 <HAL_NVIC_EnableIRQ>

}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08c      	sub	sp, #48	; 0x30
 8004d10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d12:	f107 031c 	add.w	r3, r7, #28
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	60da      	str	r2, [r3, #12]
 8004d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	4b78      	ldr	r3, [pc, #480]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	4a77      	ldr	r2, [pc, #476]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d30:	6313      	str	r3, [r2, #48]	; 0x30
 8004d32:	4b75      	ldr	r3, [pc, #468]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	4b71      	ldr	r3, [pc, #452]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	4a70      	ldr	r2, [pc, #448]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4e:	4b6e      	ldr	r3, [pc, #440]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	4a69      	ldr	r2, [pc, #420]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6313      	str	r3, [r2, #48]	; 0x30
 8004d6a:	4b67      	ldr	r3, [pc, #412]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	4b63      	ldr	r3, [pc, #396]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	4a62      	ldr	r2, [pc, #392]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d80:	f043 0310 	orr.w	r3, r3, #16
 8004d84:	6313      	str	r3, [r2, #48]	; 0x30
 8004d86:	4b60      	ldr	r3, [pc, #384]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	4b5c      	ldr	r3, [pc, #368]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	4a5b      	ldr	r2, [pc, #364]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	6313      	str	r3, [r2, #48]	; 0x30
 8004da2:	4b59      	ldr	r3, [pc, #356]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	4b55      	ldr	r3, [pc, #340]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	4a54      	ldr	r2, [pc, #336]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004db8:	f043 0308 	orr.w	r3, r3, #8
 8004dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dbe:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <MX_GPIO_Init+0x1fc>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_D1_GPIO_Port, M1_D1_Pin, GPIO_PIN_RESET);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dd0:	484e      	ldr	r0, [pc, #312]	; (8004f0c <MX_GPIO_Init+0x200>)
 8004dd2:	f7fd f819 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M1_D2_Pin|M0_D1_Pin|M0_D2_Pin|lcd_db6_Pin
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f44f 414e 	mov.w	r1, #52736	; 0xce00
 8004ddc:	484c      	ldr	r0, [pc, #304]	; (8004f10 <MX_GPIO_Init+0x204>)
 8004dde:	f7fd f813 	bl	8001e08 <HAL_GPIO_WritePin>
                          |lcd_db7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, lcd_db5_Pin|lcd_db4_Pin|lcd_e_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8004de2:	2200      	movs	r2, #0
 8004de4:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 8004de8:	484a      	ldr	r0, [pc, #296]	; (8004f14 <MX_GPIO_Init+0x208>)
 8004dea:	f7fd f80d 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, lcd_rw_Pin|lcd_rs_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8004dee:	2200      	movs	r2, #0
 8004df0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004df4:	4848      	ldr	r0, [pc, #288]	; (8004f18 <MX_GPIO_Init+0x20c>)
 8004df6:	f7fd f807 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(brd_led_GPIO_Port, brd_led_Pin, GPIO_PIN_RESET);
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	4847      	ldr	r0, [pc, #284]	; (8004f1c <MX_GPIO_Init+0x210>)
 8004e00:	f7fd f802 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = s0_Pin|s1_Pin;
 8004e04:	230a      	movs	r3, #10
 8004e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e10:	f107 031c 	add.w	r3, r7, #28
 8004e14:	4619      	mov	r1, r3
 8004e16:	483f      	ldr	r0, [pc, #252]	; (8004f14 <MX_GPIO_Init+0x208>)
 8004e18:	f7fc fe42 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = s2_Pin|s3_Pin;
 8004e1c:	2322      	movs	r3, #34	; 0x22
 8004e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e20:	2300      	movs	r3, #0
 8004e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e24:	2301      	movs	r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e28:	f107 031c 	add.w	r3, r7, #28
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	483a      	ldr	r0, [pc, #232]	; (8004f18 <MX_GPIO_Init+0x20c>)
 8004e30:	f7fc fe36 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_D1_Pin;
 8004e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e42:	2303      	movs	r3, #3
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M1_D1_GPIO_Port, &GPIO_InitStruct);
 8004e46:	f107 031c 	add.w	r3, r7, #28
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	482f      	ldr	r0, [pc, #188]	; (8004f0c <MX_GPIO_Init+0x200>)
 8004e4e:	f7fc fe27 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = M1_D2_Pin|M0_D1_Pin|M0_D2_Pin|lcd_db6_Pin
 8004e52:	f44f 434e 	mov.w	r3, #52736	; 0xce00
 8004e56:	61fb      	str	r3, [r7, #28]
                          |lcd_db7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e60:	2303      	movs	r3, #3
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e64:	f107 031c 	add.w	r3, r7, #28
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4829      	ldr	r0, [pc, #164]	; (8004f10 <MX_GPIO_Init+0x204>)
 8004e6c:	f7fc fe18 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = lcd_db5_Pin|lcd_db4_Pin|lcd_e_Pin;
 8004e70:	f44f 7350 	mov.w	r3, #832	; 0x340
 8004e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e76:	2301      	movs	r3, #1
 8004e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e82:	f107 031c 	add.w	r3, r7, #28
 8004e86:	4619      	mov	r1, r3
 8004e88:	4822      	ldr	r0, [pc, #136]	; (8004f14 <MX_GPIO_Init+0x208>)
 8004e8a:	f7fc fe09 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = lcd_rw_Pin|lcd_rs_Pin|buzzer_Pin;
 8004e8e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e94:	2301      	movs	r3, #1
 8004e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea0:	f107 031c 	add.w	r3, r7, #28
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	481c      	ldr	r0, [pc, #112]	; (8004f18 <MX_GPIO_Init+0x20c>)
 8004ea8:	f7fc fdfa 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ebe:	f107 031c 	add.w	r3, r7, #28
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4813      	ldr	r0, [pc, #76]	; (8004f14 <MX_GPIO_Init+0x208>)
 8004ec6:	f7fc fdeb 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004eca:	23ff      	movs	r3, #255	; 0xff
 8004ecc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ed6:	f107 031c 	add.w	r3, r7, #28
 8004eda:	4619      	mov	r1, r3
 8004edc:	480c      	ldr	r0, [pc, #48]	; (8004f10 <MX_GPIO_Init+0x204>)
 8004ede:	f7fc fddf 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = brd_led_Pin;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(brd_led_GPIO_Port, &GPIO_InitStruct);
 8004ef2:	f107 031c 	add.w	r3, r7, #28
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4808      	ldr	r0, [pc, #32]	; (8004f1c <MX_GPIO_Init+0x210>)
 8004efa:	f7fc fdd1 	bl	8001aa0 <HAL_GPIO_Init>

}
 8004efe:	bf00      	nop
 8004f00:	3730      	adds	r7, #48	; 0x30
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40020400 	.word	0x40020400
 8004f10:	40020c00 	.word	0x40020c00
 8004f14:	40020800 	.word	0x40020800
 8004f18:	40020000 	.word	0x40020000
 8004f1c:	40021000 	.word	0x40021000

08004f20 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8004f2e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004f32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8004f36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f3a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8004f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8004f40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f42:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f80e 	bl	8004f76 <Lcd_init>

	return lcd;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	461d      	mov	r5, r3
 8004f5e:	f107 0410 	add.w	r4, r7, #16
 8004f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f6a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	3728      	adds	r7, #40	; 0x28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bdb0      	pop	{r4, r5, r7, pc}

08004f76 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	7d9b      	ldrb	r3, [r3, #22]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8004f86:	2133      	movs	r1, #51	; 0x33
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f857 	bl	800503c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8004f8e:	2132      	movs	r1, #50	; 0x32
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f853 	bl	800503c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8004f96:	2128      	movs	r1, #40	; 0x28
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f84f 	bl	800503c <lcd_write_command>
 8004f9e:	e003      	b.n	8004fa8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8004fa0:	2138      	movs	r1, #56	; 0x38
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f84a 	bl	800503c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8004fa8:	2101      	movs	r1, #1
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f846 	bl	800503c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8004fb0:	210c      	movs	r1, #12
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f842 	bl	800503c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8004fb8:	2106      	movs	r1, #6
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f83e 	bl	800503c <lcd_write_command>
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	e00a      	b.n	8004fee <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	4413      	add	r3, r2
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f858 	bl	8005098 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	3301      	adds	r3, #1
 8004fec:	73fb      	strb	r3, [r7, #15]
 8004fee:	7bfc      	ldrb	r4, [r7, #15]
 8004ff0:	6838      	ldr	r0, [r7, #0]
 8004ff2:	f7fb f8ed 	bl	80001d0 <strlen>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d3ed      	bcc.n	8004fd8 <Lcd_string+0x10>
	}
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bd90      	pop	{r4, r7, pc}
	...

08005008 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
 8005014:	4613      	mov	r3, r2
 8005016:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	4a07      	ldr	r2, [pc, #28]	; (8005038 <Lcd_cursor+0x30>)
 800501c:	5cd2      	ldrb	r2, [r2, r3]
 800501e:	78bb      	ldrb	r3, [r7, #2]
 8005020:	4413      	add	r3, r2
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3b80      	subs	r3, #128	; 0x80
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f806 	bl	800503c <lcd_write_command>
	#endif
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	0800b704 	.word	0x0800b704

0800503c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6898      	ldr	r0, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	899b      	ldrh	r3, [r3, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	4619      	mov	r1, r3
 8005054:	f7fc fed8 	bl	8001e08 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7d9b      	ldrb	r3, [r3, #22]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d111      	bne.n	8005084 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2204      	movs	r2, #4
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f842 	bl	80050f4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2204      	movs	r2, #4
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f839 	bl	80050f4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8005082:	e005      	b.n	8005090 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	2208      	movs	r2, #8
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f832 	bl	80050f4 <lcd_write>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6898      	ldr	r0, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	899b      	ldrh	r3, [r3, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7fc feaa 	bl	8001e08 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7d9b      	ldrb	r3, [r3, #22]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d111      	bne.n	80050e0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2204      	movs	r2, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f814 	bl	80050f4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2204      	movs	r2, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f80b 	bl	80050f4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80050de:	e005      	b.n	80050ec <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	2208      	movs	r2, #8
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f804 	bl	80050f4 <lcd_write>
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
 8005100:	4613      	mov	r3, r2
 8005102:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e019      	b.n	800513e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	8819      	ldrh	r1, [r3, #0]
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	fa42 f303 	asr.w	r3, r2, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	f7fc fe68 	bl	8001e08 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	3301      	adds	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	7bfa      	ldrb	r2, [r7, #15]
 8005140:	78bb      	ldrb	r3, [r7, #2]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3e1      	bcc.n	800510a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6918      	ldr	r0, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8a9b      	ldrh	r3, [r3, #20]
 800514e:	2201      	movs	r2, #1
 8005150:	4619      	mov	r1, r3
 8005152:	f7fc fe59 	bl	8001e08 <HAL_GPIO_WritePin>
	DELAY(1);
 8005156:	2001      	movs	r0, #1
 8005158:	f7fb ff6a 	bl	8001030 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6918      	ldr	r0, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8a9b      	ldrh	r3, [r3, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	4619      	mov	r1, r3
 8005168:	f7fc fe4e 	bl	8001e08 <HAL_GPIO_WritePin>
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005174:	b5b0      	push	{r4, r5, r7, lr}
 8005176:	b08c      	sub	sp, #48	; 0x30
 8005178:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800517a:	f7fb fee7 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800517e:	f000 f8c7 	bl	8005310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005182:	f7ff fdc3 	bl	8004d0c <MX_GPIO_Init>
  MX_DMA_Init();
 8005186:	f7ff fd7b 	bl	8004c80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800518a:	f001 fb4d 	bl	8006828 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800518e:	f001 faf7 	bl	8006780 <MX_UART4_Init>
  MX_TIM2_Init();
 8005192:	f001 f8c9 	bl	8006328 <MX_TIM2_Init>
  MX_TIM1_Init();
 8005196:	f001 f86f 	bl	8006278 <MX_TIM1_Init>
  MX_TIM3_Init();
 800519a:	f001 f929 	bl	80063f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800519e:	f001 fb19 	bl	80067d4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80051a2:	f001 f979 	bl	8006498 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, &uart2_terima, 1);
 80051a6:	2201      	movs	r2, #1
 80051a8:	4944      	ldr	r1, [pc, #272]	; (80052bc <main+0x148>)
 80051aa:	4845      	ldr	r0, [pc, #276]	; (80052c0 <main+0x14c>)
 80051ac:	f7fe fc46 	bl	8003a3c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart4, buff_gyro_terima,8);
 80051b0:	2208      	movs	r2, #8
 80051b2:	4944      	ldr	r1, [pc, #272]	; (80052c4 <main+0x150>)
 80051b4:	4844      	ldr	r0, [pc, #272]	; (80052c8 <main+0x154>)
 80051b6:	f7fe fc41 	bl	8003a3c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, &buff_PCSerial, 1);
 80051ba:	2201      	movs	r2, #1
 80051bc:	4943      	ldr	r1, [pc, #268]	; (80052cc <main+0x158>)
 80051be:	4844      	ldr	r0, [pc, #272]	; (80052d0 <main+0x15c>)
 80051c0:	f7fe fc3c 	bl	8003a3c <HAL_UART_Receive_DMA>
//  HAL_UART_Receive_DMA(&huart1, PC_Terima, 8);

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80051c4:	213c      	movs	r1, #60	; 0x3c
 80051c6:	4843      	ldr	r0, [pc, #268]	; (80052d4 <main+0x160>)
 80051c8:	f7fd fd8e 	bl	8002ce8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80051cc:	213c      	movs	r1, #60	; 0x3c
 80051ce:	4842      	ldr	r0, [pc, #264]	; (80052d8 <main+0x164>)
 80051d0:	f7fd fd8a 	bl	8002ce8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80051d4:	2100      	movs	r1, #0
 80051d6:	4841      	ldr	r0, [pc, #260]	; (80052dc <main+0x168>)
 80051d8:	f7fd fc18 	bl	8002a0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80051dc:	2104      	movs	r1, #4
 80051de:	483f      	ldr	r0, [pc, #252]	; (80052dc <main+0x168>)
 80051e0:	f7fd fc14 	bl	8002a0c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 80051e4:	483e      	ldr	r0, [pc, #248]	; (80052e0 <main+0x16c>)
 80051e6:	f7fd fb51 	bl	800288c <HAL_TIM_Base_Start_IT>


  for(int i = 0;i<20;i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e00a      	b.n	8005206 <main+0x92>
  {
	  HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 80051f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051f4:	483b      	ldr	r0, [pc, #236]	; (80052e4 <main+0x170>)
 80051f6:	f7fc fe20 	bl	8001e3a <HAL_GPIO_TogglePin>
	  HAL_Delay(20);
 80051fa:	2014      	movs	r0, #20
 80051fc:	f7fb ff18 	bl	8001030 <HAL_Delay>
  for(int i = 0;i<20;i++)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	3301      	adds	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b13      	cmp	r3, #19
 800520a:	ddf1      	ble.n	80051f0 <main+0x7c>
  }
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800520c:	2200      	movs	r2, #0
 800520e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005212:	4834      	ldr	r0, [pc, #208]	; (80052e4 <main+0x170>)
 8005214:	f7fc fdf8 	bl	8001e08 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8005218:	2201      	movs	r2, #1
 800521a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800521e:	4832      	ldr	r0, [pc, #200]	; (80052e8 <main+0x174>)
 8005220:	f7fc fdf2 	bl	8001e08 <HAL_GPIO_WritePin>
  lcd = Lcd_create(ports, pins, lcd_rs_GPIO_Port, lcd_rs_Pin, lcd_e_GPIO_Port, lcd_e_Pin, LCD_4_BIT_MODE);
 8005224:	4c31      	ldr	r4, [pc, #196]	; (80052ec <main+0x178>)
 8005226:	4638      	mov	r0, r7
 8005228:	2300      	movs	r3, #0
 800522a:	9303      	str	r3, [sp, #12]
 800522c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <main+0x174>)
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4b29      	ldr	r3, [pc, #164]	; (80052e4 <main+0x170>)
 800523e:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <main+0x17c>)
 8005240:	492c      	ldr	r1, [pc, #176]	; (80052f4 <main+0x180>)
 8005242:	f7ff fe6d 	bl	8004f20 <Lcd_create>
 8005246:	4625      	mov	r5, r4
 8005248:	463c      	mov	r4, r7
 800524a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800524c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005252:	e885 0003 	stmia.w	r5, {r0, r1}

  Lcd_string(&lcd, "--Mobile Robot--");
 8005256:	4928      	ldr	r1, [pc, #160]	; (80052f8 <main+0x184>)
 8005258:	4824      	ldr	r0, [pc, #144]	; (80052ec <main+0x178>)
 800525a:	f7ff feb5 	bl	8004fc8 <Lcd_string>
  Reset_Enc();
 800525e:	f000 fa9d 	bl	800579c <Reset_Enc>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(taskNumber == 1)
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <main+0x188>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <main+0xfa>
	  {
		  calibrateLineSensor();
 800526a:	f000 fb21 	bl	80058b0 <calibrateLineSensor>
	  }
	  if(taskNumber == 2)
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <main+0x188>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d101      	bne.n	800527a <main+0x106>
	  {
		  runCapture();
 8005276:	f000 fb7f 	bl	8005978 <runCapture>
	  tombol[3] = HAL_GPIO_ReadPin(s3_GPIO_Port, s3_Pin);

	  TombolKirim = tombol[0] | tombol[1]<<1 | tombol[2]<<2 | tombol[3]<<3;
	   */

	  sprintf(buff_lcd,"L:%.2f R:%.2f",distanceLeft,distanceRight);
 800527a:	4b21      	ldr	r3, [pc, #132]	; (8005300 <main+0x18c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7fb f962 	bl	8000548 <__aeabi_f2d>
 8005284:	4604      	mov	r4, r0
 8005286:	460d      	mov	r5, r1
 8005288:	4b1e      	ldr	r3, [pc, #120]	; (8005304 <main+0x190>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f7fb f95b 	bl	8000548 <__aeabi_f2d>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	e9cd 2300 	strd	r2, r3, [sp]
 800529a:	4622      	mov	r2, r4
 800529c:	462b      	mov	r3, r5
 800529e:	491a      	ldr	r1, [pc, #104]	; (8005308 <main+0x194>)
 80052a0:	481a      	ldr	r0, [pc, #104]	; (800530c <main+0x198>)
 80052a2:	f001 fcef 	bl	8006c84 <sprintf>
	  Lcd_cursor(&lcd, 1, 0);
 80052a6:	2200      	movs	r2, #0
 80052a8:	2101      	movs	r1, #1
 80052aa:	4810      	ldr	r0, [pc, #64]	; (80052ec <main+0x178>)
 80052ac:	f7ff feac 	bl	8005008 <Lcd_cursor>
	  Lcd_string(&lcd, buff_lcd);
 80052b0:	4916      	ldr	r1, [pc, #88]	; (800530c <main+0x198>)
 80052b2:	480e      	ldr	r0, [pc, #56]	; (80052ec <main+0x178>)
 80052b4:	f7ff fe88 	bl	8004fc8 <Lcd_string>
	  if(taskNumber == 1)
 80052b8:	e7d3      	b.n	8005262 <main+0xee>
 80052ba:	bf00      	nop
 80052bc:	20000a07 	.word	0x20000a07
 80052c0:	20000cdc 	.word	0x20000cdc
 80052c4:	20000a2c 	.word	0x20000a2c
 80052c8:	20000c54 	.word	0x20000c54
 80052cc:	20000aa1 	.word	0x20000aa1
 80052d0:	20000c98 	.word	0x20000c98
 80052d4:	20000b34 	.word	0x20000b34
 80052d8:	20000bc4 	.word	0x20000bc4
 80052dc:	20000b7c 	.word	0x20000b7c
 80052e0:	20000c0c 	.word	0x20000c0c
 80052e4:	40020000 	.word	0x40020000
 80052e8:	40020800 	.word	0x40020800
 80052ec:	20000a60 	.word	0x20000a60
 80052f0:	20000018 	.word	0x20000018
 80052f4:	20000008 	.word	0x20000008
 80052f8:	0800b6b0 	.word	0x0800b6b0
 80052fc:	20000aa2 	.word	0x20000aa2
 8005300:	20000a0c 	.word	0x20000a0c
 8005304:	20000a10 	.word	0x20000a10
 8005308:	0800b6c4 	.word	0x0800b6c4
 800530c:	20000a78 	.word	0x20000a78

08005310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b094      	sub	sp, #80	; 0x50
 8005314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005316:	f107 0320 	add.w	r3, r7, #32
 800531a:	2230      	movs	r2, #48	; 0x30
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fca8 	bl	8006c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005324:	f107 030c 	add.w	r3, r7, #12
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005334:	2300      	movs	r3, #0
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	4b29      	ldr	r3, [pc, #164]	; (80053e0 <SystemClock_Config+0xd0>)
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <SystemClock_Config+0xd0>)
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005342:	6413      	str	r3, [r2, #64]	; 0x40
 8005344:	4b26      	ldr	r3, [pc, #152]	; (80053e0 <SystemClock_Config+0xd0>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005350:	2300      	movs	r3, #0
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <SystemClock_Config+0xd4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a22      	ldr	r2, [pc, #136]	; (80053e4 <SystemClock_Config+0xd4>)
 800535a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <SystemClock_Config+0xd4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800536c:	2301      	movs	r3, #1
 800536e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005376:	2302      	movs	r3, #2
 8005378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800537a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005380:	2304      	movs	r3, #4
 8005382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005384:	23a8      	movs	r3, #168	; 0xa8
 8005386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005388:	2302      	movs	r3, #2
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800538c:	2304      	movs	r3, #4
 800538e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005390:	f107 0320 	add.w	r3, r7, #32
 8005394:	4618      	mov	r0, r3
 8005396:	f7fc fd6b 	bl	8001e70 <HAL_RCC_OscConfig>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80053a0:	f000 fde8 	bl	8005f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053a4:	230f      	movs	r3, #15
 80053a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053a8:	2302      	movs	r3, #2
 80053aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80053b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80053b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80053b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80053bc:	f107 030c 	add.w	r3, r7, #12
 80053c0:	2105      	movs	r1, #5
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fc ffcc 	bl	8002360 <HAL_RCC_ClockConfig>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80053ce:	f000 fdd1 	bl	8005f74 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80053d2:	f7fd f8ab 	bl	800252c <HAL_RCC_EnableCSS>
}
 80053d6:	bf00      	nop
 80053d8:	3750      	adds	r7, #80	; 0x50
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40007000 	.word	0x40007000

080053e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a7e      	ldr	r2, [pc, #504]	; (80055f0 <HAL_UART_RxCpltCallback+0x208>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d14f      	bne.n	800549a <HAL_UART_RxCpltCallback+0xb2>
	{

		if(uart2_status == 0 && uart2_terima == 'm')
 80053fa:	4b7e      	ldr	r3, [pc, #504]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10c      	bne.n	800541c <HAL_UART_RxCpltCallback+0x34>
 8005402:	4b7d      	ldr	r3, [pc, #500]	; (80055f8 <HAL_UART_RxCpltCallback+0x210>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b6d      	cmp	r3, #109	; 0x6d
 8005408:	d108      	bne.n	800541c <HAL_UART_RxCpltCallback+0x34>
		{
			uart2_status = 1;
 800540a:	4b7a      	ldr	r3, [pc, #488]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, &uart2_terima, 1);
 8005410:	2201      	movs	r2, #1
 8005412:	4979      	ldr	r1, [pc, #484]	; (80055f8 <HAL_UART_RxCpltCallback+0x210>)
 8005414:	4879      	ldr	r0, [pc, #484]	; (80055fc <HAL_UART_RxCpltCallback+0x214>)
 8005416:	f7fe fb11 	bl	8003a3c <HAL_UART_Receive_DMA>
 800541a:	e0e0      	b.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
		}
		else if(uart2_status == 1 && uart2_terima == 'r')
 800541c:	4b75      	ldr	r3, [pc, #468]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10c      	bne.n	800543e <HAL_UART_RxCpltCallback+0x56>
 8005424:	4b74      	ldr	r3, [pc, #464]	; (80055f8 <HAL_UART_RxCpltCallback+0x210>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b72      	cmp	r3, #114	; 0x72
 800542a:	d108      	bne.n	800543e <HAL_UART_RxCpltCallback+0x56>
		{
			uart2_status =2;
 800542c:	4b71      	ldr	r3, [pc, #452]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 800542e:	2202      	movs	r2, #2
 8005430:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, &uart2_terima, 1);
 8005432:	2201      	movs	r2, #1
 8005434:	4970      	ldr	r1, [pc, #448]	; (80055f8 <HAL_UART_RxCpltCallback+0x210>)
 8005436:	4871      	ldr	r0, [pc, #452]	; (80055fc <HAL_UART_RxCpltCallback+0x214>)
 8005438:	f7fe fb00 	bl	8003a3c <HAL_UART_Receive_DMA>
 800543c:	e0cf      	b.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
		}
		else if(uart2_status == 2 && uart2_terima == 'i')
 800543e:	4b6d      	ldr	r3, [pc, #436]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d10d      	bne.n	8005462 <HAL_UART_RxCpltCallback+0x7a>
 8005446:	4b6c      	ldr	r3, [pc, #432]	; (80055f8 <HAL_UART_RxCpltCallback+0x210>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b69      	cmp	r3, #105	; 0x69
 800544c:	d109      	bne.n	8005462 <HAL_UART_RxCpltCallback+0x7a>
		{
			uart2_status=3;
 800544e:	4b69      	ldr	r3, [pc, #420]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 8005450:	2203      	movs	r2, #3
 8005452:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, buff_SRF_serial+3, 20);
 8005454:	4b6a      	ldr	r3, [pc, #424]	; (8005600 <HAL_UART_RxCpltCallback+0x218>)
 8005456:	2214      	movs	r2, #20
 8005458:	4619      	mov	r1, r3
 800545a:	4868      	ldr	r0, [pc, #416]	; (80055fc <HAL_UART_RxCpltCallback+0x214>)
 800545c:	f7fe faee 	bl	8003a3c <HAL_UART_Receive_DMA>
 8005460:	e0bd      	b.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
		}
		else if(uart2_status == 3)
 8005462:	4b64      	ldr	r3, [pc, #400]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d10e      	bne.n	8005488 <HAL_UART_RxCpltCallback+0xa0>
		{
			uart2_status = 0;
 800546a:	4b62      	ldr	r3, [pc, #392]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
			memcpy(&SRF_Distance,buff_SRF_serial+3,20);
 8005470:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_UART_RxCpltCallback+0x218>)
 8005472:	2214      	movs	r2, #20
 8005474:	4619      	mov	r1, r3
 8005476:	4863      	ldr	r0, [pc, #396]	; (8005604 <HAL_UART_RxCpltCallback+0x21c>)
 8005478:	f001 fbee 	bl	8006c58 <memcpy>

			HAL_UART_Receive_DMA(&huart2, &uart2_terima, 1);
 800547c:	2201      	movs	r2, #1
 800547e:	495e      	ldr	r1, [pc, #376]	; (80055f8 <HAL_UART_RxCpltCallback+0x210>)
 8005480:	485e      	ldr	r0, [pc, #376]	; (80055fc <HAL_UART_RxCpltCallback+0x214>)
 8005482:	f7fe fadb 	bl	8003a3c <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, PC_Terima, 15);

	}


}
 8005486:	e0aa      	b.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
			uart2_status = 0;
 8005488:	4b5a      	ldr	r3, [pc, #360]	; (80055f4 <HAL_UART_RxCpltCallback+0x20c>)
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, &uart2_terima, 1);
 800548e:	2201      	movs	r2, #1
 8005490:	4959      	ldr	r1, [pc, #356]	; (80055f8 <HAL_UART_RxCpltCallback+0x210>)
 8005492:	485a      	ldr	r0, [pc, #360]	; (80055fc <HAL_UART_RxCpltCallback+0x214>)
 8005494:	f7fe fad2 	bl	8003a3c <HAL_UART_Receive_DMA>
}
 8005498:	e0a1      	b.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
	else if(huart->Instance == UART4)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a5a      	ldr	r2, [pc, #360]	; (8005608 <HAL_UART_RxCpltCallback+0x220>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d12a      	bne.n	80054fa <HAL_UART_RxCpltCallback+0x112>
		if(buff_gyro_terima[0] == 0xAA && buff_gyro_terima[7]==0x55)
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <HAL_UART_RxCpltCallback+0x224>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2baa      	cmp	r3, #170	; 0xaa
 80054aa:	d120      	bne.n	80054ee <HAL_UART_RxCpltCallback+0x106>
 80054ac:	4b57      	ldr	r3, [pc, #348]	; (800560c <HAL_UART_RxCpltCallback+0x224>)
 80054ae:	79db      	ldrb	r3, [r3, #7]
 80054b0:	2b55      	cmp	r3, #85	; 0x55
 80054b2:	d11c      	bne.n	80054ee <HAL_UART_RxCpltCallback+0x106>
			volatile int16_t gyroRaw = buff_gyro_terima[1]<<8 | buff_gyro_terima[2];
 80054b4:	4b55      	ldr	r3, [pc, #340]	; (800560c <HAL_UART_RxCpltCallback+0x224>)
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	b21a      	sxth	r2, r3
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <HAL_UART_RxCpltCallback+0x224>)
 80054be:	789b      	ldrb	r3, [r3, #2]
 80054c0:	b21b      	sxth	r3, r3
 80054c2:	4313      	orrs	r3, r2
 80054c4:	b21b      	sxth	r3, r3
 80054c6:	81fb      	strh	r3, [r7, #14]
			GyroData = gyroRaw * 0.01;
 80054c8:	89fb      	ldrh	r3, [r7, #14]
 80054ca:	b21b      	sxth	r3, r3
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fb f829 	bl	8000524 <__aeabi_i2d>
 80054d2:	a345      	add	r3, pc, #276	; (adr r3, 80055e8 <HAL_UART_RxCpltCallback+0x200>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fb f88e 	bl	80005f8 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	f7fb fb60 	bl	8000ba8 <__aeabi_d2f>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4a49      	ldr	r2, [pc, #292]	; (8005610 <HAL_UART_RxCpltCallback+0x228>)
 80054ec:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart4, buff_gyro_terima,8);
 80054ee:	2208      	movs	r2, #8
 80054f0:	4946      	ldr	r1, [pc, #280]	; (800560c <HAL_UART_RxCpltCallback+0x224>)
 80054f2:	4848      	ldr	r0, [pc, #288]	; (8005614 <HAL_UART_RxCpltCallback+0x22c>)
 80054f4:	f7fe faa2 	bl	8003a3c <HAL_UART_Receive_DMA>
}
 80054f8:	e071      	b.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
	else if(huart->Instance == USART1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a46      	ldr	r2, [pc, #280]	; (8005618 <HAL_UART_RxCpltCallback+0x230>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d16c      	bne.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
		if(status_serialPC==0 && buff_PCSerial == '3')
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10c      	bne.n	8005526 <HAL_UART_RxCpltCallback+0x13e>
 800550c:	4b44      	ldr	r3, [pc, #272]	; (8005620 <HAL_UART_RxCpltCallback+0x238>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b33      	cmp	r3, #51	; 0x33
 8005512:	d108      	bne.n	8005526 <HAL_UART_RxCpltCallback+0x13e>
			status_serialPC = 1;
 8005514:	4b41      	ldr	r3, [pc, #260]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, &buff_PCSerial, 1);
 800551a:	2201      	movs	r2, #1
 800551c:	4940      	ldr	r1, [pc, #256]	; (8005620 <HAL_UART_RxCpltCallback+0x238>)
 800551e:	4841      	ldr	r0, [pc, #260]	; (8005624 <HAL_UART_RxCpltCallback+0x23c>)
 8005520:	f7fe fa8c 	bl	8003a3c <HAL_UART_Receive_DMA>
 8005524:	e055      	b.n	80055d2 <HAL_UART_RxCpltCallback+0x1ea>
		else if(status_serialPC == 1 && buff_PCSerial == 'd')
 8005526:	4b3d      	ldr	r3, [pc, #244]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10c      	bne.n	8005548 <HAL_UART_RxCpltCallback+0x160>
 800552e:	4b3c      	ldr	r3, [pc, #240]	; (8005620 <HAL_UART_RxCpltCallback+0x238>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b64      	cmp	r3, #100	; 0x64
 8005534:	d108      	bne.n	8005548 <HAL_UART_RxCpltCallback+0x160>
			status_serialPC = 2;
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 8005538:	2202      	movs	r2, #2
 800553a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, &buff_PCSerial, 1);
 800553c:	2201      	movs	r2, #1
 800553e:	4938      	ldr	r1, [pc, #224]	; (8005620 <HAL_UART_RxCpltCallback+0x238>)
 8005540:	4838      	ldr	r0, [pc, #224]	; (8005624 <HAL_UART_RxCpltCallback+0x23c>)
 8005542:	f7fe fa7b 	bl	8003a3c <HAL_UART_Receive_DMA>
 8005546:	e044      	b.n	80055d2 <HAL_UART_RxCpltCallback+0x1ea>
		else if(status_serialPC == 2 && buff_PCSerial == 'p')
 8005548:	4b34      	ldr	r3, [pc, #208]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d10c      	bne.n	800556a <HAL_UART_RxCpltCallback+0x182>
 8005550:	4b33      	ldr	r3, [pc, #204]	; (8005620 <HAL_UART_RxCpltCallback+0x238>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b70      	cmp	r3, #112	; 0x70
 8005556:	d108      	bne.n	800556a <HAL_UART_RxCpltCallback+0x182>
			status_serialPC = 3;
 8005558:	4b30      	ldr	r3, [pc, #192]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 800555a:	2203      	movs	r2, #3
 800555c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, PC_Terima,12);
 800555e:	220c      	movs	r2, #12
 8005560:	4931      	ldr	r1, [pc, #196]	; (8005628 <HAL_UART_RxCpltCallback+0x240>)
 8005562:	4830      	ldr	r0, [pc, #192]	; (8005624 <HAL_UART_RxCpltCallback+0x23c>)
 8005564:	f7fe fa6a 	bl	8003a3c <HAL_UART_Receive_DMA>
 8005568:	e033      	b.n	80055d2 <HAL_UART_RxCpltCallback+0x1ea>
		else if(status_serialPC == 3)
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d127      	bne.n	80055c2 <HAL_UART_RxCpltCallback+0x1da>
			status_serialPC = 0;
 8005572:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_UART_RxCpltCallback+0x240>)
 800557a:	781a      	ldrb	r2, [r3, #0]
			memcpy(&taskNumber,PC_Terima,1);
 800557c:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_UART_RxCpltCallback+0x244>)
 800557e:	701a      	strb	r2, [r3, #0]
			memcpy(&numofpict,PC_Terima+1,2);
 8005580:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <HAL_UART_RxCpltCallback+0x248>)
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29a      	uxth	r2, r3
 8005586:	4b2b      	ldr	r3, [pc, #172]	; (8005634 <HAL_UART_RxCpltCallback+0x24c>)
 8005588:	801a      	strh	r2, [r3, #0]
			memcpy(&radoftrack,PC_Terima+3,2);
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <HAL_UART_RxCpltCallback+0x250>)
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29a      	uxth	r2, r3
 8005590:	4b2a      	ldr	r3, [pc, #168]	; (800563c <HAL_UART_RxCpltCallback+0x254>)
 8005592:	801a      	strh	r2, [r3, #0]
			memcpy(MotorPWM,PC_Terima+5,4);
 8005594:	4b2a      	ldr	r3, [pc, #168]	; (8005640 <HAL_UART_RxCpltCallback+0x258>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <HAL_UART_RxCpltCallback+0x25c>)
 800559c:	601a      	str	r2, [r3, #0]
			memcpy(&Kp,PC_Terima+9,1);
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <HAL_UART_RxCpltCallback+0x260>)
 80055a0:	781a      	ldrb	r2, [r3, #0]
 80055a2:	4b2a      	ldr	r3, [pc, #168]	; (800564c <HAL_UART_RxCpltCallback+0x264>)
 80055a4:	701a      	strb	r2, [r3, #0]
			memcpy(&Ki,PC_Terima+10,1);
 80055a6:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <HAL_UART_RxCpltCallback+0x268>)
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <HAL_UART_RxCpltCallback+0x26c>)
 80055ac:	701a      	strb	r2, [r3, #0]
			memcpy(&Kd,PC_Terima+11,1);
 80055ae:	4b2a      	ldr	r3, [pc, #168]	; (8005658 <HAL_UART_RxCpltCallback+0x270>)
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	4b2a      	ldr	r3, [pc, #168]	; (800565c <HAL_UART_RxCpltCallback+0x274>)
 80055b4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, &buff_PCSerial, 1);
 80055b6:	2201      	movs	r2, #1
 80055b8:	4919      	ldr	r1, [pc, #100]	; (8005620 <HAL_UART_RxCpltCallback+0x238>)
 80055ba:	481a      	ldr	r0, [pc, #104]	; (8005624 <HAL_UART_RxCpltCallback+0x23c>)
 80055bc:	f7fe fa3e 	bl	8003a3c <HAL_UART_Receive_DMA>
 80055c0:	e007      	b.n	80055d2 <HAL_UART_RxCpltCallback+0x1ea>
		{	status_serialPC = 0;
 80055c2:	4b16      	ldr	r3, [pc, #88]	; (800561c <HAL_UART_RxCpltCallback+0x234>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, &buff_PCSerial, 1);
 80055c8:	2201      	movs	r2, #1
 80055ca:	4915      	ldr	r1, [pc, #84]	; (8005620 <HAL_UART_RxCpltCallback+0x238>)
 80055cc:	4815      	ldr	r0, [pc, #84]	; (8005624 <HAL_UART_RxCpltCallback+0x23c>)
 80055ce:	f7fe fa35 	bl	8003a3c <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, PC_Terima, 15);
 80055d2:	220f      	movs	r2, #15
 80055d4:	4914      	ldr	r1, [pc, #80]	; (8005628 <HAL_UART_RxCpltCallback+0x240>)
 80055d6:	4813      	ldr	r0, [pc, #76]	; (8005624 <HAL_UART_RxCpltCallback+0x23c>)
 80055d8:	f7fe fa30 	bl	8003a3c <HAL_UART_Receive_DMA>
}
 80055dc:	e7ff      	b.n	80055de <HAL_UART_RxCpltCallback+0x1f6>
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	47ae147b 	.word	0x47ae147b
 80055ec:	3f847ae1 	.word	0x3f847ae1
 80055f0:	40004400 	.word	0x40004400
 80055f4:	20000a08 	.word	0x20000a08
 80055f8:	20000a07 	.word	0x20000a07
 80055fc:	20000cdc 	.word	0x20000cdc
 8005600:	200009f3 	.word	0x200009f3
 8005604:	20000a18 	.word	0x20000a18
 8005608:	40004c00 	.word	0x40004c00
 800560c:	20000a2c 	.word	0x20000a2c
 8005610:	20000a34 	.word	0x20000a34
 8005614:	20000c54 	.word	0x20000c54
 8005618:	40011000 	.word	0x40011000
 800561c:	20000aa0 	.word	0x20000aa0
 8005620:	20000aa1 	.word	0x20000aa1
 8005624:	20000c98 	.word	0x20000c98
 8005628:	20000a88 	.word	0x20000a88
 800562c:	20000aa2 	.word	0x20000aa2
 8005630:	20000a89 	.word	0x20000a89
 8005634:	20000aa6 	.word	0x20000aa6
 8005638:	20000a8b 	.word	0x20000a8b
 800563c:	20000aa4 	.word	0x20000aa4
 8005640:	20000a8d 	.word	0x20000a8d
 8005644:	20000a48 	.word	0x20000a48
 8005648:	20000a91 	.word	0x20000a91
 800564c:	20000005 	.word	0x20000005
 8005650:	20000a92 	.word	0x20000a92
 8005654:	20000a5e 	.word	0x20000a5e
 8005658:	20000a93 	.word	0x20000a93
 800565c:	20000006 	.word	0x20000006

08005660 <MotorSetPWM>:
		lastTimeTick=HAL_GetTick();
	}
}
*/
void MotorSetPWM(int16_t pwm[2])
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

	if(pwm[0]>0)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800566e:	2b00      	cmp	r3, #0
 8005670:	dd0c      	ble.n	800568c <MotorSetPWM+0x2c>
	{
		HAL_GPIO_WritePin(M0_D1_GPIO_Port, M0_D1_Pin, GPIO_PIN_RESET);
 8005672:	2200      	movs	r2, #0
 8005674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005678:	4826      	ldr	r0, [pc, #152]	; (8005714 <MotorSetPWM+0xb4>)
 800567a:	f7fc fbc5 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M0_D2_GPIO_Port, M0_D2_Pin, GPIO_PIN_SET);
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005684:	4823      	ldr	r0, [pc, #140]	; (8005714 <MotorSetPWM+0xb4>)
 8005686:	f7fc fbbf 	bl	8001e08 <HAL_GPIO_WritePin>
 800568a:	e00b      	b.n	80056a4 <MotorSetPWM+0x44>
	}
	else
	{
		HAL_GPIO_WritePin(M0_D1_GPIO_Port, M0_D1_Pin, GPIO_PIN_SET);
 800568c:	2201      	movs	r2, #1
 800568e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005692:	4820      	ldr	r0, [pc, #128]	; (8005714 <MotorSetPWM+0xb4>)
 8005694:	f7fc fbb8 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M0_D2_GPIO_Port, M0_D2_Pin, GPIO_PIN_RESET);
 8005698:	2200      	movs	r2, #0
 800569a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800569e:	481d      	ldr	r0, [pc, #116]	; (8005714 <MotorSetPWM+0xb4>)
 80056a0:	f7fc fbb2 	bl	8001e08 <HAL_GPIO_WritePin>
	}

	if(pwm[1]<0)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3302      	adds	r3, #2
 80056a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da0c      	bge.n	80056ca <MotorSetPWM+0x6a>
	{
		HAL_GPIO_WritePin(M1_D1_GPIO_Port, M1_D1_Pin, GPIO_PIN_RESET);
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056b6:	4818      	ldr	r0, [pc, #96]	; (8005718 <MotorSetPWM+0xb8>)
 80056b8:	f7fc fba6 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_D2_GPIO_Port, M1_D2_Pin, GPIO_PIN_SET);
 80056bc:	2201      	movs	r2, #1
 80056be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c2:	4814      	ldr	r0, [pc, #80]	; (8005714 <MotorSetPWM+0xb4>)
 80056c4:	f7fc fba0 	bl	8001e08 <HAL_GPIO_WritePin>
 80056c8:	e00b      	b.n	80056e2 <MotorSetPWM+0x82>
	}
	else
	{
		HAL_GPIO_WritePin(M1_D1_GPIO_Port, M1_D1_Pin, GPIO_PIN_SET);
 80056ca:	2201      	movs	r2, #1
 80056cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056d0:	4811      	ldr	r0, [pc, #68]	; (8005718 <MotorSetPWM+0xb8>)
 80056d2:	f7fc fb99 	bl	8001e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_D2_GPIO_Port, M1_D2_Pin, GPIO_PIN_RESET);
 80056d6:	2200      	movs	r2, #0
 80056d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056dc:	480d      	ldr	r0, [pc, #52]	; (8005714 <MotorSetPWM+0xb4>)
 80056de:	f7fc fb93 	bl	8001e08 <HAL_GPIO_WritePin>
	}


	M0_VPWM = abs(pwm[0]);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfb8      	it	lt
 80056ec:	425b      	neglt	r3, r3
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056f4:	635a      	str	r2, [r3, #52]	; 0x34
	M1_VPWM = abs(pwm[1]);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3302      	adds	r3, #2
 80056fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bfb8      	it	lt
 8005702:	425b      	neglt	r3, r3
 8005704:	b29a      	uxth	r2, r3
 8005706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40020c00 	.word	0x40020c00
 8005718:	40020400 	.word	0x40020400

0800571c <Reset_Enc1>:

void Reset_Enc1(){
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
	Encoder[0]=0;
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <Reset_Enc1+0x30>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
	TIM3->CNT=65535;
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <Reset_Enc1+0x34>)
 8005728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800572c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <Reset_Enc1+0x34>)
 8005730:	2200      	movs	r2, #0
 8005732:	625a      	str	r2, [r3, #36]	; 0x24
	distanceLeft=0;
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <Reset_Enc1+0x38>)
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
	pulseLeft=0;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <Reset_Enc1+0x3c>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
}
 8005742:	bf00      	nop
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000a38 	.word	0x20000a38
 8005750:	40000400 	.word	0x40000400
 8005754:	20000a0c 	.word	0x20000a0c
 8005758:	20000a40 	.word	0x20000a40

0800575c <Reset_Enc2>:
void Reset_Enc2(){
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
	Encoder[1]=0;
 8005760:	4b0a      	ldr	r3, [pc, #40]	; (800578c <Reset_Enc2+0x30>)
 8005762:	2200      	movs	r2, #0
 8005764:	705a      	strb	r2, [r3, #1]
	TIM1->CNT=65535;
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <Reset_Enc2+0x34>)
 8005768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CNT=0;
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <Reset_Enc2+0x34>)
 8005770:	2200      	movs	r2, #0
 8005772:	625a      	str	r2, [r3, #36]	; 0x24
	distanceRight=0;
 8005774:	4b07      	ldr	r3, [pc, #28]	; (8005794 <Reset_Enc2+0x38>)
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
	pulseRight=0;
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <Reset_Enc2+0x3c>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000a38 	.word	0x20000a38
 8005790:	40010000 	.word	0x40010000
 8005794:	20000a10 	.word	0x20000a10
 8005798:	20000a3c 	.word	0x20000a3c

0800579c <Reset_Enc>:

void Reset_Enc(){
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
	Reset_Enc1();
 80057a0:	f7ff ffbc 	bl	800571c <Reset_Enc1>
	Reset_Enc2();
 80057a4:	f7ff ffda 	bl	800575c <Reset_Enc2>
	distanceAll=0;
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <Reset_Enc+0x20>)
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
	pulseAll=0;
 80057b0:	4b03      	ldr	r3, [pc, #12]	; (80057c0 <Reset_Enc+0x24>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000a14 	.word	0x20000a14
 80057c0:	20000a44 	.word	0x20000a44

080057c4 <errorMapping>:


int8_t errorMapping(uint8_t sensorState)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
	int8_t errorState;
	if(sensorState == 0b10000000){errorState = 7;}
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d101      	bne.n	80057d8 <errorMapping+0x14>
 80057d4:	2307      	movs	r3, #7
 80057d6:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b11000000){errorState = 6;}
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	2bc0      	cmp	r3, #192	; 0xc0
 80057dc:	d101      	bne.n	80057e2 <errorMapping+0x1e>
 80057de:	2306      	movs	r3, #6
 80057e0:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b11100000){errorState = 6;}
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	2be0      	cmp	r3, #224	; 0xe0
 80057e6:	d101      	bne.n	80057ec <errorMapping+0x28>
 80057e8:	2306      	movs	r3, #6
 80057ea:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b01000000){errorState = 5;}
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d101      	bne.n	80057f6 <errorMapping+0x32>
 80057f2:	2305      	movs	r3, #5
 80057f4:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b01100000){errorState = 4;}
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	2b60      	cmp	r3, #96	; 0x60
 80057fa:	d101      	bne.n	8005800 <errorMapping+0x3c>
 80057fc:	2304      	movs	r3, #4
 80057fe:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b01110000){errorState = 4;}
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b70      	cmp	r3, #112	; 0x70
 8005804:	d101      	bne.n	800580a <errorMapping+0x46>
 8005806:	2304      	movs	r3, #4
 8005808:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00100000){errorState = 3;}
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b20      	cmp	r3, #32
 800580e:	d101      	bne.n	8005814 <errorMapping+0x50>
 8005810:	2303      	movs	r3, #3
 8005812:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00110000){errorState = 2;}
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b30      	cmp	r3, #48	; 0x30
 8005818:	d101      	bne.n	800581e <errorMapping+0x5a>
 800581a:	2302      	movs	r3, #2
 800581c:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00111000){errorState = 2;}
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	2b38      	cmp	r3, #56	; 0x38
 8005822:	d101      	bne.n	8005828 <errorMapping+0x64>
 8005824:	2302      	movs	r3, #2
 8005826:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00010000){errorState = 1;}
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	2b10      	cmp	r3, #16
 800582c:	d101      	bne.n	8005832 <errorMapping+0x6e>
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00011000){errorState = 0;}
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	2b18      	cmp	r3, #24
 8005836:	d101      	bne.n	800583c <errorMapping+0x78>
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00001000){errorState = -1;}
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	2b08      	cmp	r3, #8
 8005840:	d101      	bne.n	8005846 <errorMapping+0x82>
 8005842:	23ff      	movs	r3, #255	; 0xff
 8005844:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00011100){errorState = -2;}
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	2b1c      	cmp	r3, #28
 800584a:	d101      	bne.n	8005850 <errorMapping+0x8c>
 800584c:	23fe      	movs	r3, #254	; 0xfe
 800584e:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00001100){errorState = -2;}
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b0c      	cmp	r3, #12
 8005854:	d101      	bne.n	800585a <errorMapping+0x96>
 8005856:	23fe      	movs	r3, #254	; 0xfe
 8005858:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00000100){errorState = -3;}
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d101      	bne.n	8005864 <errorMapping+0xa0>
 8005860:	23fd      	movs	r3, #253	; 0xfd
 8005862:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00001110){errorState = -4;}
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	2b0e      	cmp	r3, #14
 8005868:	d101      	bne.n	800586e <errorMapping+0xaa>
 800586a:	23fc      	movs	r3, #252	; 0xfc
 800586c:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00000110){errorState = -4;}
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d101      	bne.n	8005878 <errorMapping+0xb4>
 8005874:	23fc      	movs	r3, #252	; 0xfc
 8005876:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00000010){errorState = -5;}
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d101      	bne.n	8005882 <errorMapping+0xbe>
 800587e:	23fb      	movs	r3, #251	; 0xfb
 8005880:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00000111){errorState = -6;}
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	2b07      	cmp	r3, #7
 8005886:	d101      	bne.n	800588c <errorMapping+0xc8>
 8005888:	23fa      	movs	r3, #250	; 0xfa
 800588a:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00000011){errorState = -6;}
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d101      	bne.n	8005896 <errorMapping+0xd2>
 8005892:	23fa      	movs	r3, #250	; 0xfa
 8005894:	73fb      	strb	r3, [r7, #15]
	if(sensorState == 0b00000001){errorState = -7;}
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <errorMapping+0xdc>
 800589c:	23f9      	movs	r3, #249	; 0xf9
 800589e:	73fb      	strb	r3, [r7, #15]
	return errorState;
 80058a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <calibrateLineSensor>:

void calibrateLineSensor()
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
	MotorPWM[0]=0; MotorPWM[1]=0;
 80058b4:	4b2d      	ldr	r3, [pc, #180]	; (800596c <calibrateLineSensor+0xbc>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	4b2c      	ldr	r3, [pc, #176]	; (800596c <calibrateLineSensor+0xbc>)
 80058bc:	2200      	movs	r2, #0
 80058be:	805a      	strh	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058c6:	482a      	ldr	r0, [pc, #168]	; (8005970 <calibrateLineSensor+0xc0>)
 80058c8:	f7fc fa9e 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80058cc:	2064      	movs	r0, #100	; 0x64
 80058ce:	f7fb fbaf 	bl	8001030 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80058d2:	2201      	movs	r2, #1
 80058d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058d8:	4825      	ldr	r0, [pc, #148]	; (8005970 <calibrateLineSensor+0xc0>)
 80058da:	f7fc fa95 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80058de:	2064      	movs	r0, #100	; 0x64
 80058e0:	f7fb fba6 	bl	8001030 <HAL_Delay>

	MotorPWM[0]=100; MotorPWM[1]=-100;
 80058e4:	4b21      	ldr	r3, [pc, #132]	; (800596c <calibrateLineSensor+0xbc>)
 80058e6:	2264      	movs	r2, #100	; 0x64
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	4b20      	ldr	r3, [pc, #128]	; (800596c <calibrateLineSensor+0xbc>)
 80058ec:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80058f0:	805a      	strh	r2, [r3, #2]
	HAL_Delay(500);
 80058f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058f6:	f7fb fb9b 	bl	8001030 <HAL_Delay>
	MotorPWM[0]=0; MotorPWM[1]=0;
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <calibrateLineSensor+0xbc>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <calibrateLineSensor+0xbc>)
 8005902:	2200      	movs	r2, #0
 8005904:	805a      	strh	r2, [r3, #2]
	HAL_Delay(500);
 8005906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800590a:	f7fb fb91 	bl	8001030 <HAL_Delay>
	MotorPWM[0]=-100; MotorPWM[1]=100;
 800590e:	4b17      	ldr	r3, [pc, #92]	; (800596c <calibrateLineSensor+0xbc>)
 8005910:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <calibrateLineSensor+0xbc>)
 8005918:	2264      	movs	r2, #100	; 0x64
 800591a:	805a      	strh	r2, [r3, #2]
	HAL_Delay(1000);
 800591c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005920:	f7fb fb86 	bl	8001030 <HAL_Delay>
	MotorPWM[0]=0; MotorPWM[1]=0;
 8005924:	4b11      	ldr	r3, [pc, #68]	; (800596c <calibrateLineSensor+0xbc>)
 8005926:	2200      	movs	r2, #0
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <calibrateLineSensor+0xbc>)
 800592c:	2200      	movs	r2, #0
 800592e:	805a      	strh	r2, [r3, #2]
	HAL_Delay(500);
 8005930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005934:	f7fb fb7c 	bl	8001030 <HAL_Delay>
	MotorPWM[0]=100; MotorPWM[1]=-100;
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <calibrateLineSensor+0xbc>)
 800593a:	2264      	movs	r2, #100	; 0x64
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <calibrateLineSensor+0xbc>)
 8005940:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8005944:	805a      	strh	r2, [r3, #2]
	HAL_Delay(500);
 8005946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800594a:	f7fb fb71 	bl	8001030 <HAL_Delay>
	MotorPWM[0]=0; MotorPWM[1]=0;
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <calibrateLineSensor+0xbc>)
 8005950:	2200      	movs	r2, #0
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <calibrateLineSensor+0xbc>)
 8005956:	2200      	movs	r2, #0
 8005958:	805a      	strh	r2, [r3, #2]
	HAL_Delay(500);
 800595a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800595e:	f7fb fb67 	bl	8001030 <HAL_Delay>

	taskNumber=0;
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <calibrateLineSensor+0xc4>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
}
 8005968:	bf00      	nop
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000a48 	.word	0x20000a48
 8005970:	40020800 	.word	0x40020800
 8005974:	20000aa2 	.word	0x20000aa2

08005978 <runCapture>:

void runCapture()
{
 8005978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800597c:	b086      	sub	sp, #24
 800597e:	af04      	add	r7, sp, #16
	  Reset_Enc();
 8005980:	f7ff ff0c 	bl	800579c <Reset_Enc>
	  steps=0;
 8005984:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <runCapture+0x28>)
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
	  int timeSampling = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	607b      	str	r3, [r7, #4]
	  uint16_t pwm0 = MotorPWM[0];
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <runCapture+0x2c>)
 8005990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005994:	807b      	strh	r3, [r7, #2]
	  uint16_t pwm1 = MotorPWM[1];
 8005996:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <runCapture+0x2c>)
 8005998:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800599c:	803b      	strh	r3, [r7, #0]
	  while(steps<numofpict){
 800599e:	e1cc      	b.n	8005d3a <runCapture+0x3c2>
 80059a0:	20000aa8 	.word	0x20000aa8
 80059a4:	20000a48 	.word	0x20000a48
		  while(1){
			  linesensor[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 80059a8:	2101      	movs	r1, #1
 80059aa:	48af      	ldr	r0, [pc, #700]	; (8005c68 <runCapture+0x2f0>)
 80059ac:	f7fc fa14 	bl	8001dd8 <HAL_GPIO_ReadPin>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	4bad      	ldr	r3, [pc, #692]	; (8005c6c <runCapture+0x2f4>)
 80059b6:	701a      	strb	r2, [r3, #0]
			  linesensor[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80059b8:	2102      	movs	r1, #2
 80059ba:	48ab      	ldr	r0, [pc, #684]	; (8005c68 <runCapture+0x2f0>)
 80059bc:	f7fc fa0c 	bl	8001dd8 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	4ba9      	ldr	r3, [pc, #676]	; (8005c6c <runCapture+0x2f4>)
 80059c6:	705a      	strb	r2, [r3, #1]
			  linesensor[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);
 80059c8:	2104      	movs	r1, #4
 80059ca:	48a7      	ldr	r0, [pc, #668]	; (8005c68 <runCapture+0x2f0>)
 80059cc:	f7fc fa04 	bl	8001dd8 <HAL_GPIO_ReadPin>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	4ba5      	ldr	r3, [pc, #660]	; (8005c6c <runCapture+0x2f4>)
 80059d6:	709a      	strb	r2, [r3, #2]
			  linesensor[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 80059d8:	2108      	movs	r1, #8
 80059da:	48a3      	ldr	r0, [pc, #652]	; (8005c68 <runCapture+0x2f0>)
 80059dc:	f7fc f9fc 	bl	8001dd8 <HAL_GPIO_ReadPin>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461a      	mov	r2, r3
 80059e4:	4ba1      	ldr	r3, [pc, #644]	; (8005c6c <runCapture+0x2f4>)
 80059e6:	70da      	strb	r2, [r3, #3]
			  linesensor[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80059e8:	2110      	movs	r1, #16
 80059ea:	489f      	ldr	r0, [pc, #636]	; (8005c68 <runCapture+0x2f0>)
 80059ec:	f7fc f9f4 	bl	8001dd8 <HAL_GPIO_ReadPin>
 80059f0:	4603      	mov	r3, r0
 80059f2:	461a      	mov	r2, r3
 80059f4:	4b9d      	ldr	r3, [pc, #628]	; (8005c6c <runCapture+0x2f4>)
 80059f6:	711a      	strb	r2, [r3, #4]
			  linesensor[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 80059f8:	2120      	movs	r1, #32
 80059fa:	489b      	ldr	r0, [pc, #620]	; (8005c68 <runCapture+0x2f0>)
 80059fc:	f7fc f9ec 	bl	8001dd8 <HAL_GPIO_ReadPin>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b99      	ldr	r3, [pc, #612]	; (8005c6c <runCapture+0x2f4>)
 8005a06:	715a      	strb	r2, [r3, #5]
			  linesensor[6] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	4897      	ldr	r0, [pc, #604]	; (8005c68 <runCapture+0x2f0>)
 8005a0c:	f7fc f9e4 	bl	8001dd8 <HAL_GPIO_ReadPin>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b95      	ldr	r3, [pc, #596]	; (8005c6c <runCapture+0x2f4>)
 8005a16:	719a      	strb	r2, [r3, #6]
			  linesensor[7] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	4893      	ldr	r0, [pc, #588]	; (8005c68 <runCapture+0x2f0>)
 8005a1c:	f7fc f9dc 	bl	8001dd8 <HAL_GPIO_ReadPin>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	4b91      	ldr	r3, [pc, #580]	; (8005c6c <runCapture+0x2f4>)
 8005a26:	71da      	strb	r2, [r3, #7]

			  pvlineSensor = linesensor[0] | linesensor[1]<<1 | linesensor[2]<<2 | linesensor[3]<<3 | linesensor[4]<<4 | linesensor[5]<<5 | linesensor[6]<<6 | linesensor[7]<<7;
 8005a28:	4b90      	ldr	r3, [pc, #576]	; (8005c6c <runCapture+0x2f4>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	b25a      	sxtb	r2, r3
 8005a2e:	4b8f      	ldr	r3, [pc, #572]	; (8005c6c <runCapture+0x2f4>)
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	b25b      	sxtb	r3, r3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b25a      	sxtb	r2, r3
 8005a3a:	4b8c      	ldr	r3, [pc, #560]	; (8005c6c <runCapture+0x2f4>)
 8005a3c:	789b      	ldrb	r3, [r3, #2]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b25a      	sxtb	r2, r3
 8005a46:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <runCapture+0x2f4>)
 8005a48:	78db      	ldrb	r3, [r3, #3]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b25a      	sxtb	r2, r3
 8005a52:	4b86      	ldr	r3, [pc, #536]	; (8005c6c <runCapture+0x2f4>)
 8005a54:	791b      	ldrb	r3, [r3, #4]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	b25a      	sxtb	r2, r3
 8005a5e:	4b83      	ldr	r3, [pc, #524]	; (8005c6c <runCapture+0x2f4>)
 8005a60:	795b      	ldrb	r3, [r3, #5]
 8005a62:	015b      	lsls	r3, r3, #5
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	4313      	orrs	r3, r2
 8005a68:	b25a      	sxtb	r2, r3
 8005a6a:	4b80      	ldr	r3, [pc, #512]	; (8005c6c <runCapture+0x2f4>)
 8005a6c:	799b      	ldrb	r3, [r3, #6]
 8005a6e:	019b      	lsls	r3, r3, #6
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	4313      	orrs	r3, r2
 8005a74:	b25a      	sxtb	r2, r3
 8005a76:	4b7d      	ldr	r3, [pc, #500]	; (8005c6c <runCapture+0x2f4>)
 8005a78:	79db      	ldrb	r3, [r3, #7]
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	b25b      	sxtb	r3, r3
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	b25b      	sxtb	r3, r3
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	4b7a      	ldr	r3, [pc, #488]	; (8005c70 <runCapture+0x2f8>)
 8005a86:	701a      	strb	r2, [r3, #0]

			  error   =   errorMapping(pvlineSensor);
 8005a88:	4b79      	ldr	r3, [pc, #484]	; (8005c70 <runCapture+0x2f8>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fe99 	bl	80057c4 <errorMapping>
 8005a92:	4603      	mov	r3, r0
 8005a94:	461a      	mov	r2, r3
 8005a96:	4b77      	ldr	r3, [pc, #476]	; (8005c74 <runCapture+0x2fc>)
 8005a98:	701a      	strb	r2, [r3, #0]
			  P       =   Kp*error;
 8005a9a:	4b77      	ldr	r3, [pc, #476]	; (8005c78 <runCapture+0x300>)
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	4b75      	ldr	r3, [pc, #468]	; (8005c74 <runCapture+0x2fc>)
 8005aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	fb12 f303 	smulbb	r3, r2, r3
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	b25a      	sxtb	r2, r3
 8005aae:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <runCapture+0x304>)
 8005ab0:	701a      	strb	r2, [r3, #0]
			  I		  =   Ki*(error+lastError);
 8005ab2:	4b70      	ldr	r3, [pc, #448]	; (8005c74 <runCapture+0x2fc>)
 8005ab4:	f993 3000 	ldrsb.w	r3, [r3]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4b71      	ldr	r3, [pc, #452]	; (8005c80 <runCapture+0x308>)
 8005abc:	f993 3000 	ldrsb.w	r3, [r3]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	4b6f      	ldr	r3, [pc, #444]	; (8005c84 <runCapture+0x30c>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	fb12 f303 	smulbb	r3, r2, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	b25a      	sxtb	r2, r3
 8005ad0:	4b6d      	ldr	r3, [pc, #436]	; (8005c88 <runCapture+0x310>)
 8005ad2:	701a      	strb	r2, [r3, #0]
			  D       =   Kd*(error-lastError);//(Kd/timeSampling)*(error-lastError);
 8005ad4:	4b67      	ldr	r3, [pc, #412]	; (8005c74 <runCapture+0x2fc>)
 8005ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8005ada:	461a      	mov	r2, r3
 8005adc:	4b68      	ldr	r3, [pc, #416]	; (8005c80 <runCapture+0x308>)
 8005ade:	f993 3000 	ldrsb.w	r3, [r3]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	4b69      	ldr	r3, [pc, #420]	; (8005c8c <runCapture+0x314>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	fb12 f303 	smulbb	r3, r2, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	b25a      	sxtb	r2, r3
 8005af2:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <runCapture+0x318>)
 8005af4:	701a      	strb	r2, [r3, #0]
			  //PD      =   P+D;
			  PID	  = P+I+D;
 8005af6:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <runCapture+0x304>)
 8005af8:	f993 3000 	ldrsb.w	r3, [r3]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	4b62      	ldr	r3, [pc, #392]	; (8005c88 <runCapture+0x310>)
 8005b00:	f993 3000 	ldrsb.w	r3, [r3]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	4413      	add	r3, r2
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b61      	ldr	r3, [pc, #388]	; (8005c90 <runCapture+0x318>)
 8005b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	b25a      	sxtb	r2, r3
 8005b18:	4b5e      	ldr	r3, [pc, #376]	; (8005c94 <runCapture+0x31c>)
 8005b1a:	701a      	strb	r2, [r3, #0]
			  MotorPWM[0]=pwm0-PID;//100-PID;
 8005b1c:	4b5d      	ldr	r3, [pc, #372]	; (8005c94 <runCapture+0x31c>)
 8005b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	887a      	ldrh	r2, [r7, #2]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	b21a      	sxth	r2, r3
 8005b2c:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <runCapture+0x320>)
 8005b2e:	801a      	strh	r2, [r3, #0]
			  MotorPWM[1]=pwm1+PID;//100+PID;
 8005b30:	4b58      	ldr	r3, [pc, #352]	; (8005c94 <runCapture+0x31c>)
 8005b32:	f993 3000 	ldrsb.w	r3, [r3]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	883b      	ldrh	r3, [r7, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	b21a      	sxth	r2, r3
 8005b40:	4b55      	ldr	r3, [pc, #340]	; (8005c98 <runCapture+0x320>)
 8005b42:	805a      	strh	r2, [r3, #2]


			  lastError=error;
 8005b44:	4b4b      	ldr	r3, [pc, #300]	; (8005c74 <runCapture+0x2fc>)
 8005b46:	f993 2000 	ldrsb.w	r2, [r3]
 8005b4a:	4b4d      	ldr	r3, [pc, #308]	; (8005c80 <runCapture+0x308>)
 8005b4c:	701a      	strb	r2, [r3, #0]
			  timeSampling=HAL_GetTick()-timeSampling;
 8005b4e:	f7fb fa63 	bl	8001018 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	607b      	str	r3, [r7, #4]
			  distanceAll=(distanceLeft+distanceRight)/2;
 8005b5a:	4b50      	ldr	r3, [pc, #320]	; (8005c9c <runCapture+0x324>)
 8005b5c:	ed93 7a00 	vldr	s14, [r3]
 8005b60:	4b4f      	ldr	r3, [pc, #316]	; (8005ca0 <runCapture+0x328>)
 8005b62:	edd3 7a00 	vldr	s15, [r3]
 8005b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b6a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b72:	4b4c      	ldr	r3, [pc, #304]	; (8005ca4 <runCapture+0x32c>)
 8005b74:	edc3 7a00 	vstr	s15, [r3]

			  if(HAL_GetTick()-lastTimeTick>30){
 8005b78:	f7fb fa4e 	bl	8001018 <HAL_GetTick>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	4a4a      	ldr	r2, [pc, #296]	; (8005ca8 <runCapture+0x330>)
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	2b1e      	cmp	r3, #30
 8005b86:	d929      	bls.n	8005bdc <runCapture+0x264>
			  		//sprintf(PC_Kirim,"3dp,%.2f,%.2f,%d,%d\n",distanceAll, GyroData,captState,error);
				    sprintf(PC_Kirim,"p,%.2f,%.2f,%d,d\n",distanceAll,GyroData,error);
 8005b88:	4b46      	ldr	r3, [pc, #280]	; (8005ca4 <runCapture+0x32c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fa fcdb 	bl	8000548 <__aeabi_f2d>
 8005b92:	4604      	mov	r4, r0
 8005b94:	460d      	mov	r5, r1
 8005b96:	4b45      	ldr	r3, [pc, #276]	; (8005cac <runCapture+0x334>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fa fcd4 	bl	8000548 <__aeabi_f2d>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4933      	ldr	r1, [pc, #204]	; (8005c74 <runCapture+0x2fc>)
 8005ba6:	f991 1000 	ldrsb.w	r1, [r1]
 8005baa:	9102      	str	r1, [sp, #8]
 8005bac:	e9cd 2300 	strd	r2, r3, [sp]
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	493e      	ldr	r1, [pc, #248]	; (8005cb0 <runCapture+0x338>)
 8005bb6:	483f      	ldr	r0, [pc, #252]	; (8005cb4 <runCapture+0x33c>)
 8005bb8:	f001 f864 	bl	8006c84 <sprintf>
			  		HAL_UART_Transmit_IT(&huart1, PC_Kirim, strlen(PC_Kirim));
 8005bbc:	483d      	ldr	r0, [pc, #244]	; (8005cb4 <runCapture+0x33c>)
 8005bbe:	f7fa fb07 	bl	80001d0 <strlen>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	493a      	ldr	r1, [pc, #232]	; (8005cb4 <runCapture+0x33c>)
 8005bca:	483b      	ldr	r0, [pc, #236]	; (8005cb8 <runCapture+0x340>)
 8005bcc:	f7fd fef1 	bl	80039b2 <HAL_UART_Transmit_IT>
			  		lastTimeTick=HAL_GetTick();
 8005bd0:	f7fb fa22 	bl	8001018 <HAL_GetTick>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4b33      	ldr	r3, [pc, #204]	; (8005ca8 <runCapture+0x330>)
 8005bda:	601a      	str	r2, [r3, #0]
			  	}

			  if(taskNumber == 0){
 8005bdc:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <runCapture+0x344>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d073      	beq.n	8005ccc <runCapture+0x354>
				  break;
			  }
			  if((distanceAll/(steps+1))>=(2*3.14*radoftrack)/numofpict){
 8005be4:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <runCapture+0x32c>)
 8005be6:	ed93 7a00 	vldr	s14, [r3]
 8005bea:	4b35      	ldr	r3, [pc, #212]	; (8005cc0 <runCapture+0x348>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005bfc:	ee16 0a90 	vmov	r0, s13
 8005c00:	f7fa fca2 	bl	8000548 <__aeabi_f2d>
 8005c04:	4604      	mov	r4, r0
 8005c06:	460d      	mov	r5, r1
 8005c08:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <runCapture+0x34c>)
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fa fc89 	bl	8000524 <__aeabi_i2d>
 8005c12:	a313      	add	r3, pc, #76	; (adr r3, 8005c60 <runCapture+0x2e8>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fcee 	bl	80005f8 <__aeabi_dmul>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4690      	mov	r8, r2
 8005c22:	4699      	mov	r9, r3
 8005c24:	4b28      	ldr	r3, [pc, #160]	; (8005cc8 <runCapture+0x350>)
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fa fc7b 	bl	8000524 <__aeabi_i2d>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f7fa fe09 	bl	800084c <__aeabi_ddiv>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7fa ff5f 	bl	8000b04 <__aeabi_dcmpge>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d006      	beq.n	8005c5a <runCapture+0x2e2>
				  MotorPWM[0]=0; MotorPWM[1]=0;
 8005c4c:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <runCapture+0x320>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <runCapture+0x320>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	805a      	strh	r2, [r3, #2]
				  break;
 8005c58:	e039      	b.n	8005cce <runCapture+0x356>
			  linesensor[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8005c5a:	e6a5      	b.n	80059a8 <runCapture+0x30>
 8005c5c:	f3af 8000 	nop.w
 8005c60:	51eb851f 	.word	0x51eb851f
 8005c64:	40191eb8 	.word	0x40191eb8
 8005c68:	40020c00 	.word	0x40020c00
 8005c6c:	20000a50 	.word	0x20000a50
 8005c70:	20000a58 	.word	0x20000a58
 8005c74:	20000a5f 	.word	0x20000a5f
 8005c78:	20000005 	.word	0x20000005
 8005c7c:	20000a59 	.word	0x20000a59
 8005c80:	20000a5d 	.word	0x20000a5d
 8005c84:	20000a5e 	.word	0x20000a5e
 8005c88:	20000a5a 	.word	0x20000a5a
 8005c8c:	20000006 	.word	0x20000006
 8005c90:	20000a5b 	.word	0x20000a5b
 8005c94:	20000a5c 	.word	0x20000a5c
 8005c98:	20000a48 	.word	0x20000a48
 8005c9c:	20000a0c 	.word	0x20000a0c
 8005ca0:	20000a10 	.word	0x20000a10
 8005ca4:	20000a14 	.word	0x20000a14
 8005ca8:	20000a4c 	.word	0x20000a4c
 8005cac:	20000a34 	.word	0x20000a34
 8005cb0:	0800b6d4 	.word	0x0800b6d4
 8005cb4:	20000aac 	.word	0x20000aac
 8005cb8:	20000c98 	.word	0x20000c98
 8005cbc:	20000aa2 	.word	0x20000aa2
 8005cc0:	20000aa8 	.word	0x20000aa8
 8005cc4:	20000aa4 	.word	0x20000aa4
 8005cc8:	20000aa6 	.word	0x20000aa6
				  break;
 8005ccc:	bf00      	nop
			  }
			  //sprintf(PC_Kirim,"%.2f,%.2f,%d\n",distanceAll, GyroData,captState);
			  //HAL_UART_Transmit_IT(&huart1, PC_Kirim, strlen(PC_Kirim));
			  //HAL_UART_Transmit_DMA(&huart1, PC_Kirim, strlen(PC_Kirim));
		  }
		  if(taskNumber == 0){
 8005cce:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <runCapture+0x3e8>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d03a      	beq.n	8005d4c <runCapture+0x3d4>
		  	 break;
		  }
		  MotorPWM[0]=0; MotorPWM[1]=0;
 8005cd6:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <runCapture+0x3ec>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <runCapture+0x3ec>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	805a      	strh	r2, [r3, #2]
		  HAL_Delay(500);
 8005ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ce6:	f7fb f9a3 	bl	8001030 <HAL_Delay>
		  captState = 1;
 8005cea:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <runCapture+0x3f0>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]
		  //sprintf(PC_Kirim,"%.2f,%.2f,%d\n",distanceAll, GyroData,captState);
		  //HAL_UART_Transmit(&huart1, PC_Kirim, strlen(PC_Kirim),100);
		  HAL_UART_Transmit(&huart1, "c", strlen("c"),100);
 8005cf0:	2364      	movs	r3, #100	; 0x64
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	491d      	ldr	r1, [pc, #116]	; (8005d6c <runCapture+0x3f4>)
 8005cf6:	481e      	ldr	r0, [pc, #120]	; (8005d70 <runCapture+0x3f8>)
 8005cf8:	f7fd fdc9 	bl	800388e <HAL_UART_Transmit>
		  //sprintf(PC_Kirim,"3dp,%.2f,%.2f,%d,%d\n",distanceAll, GyroData,captState,error);
		  sprintf(PC_Kirim,"p,%.2f,%d,%d\n",distanceAll, error,captState);
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <runCapture+0x3fc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fa fc21 	bl	8000548 <__aeabi_f2d>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	491b      	ldr	r1, [pc, #108]	; (8005d78 <runCapture+0x400>)
 8005d0c:	f991 1000 	ldrsb.w	r1, [r1]
 8005d10:	4608      	mov	r0, r1
 8005d12:	4915      	ldr	r1, [pc, #84]	; (8005d68 <runCapture+0x3f0>)
 8005d14:	7809      	ldrb	r1, [r1, #0]
 8005d16:	9101      	str	r1, [sp, #4]
 8005d18:	9000      	str	r0, [sp, #0]
 8005d1a:	4918      	ldr	r1, [pc, #96]	; (8005d7c <runCapture+0x404>)
 8005d1c:	4818      	ldr	r0, [pc, #96]	; (8005d80 <runCapture+0x408>)
 8005d1e:	f000 ffb1 	bl	8006c84 <sprintf>
		  }
			*/

		  //HAL_UART_Transmit_IT(&huart1, PC_Kirim, strlen(PC_Kirim));
		  //HAL_Delay(8000);
		  captState = 0;
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <runCapture+0x3f0>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
		  //while(taskNumber != 4){}
		  HAL_Delay(6000);
 8005d28:	f241 7070 	movw	r0, #6000	; 0x1770
 8005d2c:	f7fb f980 	bl	8001030 <HAL_Delay>
		  //taskNumber=2;
		  steps=steps+1;
 8005d30:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <runCapture+0x40c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <runCapture+0x40c>)
 8005d38:	6013      	str	r3, [r2, #0]
	  while(steps<numofpict){
 8005d3a:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <runCapture+0x410>)
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <runCapture+0x40c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	f73f ae2f 	bgt.w	80059a8 <runCapture+0x30>
 8005d4a:	e000      	b.n	8005d4e <runCapture+0x3d6>
		  	 break;
 8005d4c:	bf00      	nop
	  }
	  taskNumber=0;
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <runCapture+0x3e8>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000aa2 	.word	0x20000aa2
 8005d64:	20000a48 	.word	0x20000a48
 8005d68:	20000b2c 	.word	0x20000b2c
 8005d6c:	0800b6e8 	.word	0x0800b6e8
 8005d70:	20000c98 	.word	0x20000c98
 8005d74:	20000a14 	.word	0x20000a14
 8005d78:	20000a5f 	.word	0x20000a5f
 8005d7c:	0800b6ec 	.word	0x0800b6ec
 8005d80:	20000aac 	.word	0x20000aac
 8005d84:	20000aa8 	.word	0x20000aa8
 8005d88:	20000aa6 	.word	0x20000aa6
 8005d8c:	00000000 	.word	0x00000000

08005d90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a6a      	ldr	r2, [pc, #424]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f040 80c5 	bne.w	8005f2e <HAL_TIM_PeriodElapsedCallback+0x19e>
	{
		HAL_GPIO_TogglePin(brd_led_GPIO_Port, brd_led_Pin);
 8005da4:	2102      	movs	r1, #2
 8005da6:	4869      	ldr	r0, [pc, #420]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8005da8:	f7fc f847 	bl	8001e3a <HAL_GPIO_TogglePin>

		if(MotorPWM[0]>1000)
 8005dac:	4b68      	ldr	r3, [pc, #416]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005db6:	dd04      	ble.n	8005dc2 <HAL_TIM_PeriodElapsedCallback+0x32>
			MotorPWM[0] = 1000;
 8005db8:	4b65      	ldr	r3, [pc, #404]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	e009      	b.n	8005dd6 <HAL_TIM_PeriodElapsedCallback+0x46>
		else if(MotorPWM[0]<-1000)
 8005dc2:	4b63      	ldr	r3, [pc, #396]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dc8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8005dcc:	da03      	bge.n	8005dd6 <HAL_TIM_PeriodElapsedCallback+0x46>
			MotorPWM[0] = -1000;
 8005dce:	4b60      	ldr	r3, [pc, #384]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dd0:	f64f 4218 	movw	r2, #64536	; 0xfc18
 8005dd4:	801a      	strh	r2, [r3, #0]


		if(MotorPWM[1]>1000)
 8005dd6:	4b5e      	ldr	r3, [pc, #376]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de0:	dd04      	ble.n	8005dec <HAL_TIM_PeriodElapsedCallback+0x5c>
			MotorPWM[1] = 1000;
 8005de2:	4b5b      	ldr	r3, [pc, #364]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005de8:	805a      	strh	r2, [r3, #2]
 8005dea:	e009      	b.n	8005e00 <HAL_TIM_PeriodElapsedCallback+0x70>
		else if(MotorPWM[1]<-1000)
 8005dec:	4b58      	ldr	r3, [pc, #352]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005df2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8005df6:	da03      	bge.n	8005e00 <HAL_TIM_PeriodElapsedCallback+0x70>
			MotorPWM[1] = -1000;
 8005df8:	4b55      	ldr	r3, [pc, #340]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005dfa:	f64f 4218 	movw	r2, #64536	; 0xfc18
 8005dfe:	805a      	strh	r2, [r3, #2]

		MotorSetPWM(MotorPWM);
 8005e00:	4853      	ldr	r0, [pc, #332]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005e02:	f7ff fc2d 	bl	8005660 <MotorSetPWM>

		Encoder[0]=TIM3->CNT - 65535;
 8005e06:	4b53      	ldr	r3, [pc, #332]	; (8005f54 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	b25a      	sxtb	r2, r3
 8005e12:	4b51      	ldr	r3, [pc, #324]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005e14:	701a      	strb	r2, [r3, #0]
		TIM3->CNT=65535;
 8005e16:	4b4f      	ldr	r3, [pc, #316]	; (8005f54 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8005e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24
		pulseLeft+=(float)(Encoder[0]);  //* Clicks1;
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e2a:	4b4b      	ldr	r3, [pc, #300]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e40:	ee17 2a90 	vmov	r2, s15
 8005e44:	4b45      	ldr	r3, [pc, #276]	; (8005f5c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005e46:	601a      	str	r2, [r3, #0]
		distanceLeft = ((float)(pulseLeft-1)/28000)*3.14*150;
 8005e48:	4b44      	ldr	r3, [pc, #272]	; (8005f5c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e56:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8005e5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e5e:	ee16 0a90 	vmov	r0, s13
 8005e62:	f7fa fb71 	bl	8000548 <__aeabi_f2d>
 8005e66:	a334      	add	r3, pc, #208	; (adr r3, 8005f38 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa fbc4 	bl	80005f8 <__aeabi_dmul>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	a331      	add	r3, pc, #196	; (adr r3, 8005f40 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fbbb 	bl	80005f8 <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	f7fa fe8d 	bl	8000ba8 <__aeabi_d2f>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8005e92:	6013      	str	r3, [r2, #0]
		Encoder[0]=0;
 8005e94:	4b30      	ldr	r3, [pc, #192]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]

		Encoder[1]=TIM1->CNT - 65535;
 8005e9a:	4b33      	ldr	r3, [pc, #204]	; (8005f68 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	b25a      	sxtb	r2, r3
 8005ea6:	4b2c      	ldr	r3, [pc, #176]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005ea8:	705a      	strb	r2, [r3, #1]
		TIM1->CNT=65535;
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24
		pulseRight+=(float)(Encoder[1]); //* Clicks1;
 8005eb2:	4b2e      	ldr	r3, [pc, #184]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ebe:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005ec0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed4:	ee17 2a90 	vmov	r2, s15
 8005ed8:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8005eda:	601a      	str	r2, [r3, #0]
		distanceRight = ((float)(pulseRight-1)/28000)*3.14*150;
 8005edc:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8005eee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ef2:	ee16 0a90 	vmov	r0, s13
 8005ef6:	f7fa fb27 	bl	8000548 <__aeabi_f2d>
 8005efa:	a30f      	add	r3, pc, #60	; (adr r3, 8005f38 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa fb7a 	bl	80005f8 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	a30c      	add	r3, pc, #48	; (adr r3, 8005f40 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa fb71 	bl	80005f8 <__aeabi_dmul>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f7fa fe43 	bl	8000ba8 <__aeabi_d2f>
 8005f22:	4603      	mov	r3, r0
 8005f24:	4a12      	ldr	r2, [pc, #72]	; (8005f70 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8005f26:	6013      	str	r3, [r2, #0]
		Encoder[1]=0;
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	705a      	strb	r2, [r3, #1]




	}
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	51eb851f 	.word	0x51eb851f
 8005f3c:	40091eb8 	.word	0x40091eb8
 8005f40:	00000000 	.word	0x00000000
 8005f44:	4062c000 	.word	0x4062c000
 8005f48:	40001000 	.word	0x40001000
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	20000a48 	.word	0x20000a48
 8005f54:	40000400 	.word	0x40000400
 8005f58:	20000a38 	.word	0x20000a38
 8005f5c:	20000a40 	.word	0x20000a40
 8005f60:	46dac000 	.word	0x46dac000
 8005f64:	20000a0c 	.word	0x20000a0c
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	20000a3c 	.word	0x20000a3c
 8005f70:	20000a10 	.word	0x20000a10

08005f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005f78:	b672      	cpsid	i
}
 8005f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005f7c:	e7fe      	b.n	8005f7c <Error_Handler+0x8>
	...

08005f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	607b      	str	r3, [r7, #4]
 8005f8a:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <HAL_MspInit+0x4c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	4a0f      	ldr	r2, [pc, #60]	; (8005fcc <HAL_MspInit+0x4c>)
 8005f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f94:	6453      	str	r3, [r2, #68]	; 0x44
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <HAL_MspInit+0x4c>)
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9e:	607b      	str	r3, [r7, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_MspInit+0x4c>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <HAL_MspInit+0x4c>)
 8005fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <HAL_MspInit+0x4c>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800

08005fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005fd4:	f7fc fbf0 	bl	80027b8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005fd8:	e7fe      	b.n	8005fd8 <NMI_Handler+0x8>

08005fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fde:	e7fe      	b.n	8005fde <HardFault_Handler+0x4>

08005fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fe4:	e7fe      	b.n	8005fe4 <MemManage_Handler+0x4>

08005fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fea:	e7fe      	b.n	8005fea <BusFault_Handler+0x4>

08005fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ff0:	e7fe      	b.n	8005ff0 <UsageFault_Handler+0x4>

08005ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800600e:	b480      	push	{r7}
 8006010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006012:	bf00      	nop
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006020:	f7fa ffe6 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006024:	bf00      	nop
 8006026:	bd80      	pop	{r7, pc}

08006028 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800602c:	4802      	ldr	r0, [pc, #8]	; (8006038 <DMA1_Stream2_IRQHandler+0x10>)
 800602e:	f7fb facd 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000d20 	.word	0x20000d20

0800603c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006040:	4802      	ldr	r0, [pc, #8]	; (800604c <DMA1_Stream5_IRQHandler+0x10>)
 8006042:	f7fb fac3 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000e40 	.word	0x20000e40

08006050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006054:	4802      	ldr	r0, [pc, #8]	; (8006060 <USART1_IRQHandler+0x10>)
 8006056:	f7fd fd21 	bl	8003a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800605a:	bf00      	nop
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000c98 	.word	0x20000c98

08006064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006068:	4802      	ldr	r0, [pc, #8]	; (8006074 <USART2_IRQHandler+0x10>)
 800606a:	f7fd fd17 	bl	8003a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000cdc 	.word	0x20000cdc

08006078 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800607c:	4802      	ldr	r0, [pc, #8]	; (8006088 <UART4_IRQHandler+0x10>)
 800607e:	f7fd fd0d 	bl	8003a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000c54 	.word	0x20000c54

0800608c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006090:	4802      	ldr	r0, [pc, #8]	; (800609c <TIM6_DAC_IRQHandler+0x10>)
 8006092:	f7fc feb7 	bl	8002e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000c0c 	.word	0x20000c0c

080060a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80060a4:	4802      	ldr	r0, [pc, #8]	; (80060b0 <DMA2_Stream2_IRQHandler+0x10>)
 80060a6:	f7fb fa91 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80060aa:	bf00      	nop
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20000d80 	.word	0x20000d80

080060b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80060b8:	4802      	ldr	r0, [pc, #8]	; (80060c4 <DMA2_Stream7_IRQHandler+0x10>)
 80060ba:	f7fb fa87 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80060be:	bf00      	nop
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000de0 	.word	0x20000de0

080060c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
	return 1;
 80060cc:	2301      	movs	r3, #1
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <_kill>:

int _kill(int pid, int sig)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80060e2:	f000 fd8f 	bl	8006c04 <__errno>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2216      	movs	r2, #22
 80060ea:	601a      	str	r2, [r3, #0]
	return -1;
 80060ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_exit>:

void _exit (int status)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006100:	f04f 31ff 	mov.w	r1, #4294967295
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff ffe7 	bl	80060d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800610a:	e7fe      	b.n	800610a <_exit+0x12>

0800610c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e00a      	b.n	8006134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800611e:	f3af 8000 	nop.w
 8006122:	4601      	mov	r1, r0
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	60ba      	str	r2, [r7, #8]
 800612a:	b2ca      	uxtb	r2, r1
 800612c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	3301      	adds	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	dbf0      	blt.n	800611e <_read+0x12>
	}

return len;
 800613c:	687b      	ldr	r3, [r7, #4]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e009      	b.n	800616c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	60ba      	str	r2, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	dbf1      	blt.n	8006158 <_write+0x12>
	}
	return len;
 8006174:	687b      	ldr	r3, [r7, #4]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_close>:

int _close(int file)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
	return -1;
 8006186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061a6:	605a      	str	r2, [r3, #4]
	return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <_isatty>:

int _isatty(int file)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
	return 1;
 80061be:	2301      	movs	r3, #1
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
	return 0;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061f0:	4a14      	ldr	r2, [pc, #80]	; (8006244 <_sbrk+0x5c>)
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <_sbrk+0x60>)
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061fc:	4b13      	ldr	r3, [pc, #76]	; (800624c <_sbrk+0x64>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006204:	4b11      	ldr	r3, [pc, #68]	; (800624c <_sbrk+0x64>)
 8006206:	4a12      	ldr	r2, [pc, #72]	; (8006250 <_sbrk+0x68>)
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800620a:	4b10      	ldr	r3, [pc, #64]	; (800624c <_sbrk+0x64>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	429a      	cmp	r2, r3
 8006216:	d207      	bcs.n	8006228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006218:	f000 fcf4 	bl	8006c04 <__errno>
 800621c:	4603      	mov	r3, r0
 800621e:	220c      	movs	r2, #12
 8006220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295
 8006226:	e009      	b.n	800623c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006228:	4b08      	ldr	r3, [pc, #32]	; (800624c <_sbrk+0x64>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800622e:	4b07      	ldr	r3, [pc, #28]	; (800624c <_sbrk+0x64>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	4a05      	ldr	r2, [pc, #20]	; (800624c <_sbrk+0x64>)
 8006238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20020000 	.word	0x20020000
 8006248:	00000400 	.word	0x00000400
 800624c:	20000b30 	.word	0x20000b30
 8006250:	20000ee0 	.word	0x20000ee0

08006254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <SystemInit+0x20>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	4a05      	ldr	r2, [pc, #20]	; (8006274 <SystemInit+0x20>)
 8006260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006268:	bf00      	nop
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	e000ed00 	.word	0xe000ed00

08006278 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	; 0x30
 800627c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800627e:	f107 030c 	add.w	r3, r7, #12
 8006282:	2224      	movs	r2, #36	; 0x24
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fcf4 	bl	8006c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800628c:	1d3b      	adds	r3, r7, #4
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006294:	4b22      	ldr	r3, [pc, #136]	; (8006320 <MX_TIM1_Init+0xa8>)
 8006296:	4a23      	ldr	r2, [pc, #140]	; (8006324 <MX_TIM1_Init+0xac>)
 8006298:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800629a:	4b21      	ldr	r3, [pc, #132]	; (8006320 <MX_TIM1_Init+0xa8>)
 800629c:	2200      	movs	r2, #0
 800629e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a0:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <MX_TIM1_Init+0xa8>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80062a6:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <MX_TIM1_Init+0xa8>)
 80062a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062ae:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <MX_TIM1_Init+0xa8>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80062b4:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <MX_TIM1_Init+0xa8>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062ba:	4b19      	ldr	r3, [pc, #100]	; (8006320 <MX_TIM1_Init+0xa8>)
 80062bc:	2200      	movs	r2, #0
 80062be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80062c0:	2301      	movs	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80062c8:	2301      	movs	r3, #1
 80062ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80062d4:	2300      	movs	r3, #0
 80062d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80062d8:	2301      	movs	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80062dc:	2300      	movs	r3, #0
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4619      	mov	r1, r3
 80062ea:	480d      	ldr	r0, [pc, #52]	; (8006320 <MX_TIM1_Init+0xa8>)
 80062ec:	f7fc fc56 	bl	8002b9c <HAL_TIM_Encoder_Init>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80062f6:	f7ff fe3d 	bl	8005f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062fa:	2300      	movs	r3, #0
 80062fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4806      	ldr	r0, [pc, #24]	; (8006320 <MX_TIM1_Init+0xa8>)
 8006308:	f7fd f9e4 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8006312:	f7ff fe2f 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006316:	bf00      	nop
 8006318:	3730      	adds	r7, #48	; 0x30
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000b34 	.word	0x20000b34
 8006324:	40010000 	.word	0x40010000

08006328 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800632e:	f107 0320 	add.w	r3, r7, #32
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	609a      	str	r2, [r3, #8]
 8006342:	60da      	str	r2, [r3, #12]
 8006344:	611a      	str	r2, [r3, #16]
 8006346:	615a      	str	r2, [r3, #20]
 8006348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800634a:	4b28      	ldr	r3, [pc, #160]	; (80063ec <MX_TIM2_Init+0xc4>)
 800634c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006350:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <MX_TIM2_Init+0xc4>)
 8006354:	2207      	movs	r2, #7
 8006356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006358:	4b24      	ldr	r3, [pc, #144]	; (80063ec <MX_TIM2_Init+0xc4>)
 800635a:	2200      	movs	r2, #0
 800635c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800635e:	4b23      	ldr	r3, [pc, #140]	; (80063ec <MX_TIM2_Init+0xc4>)
 8006360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006366:	4b21      	ldr	r3, [pc, #132]	; (80063ec <MX_TIM2_Init+0xc4>)
 8006368:	2200      	movs	r2, #0
 800636a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800636c:	4b1f      	ldr	r3, [pc, #124]	; (80063ec <MX_TIM2_Init+0xc4>)
 800636e:	2200      	movs	r2, #0
 8006370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006372:	481e      	ldr	r0, [pc, #120]	; (80063ec <MX_TIM2_Init+0xc4>)
 8006374:	f7fc fafa 	bl	800296c <HAL_TIM_PWM_Init>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800637e:	f7ff fdf9 	bl	8005f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800638a:	f107 0320 	add.w	r3, r7, #32
 800638e:	4619      	mov	r1, r3
 8006390:	4816      	ldr	r0, [pc, #88]	; (80063ec <MX_TIM2_Init+0xc4>)
 8006392:	f7fd f99f 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800639c:	f7ff fdea 	bl	8005f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063a0:	2360      	movs	r3, #96	; 0x60
 80063a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	2200      	movs	r2, #0
 80063b4:	4619      	mov	r1, r3
 80063b6:	480d      	ldr	r0, [pc, #52]	; (80063ec <MX_TIM2_Init+0xc4>)
 80063b8:	f7fc fe2c 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80063c2:	f7ff fdd7 	bl	8005f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	2204      	movs	r2, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4807      	ldr	r0, [pc, #28]	; (80063ec <MX_TIM2_Init+0xc4>)
 80063ce:	f7fc fe21 	bl	8003014 <HAL_TIM_PWM_ConfigChannel>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80063d8:	f7ff fdcc 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80063dc:	4803      	ldr	r0, [pc, #12]	; (80063ec <MX_TIM2_Init+0xc4>)
 80063de:	f000 f977 	bl	80066d0 <HAL_TIM_MspPostInit>

}
 80063e2:	bf00      	nop
 80063e4:	3728      	adds	r7, #40	; 0x28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000b7c 	.word	0x20000b7c

080063f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	; 0x30
 80063f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80063f6:	f107 030c 	add.w	r3, r7, #12
 80063fa:	2224      	movs	r2, #36	; 0x24
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fc38 	bl	8006c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800640c:	4b20      	ldr	r3, [pc, #128]	; (8006490 <MX_TIM3_Init+0xa0>)
 800640e:	4a21      	ldr	r2, [pc, #132]	; (8006494 <MX_TIM3_Init+0xa4>)
 8006410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006412:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <MX_TIM3_Init+0xa0>)
 8006414:	2200      	movs	r2, #0
 8006416:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006418:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <MX_TIM3_Init+0xa0>)
 800641a:	2200      	movs	r2, #0
 800641c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800641e:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <MX_TIM3_Init+0xa0>)
 8006420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006424:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <MX_TIM3_Init+0xa0>)
 8006428:	2200      	movs	r2, #0
 800642a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800642c:	4b18      	ldr	r3, [pc, #96]	; (8006490 <MX_TIM3_Init+0xa0>)
 800642e:	2200      	movs	r2, #0
 8006430:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006432:	2301      	movs	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800643a:	2301      	movs	r3, #1
 800643c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006446:	2300      	movs	r3, #0
 8006448:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800644a:	2301      	movs	r3, #1
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800644e:	2300      	movs	r3, #0
 8006450:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006456:	f107 030c 	add.w	r3, r7, #12
 800645a:	4619      	mov	r1, r3
 800645c:	480c      	ldr	r0, [pc, #48]	; (8006490 <MX_TIM3_Init+0xa0>)
 800645e:	f7fc fb9d 	bl	8002b9c <HAL_TIM_Encoder_Init>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8006468:	f7ff fd84 	bl	8005f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800646c:	2300      	movs	r3, #0
 800646e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4805      	ldr	r0, [pc, #20]	; (8006490 <MX_TIM3_Init+0xa0>)
 800647a:	f7fd f92b 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8006484:	f7ff fd76 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006488:	bf00      	nop
 800648a:	3730      	adds	r7, #48	; 0x30
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20000bc4 	.word	0x20000bc4
 8006494:	40000400 	.word	0x40000400

08006498 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800649e:	463b      	mov	r3, r7
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80064a6:	4b15      	ldr	r3, [pc, #84]	; (80064fc <MX_TIM6_Init+0x64>)
 80064a8:	4a15      	ldr	r2, [pc, #84]	; (8006500 <MX_TIM6_Init+0x68>)
 80064aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <MX_TIM6_Init+0x64>)
 80064ae:	2253      	movs	r2, #83	; 0x53
 80064b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <MX_TIM6_Init+0x64>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80064b8:	4b10      	ldr	r3, [pc, #64]	; (80064fc <MX_TIM6_Init+0x64>)
 80064ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80064be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064c0:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <MX_TIM6_Init+0x64>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80064c6:	480d      	ldr	r0, [pc, #52]	; (80064fc <MX_TIM6_Init+0x64>)
 80064c8:	f7fc f991 	bl	80027ee <HAL_TIM_Base_Init>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80064d2:	f7ff fd4f 	bl	8005f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80064d6:	2320      	movs	r3, #32
 80064d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80064de:	463b      	mov	r3, r7
 80064e0:	4619      	mov	r1, r3
 80064e2:	4806      	ldr	r0, [pc, #24]	; (80064fc <MX_TIM6_Init+0x64>)
 80064e4:	f7fd f8f6 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80064ee:	f7ff fd41 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000c0c 	.word	0x20000c0c
 8006500:	40001000 	.word	0x40001000

08006504 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08c      	sub	sp, #48	; 0x30
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800650c:	f107 031c 	add.w	r3, r7, #28
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	609a      	str	r2, [r3, #8]
 8006518:	60da      	str	r2, [r3, #12]
 800651a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a41      	ldr	r2, [pc, #260]	; (8006628 <HAL_TIM_Encoder_MspInit+0x124>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d12d      	bne.n	8006582 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006526:	2300      	movs	r3, #0
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	4b40      	ldr	r3, [pc, #256]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	4a3f      	ldr	r2, [pc, #252]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	6453      	str	r3, [r2, #68]	; 0x44
 8006536:	4b3d      	ldr	r3, [pc, #244]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	4b39      	ldr	r3, [pc, #228]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	4a38      	ldr	r2, [pc, #224]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 800654c:	f043 0310 	orr.w	r3, r3, #16
 8006550:	6313      	str	r3, [r2, #48]	; 0x30
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800655e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006564:	2302      	movs	r3, #2
 8006566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006568:	2300      	movs	r3, #0
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800656c:	2300      	movs	r3, #0
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006570:	2301      	movs	r3, #1
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006574:	f107 031c 	add.w	r3, r7, #28
 8006578:	4619      	mov	r1, r3
 800657a:	482d      	ldr	r0, [pc, #180]	; (8006630 <HAL_TIM_Encoder_MspInit+0x12c>)
 800657c:	f7fb fa90 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006580:	e04e      	b.n	8006620 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <HAL_TIM_Encoder_MspInit+0x130>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d149      	bne.n	8006620 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	4b26      	ldr	r3, [pc, #152]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	4a25      	ldr	r2, [pc, #148]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 8006596:	f043 0302 	orr.w	r3, r3, #2
 800659a:	6413      	str	r3, [r2, #64]	; 0x40
 800659c:	4b23      	ldr	r3, [pc, #140]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	4b1f      	ldr	r3, [pc, #124]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	4a1e      	ldr	r2, [pc, #120]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	6313      	str	r3, [r2, #48]	; 0x30
 80065b8:	4b1c      	ldr	r3, [pc, #112]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	4b18      	ldr	r3, [pc, #96]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	4a17      	ldr	r2, [pc, #92]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 80065ce:	f043 0304 	orr.w	r3, r3, #4
 80065d2:	6313      	str	r3, [r2, #48]	; 0x30
 80065d4:	4b15      	ldr	r3, [pc, #84]	; (800662c <HAL_TIM_Encoder_MspInit+0x128>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e4:	2302      	movs	r3, #2
 80065e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ec:	2300      	movs	r3, #0
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80065f0:	2302      	movs	r3, #2
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f4:	f107 031c 	add.w	r3, r7, #28
 80065f8:	4619      	mov	r1, r3
 80065fa:	480f      	ldr	r0, [pc, #60]	; (8006638 <HAL_TIM_Encoder_MspInit+0x134>)
 80065fc:	f7fb fa50 	bl	8001aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006600:	2380      	movs	r3, #128	; 0x80
 8006602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006604:	2302      	movs	r3, #2
 8006606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006608:	2300      	movs	r3, #0
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800660c:	2300      	movs	r3, #0
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006610:	2302      	movs	r3, #2
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006614:	f107 031c 	add.w	r3, r7, #28
 8006618:	4619      	mov	r1, r3
 800661a:	4808      	ldr	r0, [pc, #32]	; (800663c <HAL_TIM_Encoder_MspInit+0x138>)
 800661c:	f7fb fa40 	bl	8001aa0 <HAL_GPIO_Init>
}
 8006620:	bf00      	nop
 8006622:	3730      	adds	r7, #48	; 0x30
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40010000 	.word	0x40010000
 800662c:	40023800 	.word	0x40023800
 8006630:	40021000 	.word	0x40021000
 8006634:	40000400 	.word	0x40000400
 8006638:	40020000 	.word	0x40020000
 800663c:	40020800 	.word	0x40020800

08006640 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006650:	d10d      	bne.n	800666e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <HAL_TIM_PWM_MspInit+0x3c>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	4a08      	ldr	r2, [pc, #32]	; (800667c <HAL_TIM_PWM_MspInit+0x3c>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6413      	str	r3, [r2, #64]	; 0x40
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <HAL_TIM_PWM_MspInit+0x3c>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800

08006680 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a0e      	ldr	r2, [pc, #56]	; (80066c8 <HAL_TIM_Base_MspInit+0x48>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d115      	bne.n	80066be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <HAL_TIM_Base_MspInit+0x4c>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <HAL_TIM_Base_MspInit+0x4c>)
 800669c:	f043 0310 	orr.w	r3, r3, #16
 80066a0:	6413      	str	r3, [r2, #64]	; 0x40
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <HAL_TIM_Base_MspInit+0x4c>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f003 0310 	and.w	r3, r3, #16
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	2036      	movs	r0, #54	; 0x36
 80066b4:	f7fa fdbb 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80066b8:	2036      	movs	r0, #54	; 0x36
 80066ba:	f7fa fdd4 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40001000 	.word	0x40001000
 80066cc:	40023800 	.word	0x40023800

080066d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	; 0x28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d8:	f107 0314 	add.w	r3, r7, #20
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	609a      	str	r2, [r3, #8]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d13c      	bne.n	800676c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	4b1f      	ldr	r3, [pc, #124]	; (8006774 <HAL_TIM_MspPostInit+0xa4>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <HAL_TIM_MspPostInit+0xa4>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	6313      	str	r3, [r2, #48]	; 0x30
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <HAL_TIM_MspPostInit+0xa4>)
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	4b18      	ldr	r3, [pc, #96]	; (8006774 <HAL_TIM_MspPostInit+0xa4>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	4a17      	ldr	r2, [pc, #92]	; (8006774 <HAL_TIM_MspPostInit+0xa4>)
 8006718:	f043 0302 	orr.w	r3, r3, #2
 800671c:	6313      	str	r3, [r2, #48]	; 0x30
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <HAL_TIM_MspPostInit+0xa4>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M0_PWM_Pin;
 800672a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006730:	2302      	movs	r3, #2
 8006732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006738:	2300      	movs	r3, #0
 800673a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800673c:	2301      	movs	r3, #1
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M0_PWM_GPIO_Port, &GPIO_InitStruct);
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	4619      	mov	r1, r3
 8006746:	480c      	ldr	r0, [pc, #48]	; (8006778 <HAL_TIM_MspPostInit+0xa8>)
 8006748:	f7fb f9aa 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_Pin;
 800674c:	2308      	movs	r3, #8
 800674e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006750:	2302      	movs	r3, #2
 8006752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006758:	2300      	movs	r3, #0
 800675a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800675c:	2301      	movs	r3, #1
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	4619      	mov	r1, r3
 8006766:	4805      	ldr	r0, [pc, #20]	; (800677c <HAL_TIM_MspPostInit+0xac>)
 8006768:	f7fb f99a 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800676c:	bf00      	nop
 800676e:	3728      	adds	r7, #40	; 0x28
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40023800 	.word	0x40023800
 8006778:	40020000 	.word	0x40020000
 800677c:	40020400 	.word	0x40020400

08006780 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006784:	4b11      	ldr	r3, [pc, #68]	; (80067cc <MX_UART4_Init+0x4c>)
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <MX_UART4_Init+0x50>)
 8006788:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800678a:	4b10      	ldr	r3, [pc, #64]	; (80067cc <MX_UART4_Init+0x4c>)
 800678c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006790:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006792:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <MX_UART4_Init+0x4c>)
 8006794:	2200      	movs	r2, #0
 8006796:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <MX_UART4_Init+0x4c>)
 800679a:	2200      	movs	r2, #0
 800679c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <MX_UART4_Init+0x4c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80067a4:	4b09      	ldr	r3, [pc, #36]	; (80067cc <MX_UART4_Init+0x4c>)
 80067a6:	220c      	movs	r2, #12
 80067a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <MX_UART4_Init+0x4c>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <MX_UART4_Init+0x4c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80067b6:	4805      	ldr	r0, [pc, #20]	; (80067cc <MX_UART4_Init+0x4c>)
 80067b8:	f7fd f81c 	bl	80037f4 <HAL_UART_Init>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80067c2:	f7ff fbd7 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000c54 	.word	0x20000c54
 80067d0:	40004c00 	.word	0x40004c00

080067d4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067d8:	4b11      	ldr	r3, [pc, #68]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <MX_USART1_UART_Init+0x50>)
 80067dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 80067e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067e6:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067f2:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067f8:	4b09      	ldr	r3, [pc, #36]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 80067fa:	220c      	movs	r2, #12
 80067fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067fe:	4b08      	ldr	r3, [pc, #32]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 8006800:	2200      	movs	r2, #0
 8006802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006804:	4b06      	ldr	r3, [pc, #24]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 8006806:	2200      	movs	r2, #0
 8006808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800680a:	4805      	ldr	r0, [pc, #20]	; (8006820 <MX_USART1_UART_Init+0x4c>)
 800680c:	f7fc fff2 	bl	80037f4 <HAL_UART_Init>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006816:	f7ff fbad 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000c98 	.word	0x20000c98
 8006824:	40011000 	.word	0x40011000

08006828 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 800682e:	4a12      	ldr	r2, [pc, #72]	; (8006878 <MX_USART2_UART_Init+0x50>)
 8006830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 8006834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800683a:	4b0e      	ldr	r3, [pc, #56]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 800683c:	2200      	movs	r2, #0
 800683e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006840:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 8006842:	2200      	movs	r2, #0
 8006844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 8006848:	2200      	movs	r2, #0
 800684a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 800684e:	220c      	movs	r2, #12
 8006850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 8006854:	2200      	movs	r2, #0
 8006856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 800685a:	2200      	movs	r2, #0
 800685c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800685e:	4805      	ldr	r0, [pc, #20]	; (8006874 <MX_USART2_UART_Init+0x4c>)
 8006860:	f7fc ffc8 	bl	80037f4 <HAL_UART_Init>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800686a:	f7ff fb83 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000cdc 	.word	0x20000cdc
 8006878:	40004400 	.word	0x40004400

0800687c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08e      	sub	sp, #56	; 0x38
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	609a      	str	r2, [r3, #8]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7f      	ldr	r2, [pc, #508]	; (8006a98 <HAL_UART_MspInit+0x21c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d163      	bne.n	8006966 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	623b      	str	r3, [r7, #32]
 80068a2:	4b7e      	ldr	r3, [pc, #504]	; (8006a9c <HAL_UART_MspInit+0x220>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	4a7d      	ldr	r2, [pc, #500]	; (8006a9c <HAL_UART_MspInit+0x220>)
 80068a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ac:	6413      	str	r3, [r2, #64]	; 0x40
 80068ae:	4b7b      	ldr	r3, [pc, #492]	; (8006a9c <HAL_UART_MspInit+0x220>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	4b77      	ldr	r3, [pc, #476]	; (8006a9c <HAL_UART_MspInit+0x220>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	4a76      	ldr	r2, [pc, #472]	; (8006a9c <HAL_UART_MspInit+0x220>)
 80068c4:	f043 0304 	orr.w	r3, r3, #4
 80068c8:	6313      	str	r3, [r2, #48]	; 0x30
 80068ca:	4b74      	ldr	r3, [pc, #464]	; (8006a9c <HAL_UART_MspInit+0x220>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80068d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068dc:	2302      	movs	r3, #2
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e4:	2303      	movs	r3, #3
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80068e8:	2308      	movs	r3, #8
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f0:	4619      	mov	r1, r3
 80068f2:	486b      	ldr	r0, [pc, #428]	; (8006aa0 <HAL_UART_MspInit+0x224>)
 80068f4:	f7fb f8d4 	bl	8001aa0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80068f8:	4b6a      	ldr	r3, [pc, #424]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 80068fa:	4a6b      	ldr	r2, [pc, #428]	; (8006aa8 <HAL_UART_MspInit+0x22c>)
 80068fc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80068fe:	4b69      	ldr	r3, [pc, #420]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 8006900:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006904:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006906:	4b67      	ldr	r3, [pc, #412]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 8006908:	2200      	movs	r2, #0
 800690a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800690c:	4b65      	ldr	r3, [pc, #404]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 800690e:	2200      	movs	r2, #0
 8006910:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006912:	4b64      	ldr	r3, [pc, #400]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 8006914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006918:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800691a:	4b62      	ldr	r3, [pc, #392]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 800691c:	2200      	movs	r2, #0
 800691e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006920:	4b60      	ldr	r3, [pc, #384]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 8006922:	2200      	movs	r2, #0
 8006924:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006926:	4b5f      	ldr	r3, [pc, #380]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 8006928:	2200      	movs	r2, #0
 800692a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800692c:	4b5d      	ldr	r3, [pc, #372]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 800692e:	2200      	movs	r2, #0
 8006930:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006932:	4b5c      	ldr	r3, [pc, #368]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 8006934:	2200      	movs	r2, #0
 8006936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006938:	485a      	ldr	r0, [pc, #360]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 800693a:	f7fa fcaf 	bl	800129c <HAL_DMA_Init>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006944:	f7ff fb16 	bl	8005f74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a56      	ldr	r2, [pc, #344]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
 800694e:	4a55      	ldr	r2, [pc, #340]	; (8006aa4 <HAL_UART_MspInit+0x228>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006954:	2200      	movs	r2, #0
 8006956:	2100      	movs	r1, #0
 8006958:	2034      	movs	r0, #52	; 0x34
 800695a:	f7fa fc68 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800695e:	2034      	movs	r0, #52	; 0x34
 8006960:	f7fa fc81 	bl	8001266 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006964:	e115      	b.n	8006b92 <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a50      	ldr	r2, [pc, #320]	; (8006aac <HAL_UART_MspInit+0x230>)
 800696c:	4293      	cmp	r3, r2
 800696e:	f040 80a9 	bne.w	8006ac4 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	4b49      	ldr	r3, [pc, #292]	; (8006a9c <HAL_UART_MspInit+0x220>)
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	4a48      	ldr	r2, [pc, #288]	; (8006a9c <HAL_UART_MspInit+0x220>)
 800697c:	f043 0310 	orr.w	r3, r3, #16
 8006980:	6453      	str	r3, [r2, #68]	; 0x44
 8006982:	4b46      	ldr	r3, [pc, #280]	; (8006a9c <HAL_UART_MspInit+0x220>)
 8006984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	4b42      	ldr	r3, [pc, #264]	; (8006a9c <HAL_UART_MspInit+0x220>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	4a41      	ldr	r2, [pc, #260]	; (8006a9c <HAL_UART_MspInit+0x220>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6313      	str	r3, [r2, #48]	; 0x30
 800699e:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <HAL_UART_MspInit+0x220>)
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80069aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b0:	2302      	movs	r3, #2
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b8:	2303      	movs	r3, #3
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80069bc:	2307      	movs	r3, #7
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c4:	4619      	mov	r1, r3
 80069c6:	483a      	ldr	r0, [pc, #232]	; (8006ab0 <HAL_UART_MspInit+0x234>)
 80069c8:	f7fb f86a 	bl	8001aa0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80069cc:	4b39      	ldr	r3, [pc, #228]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069ce:	4a3a      	ldr	r2, [pc, #232]	; (8006ab8 <HAL_UART_MspInit+0x23c>)
 80069d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80069d2:	4b38      	ldr	r3, [pc, #224]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069da:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069dc:	2200      	movs	r2, #0
 80069de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069e0:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069e6:	4b33      	ldr	r3, [pc, #204]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069ee:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069f4:	4b2f      	ldr	r3, [pc, #188]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80069fa:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a00:	4b2c      	ldr	r3, [pc, #176]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a06:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006a0c:	4829      	ldr	r0, [pc, #164]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 8006a0e:	f7fa fc45 	bl	800129c <HAL_DMA_Init>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8006a18:	f7ff faac 	bl	8005f74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a25      	ldr	r2, [pc, #148]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
 8006a22:	4a24      	ldr	r2, [pc, #144]	; (8006ab4 <HAL_UART_MspInit+0x238>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006a28:	4b24      	ldr	r3, [pc, #144]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a2a:	4a25      	ldr	r2, [pc, #148]	; (8006ac0 <HAL_UART_MspInit+0x244>)
 8006a2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006a2e:	4b23      	ldr	r3, [pc, #140]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a34:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a36:	4b21      	ldr	r3, [pc, #132]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a38:	2240      	movs	r2, #64	; 0x40
 8006a3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a3c:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a42:	4b1e      	ldr	r3, [pc, #120]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a48:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a4a:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006a56:	4b19      	ldr	r3, [pc, #100]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006a5c:	4b17      	ldr	r3, [pc, #92]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a62:	4b16      	ldr	r3, [pc, #88]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006a68:	4814      	ldr	r0, [pc, #80]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a6a:	f7fa fc17 	bl	800129c <HAL_DMA_Init>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8006a74:	f7ff fa7e 	bl	8005f74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a10      	ldr	r2, [pc, #64]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8006a7e:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <HAL_UART_MspInit+0x240>)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006a84:	2200      	movs	r2, #0
 8006a86:	2100      	movs	r1, #0
 8006a88:	2025      	movs	r0, #37	; 0x25
 8006a8a:	f7fa fbd0 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006a8e:	2025      	movs	r0, #37	; 0x25
 8006a90:	f7fa fbe9 	bl	8001266 <HAL_NVIC_EnableIRQ>
}
 8006a94:	e07d      	b.n	8006b92 <HAL_UART_MspInit+0x316>
 8006a96:	bf00      	nop
 8006a98:	40004c00 	.word	0x40004c00
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	40020800 	.word	0x40020800
 8006aa4:	20000d20 	.word	0x20000d20
 8006aa8:	40026040 	.word	0x40026040
 8006aac:	40011000 	.word	0x40011000
 8006ab0:	40020000 	.word	0x40020000
 8006ab4:	20000d80 	.word	0x20000d80
 8006ab8:	40026440 	.word	0x40026440
 8006abc:	20000de0 	.word	0x20000de0
 8006ac0:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a34      	ldr	r2, [pc, #208]	; (8006b9c <HAL_UART_MspInit+0x320>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d161      	bne.n	8006b92 <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	4b33      	ldr	r3, [pc, #204]	; (8006ba0 <HAL_UART_MspInit+0x324>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	4a32      	ldr	r2, [pc, #200]	; (8006ba0 <HAL_UART_MspInit+0x324>)
 8006ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006adc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ade:	4b30      	ldr	r3, [pc, #192]	; (8006ba0 <HAL_UART_MspInit+0x324>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	4b2c      	ldr	r3, [pc, #176]	; (8006ba0 <HAL_UART_MspInit+0x324>)
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	4a2b      	ldr	r2, [pc, #172]	; (8006ba0 <HAL_UART_MspInit+0x324>)
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	6313      	str	r3, [r2, #48]	; 0x30
 8006afa:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <HAL_UART_MspInit+0x324>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006b06:	230c      	movs	r3, #12
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b12:	2303      	movs	r3, #3
 8006b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b16:	2307      	movs	r3, #7
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4820      	ldr	r0, [pc, #128]	; (8006ba4 <HAL_UART_MspInit+0x328>)
 8006b22:	f7fa ffbd 	bl	8001aa0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006b26:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b28:	4a20      	ldr	r2, [pc, #128]	; (8006bac <HAL_UART_MspInit+0x330>)
 8006b2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b32:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b34:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b40:	4b19      	ldr	r3, [pc, #100]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b46:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b48:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b4e:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006b54:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b60:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006b66:	4810      	ldr	r0, [pc, #64]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b68:	f7fa fb98 	bl	800129c <HAL_DMA_Init>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8006b72:	f7ff f9ff 	bl	8005f74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a0b      	ldr	r2, [pc, #44]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ba8 <HAL_UART_MspInit+0x32c>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006b82:	2200      	movs	r2, #0
 8006b84:	2100      	movs	r1, #0
 8006b86:	2026      	movs	r0, #38	; 0x26
 8006b88:	f7fa fb51 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006b8c:	2026      	movs	r0, #38	; 0x26
 8006b8e:	f7fa fb6a 	bl	8001266 <HAL_NVIC_EnableIRQ>
}
 8006b92:	bf00      	nop
 8006b94:	3738      	adds	r7, #56	; 0x38
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40004400 	.word	0x40004400
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	40020000 	.word	0x40020000
 8006ba8:	20000e40 	.word	0x20000e40
 8006bac:	40026088 	.word	0x40026088

08006bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006bb4:	480d      	ldr	r0, [pc, #52]	; (8006bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006bb6:	490e      	ldr	r1, [pc, #56]	; (8006bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006bb8:	4a0e      	ldr	r2, [pc, #56]	; (8006bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bbc:	e002      	b.n	8006bc4 <LoopCopyDataInit>

08006bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bc2:	3304      	adds	r3, #4

08006bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bc8:	d3f9      	bcc.n	8006bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bca:	4a0b      	ldr	r2, [pc, #44]	; (8006bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006bcc:	4c0b      	ldr	r4, [pc, #44]	; (8006bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8006bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bd0:	e001      	b.n	8006bd6 <LoopFillZerobss>

08006bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bd4:	3204      	adds	r2, #4

08006bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bd8:	d3fb      	bcc.n	8006bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006bda:	f7ff fb3b 	bl	8006254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bde:	f000 f817 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006be2:	f7fe fac7 	bl	8005174 <main>
  bx  lr    
 8006be6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006bf0:	200009d0 	.word	0x200009d0
  ldr r2, =_sidata
 8006bf4:	0800bac8 	.word	0x0800bac8
  ldr r2, =_sbss
 8006bf8:	200009d0 	.word	0x200009d0
  ldr r4, =_ebss
 8006bfc:	20000edc 	.word	0x20000edc

08006c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c00:	e7fe      	b.n	8006c00 <ADC_IRQHandler>
	...

08006c04 <__errno>:
 8006c04:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <__errno+0x8>)
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000024 	.word	0x20000024

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	; (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	; (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	; (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	; (8006c54 <__libc_init_array+0x44>)
 8006c24:	f004 fd38 	bl	800b698 <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	0800babc 	.word	0x0800babc
 8006c4c:	0800babc 	.word	0x0800babc
 8006c50:	0800babc 	.word	0x0800babc
 8006c54:	0800bac4 	.word	0x0800bac4

08006c58 <memcpy>:
 8006c58:	440a      	add	r2, r1
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c60:	d100      	bne.n	8006c64 <memcpy+0xc>
 8006c62:	4770      	bx	lr
 8006c64:	b510      	push	{r4, lr}
 8006c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	d1f9      	bne.n	8006c66 <memcpy+0xe>
 8006c72:	bd10      	pop	{r4, pc}

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <sprintf>:
 8006c84:	b40e      	push	{r1, r2, r3}
 8006c86:	b500      	push	{lr}
 8006c88:	b09c      	sub	sp, #112	; 0x70
 8006c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c8c:	9002      	str	r0, [sp, #8]
 8006c8e:	9006      	str	r0, [sp, #24]
 8006c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c94:	4809      	ldr	r0, [pc, #36]	; (8006cbc <sprintf+0x38>)
 8006c96:	9107      	str	r1, [sp, #28]
 8006c98:	9104      	str	r1, [sp, #16]
 8006c9a:	4909      	ldr	r1, [pc, #36]	; (8006cc0 <sprintf+0x3c>)
 8006c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca0:	9105      	str	r1, [sp, #20]
 8006ca2:	6800      	ldr	r0, [r0, #0]
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	a902      	add	r1, sp, #8
 8006ca8:	f000 f80e 	bl	8006cc8 <_svfprintf_r>
 8006cac:	9b02      	ldr	r3, [sp, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	b01c      	add	sp, #112	; 0x70
 8006cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb8:	b003      	add	sp, #12
 8006cba:	4770      	bx	lr
 8006cbc:	20000024 	.word	0x20000024
 8006cc0:	ffff0208 	.word	0xffff0208
 8006cc4:	00000000 	.word	0x00000000

08006cc8 <_svfprintf_r>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	ed2d 8b04 	vpush	{d8-d9}
 8006cd0:	b0cf      	sub	sp, #316	; 0x13c
 8006cd2:	4688      	mov	r8, r1
 8006cd4:	4691      	mov	r9, r2
 8006cd6:	461e      	mov	r6, r3
 8006cd8:	4682      	mov	sl, r0
 8006cda:	f002 f973 	bl	8008fc4 <_localeconv_r>
 8006cde:	6803      	ldr	r3, [r0, #0]
 8006ce0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7f9 fa74 	bl	80001d0 <strlen>
 8006ce8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006cec:	900d      	str	r0, [sp, #52]	; 0x34
 8006cee:	0618      	lsls	r0, r3, #24
 8006cf0:	d51a      	bpl.n	8006d28 <_svfprintf_r+0x60>
 8006cf2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006cf6:	b9bb      	cbnz	r3, 8006d28 <_svfprintf_r+0x60>
 8006cf8:	2140      	movs	r1, #64	; 0x40
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f002 f96a 	bl	8008fd4 <_malloc_r>
 8006d00:	f8c8 0000 	str.w	r0, [r8]
 8006d04:	f8c8 0010 	str.w	r0, [r8, #16]
 8006d08:	b958      	cbnz	r0, 8006d22 <_svfprintf_r+0x5a>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	f8ca 3000 	str.w	r3, [sl]
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	930c      	str	r3, [sp, #48]	; 0x30
 8006d16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d18:	b04f      	add	sp, #316	; 0x13c
 8006d1a:	ecbd 8b04 	vpop	{d8-d9}
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	f8c8 3014 	str.w	r3, [r8, #20]
 8006d28:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8006f78 <_svfprintf_r+0x2b0>
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8006d32:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006d36:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8006d3a:	ac25      	add	r4, sp, #148	; 0x94
 8006d3c:	9422      	str	r4, [sp, #136]	; 0x88
 8006d3e:	9505      	str	r5, [sp, #20]
 8006d40:	950a      	str	r5, [sp, #40]	; 0x28
 8006d42:	9512      	str	r5, [sp, #72]	; 0x48
 8006d44:	9514      	str	r5, [sp, #80]	; 0x50
 8006d46:	950c      	str	r5, [sp, #48]	; 0x30
 8006d48:	464b      	mov	r3, r9
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d50:	b10a      	cbz	r2, 8006d56 <_svfprintf_r+0x8e>
 8006d52:	2a25      	cmp	r2, #37	; 0x25
 8006d54:	d1f9      	bne.n	8006d4a <_svfprintf_r+0x82>
 8006d56:	ebb5 0709 	subs.w	r7, r5, r9
 8006d5a:	d00d      	beq.n	8006d78 <_svfprintf_r+0xb0>
 8006d5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d5e:	443b      	add	r3, r7
 8006d60:	9324      	str	r3, [sp, #144]	; 0x90
 8006d62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d64:	3301      	adds	r3, #1
 8006d66:	2b07      	cmp	r3, #7
 8006d68:	e9c4 9700 	strd	r9, r7, [r4]
 8006d6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8006d6e:	dc79      	bgt.n	8006e64 <_svfprintf_r+0x19c>
 8006d70:	3408      	adds	r4, #8
 8006d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d74:	443b      	add	r3, r7
 8006d76:	930c      	str	r3, [sp, #48]	; 0x30
 8006d78:	782b      	ldrb	r3, [r5, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f001 8148 	beq.w	8008010 <_svfprintf_r+0x1348>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f04f 32ff 	mov.w	r2, #4294967295
 8006d86:	9204      	str	r2, [sp, #16]
 8006d88:	3501      	adds	r5, #1
 8006d8a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8006d90:	469b      	mov	fp, r3
 8006d92:	270a      	movs	r7, #10
 8006d94:	222b      	movs	r2, #43	; 0x2b
 8006d96:	462b      	mov	r3, r5
 8006d98:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006d9c:	9106      	str	r1, [sp, #24]
 8006d9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006da0:	9b06      	ldr	r3, [sp, #24]
 8006da2:	3b20      	subs	r3, #32
 8006da4:	2b5a      	cmp	r3, #90	; 0x5a
 8006da6:	f200 85bf 	bhi.w	8007928 <_svfprintf_r+0xc60>
 8006daa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006dae:	007e      	.short	0x007e
 8006db0:	05bd05bd 	.word	0x05bd05bd
 8006db4:	05bd0086 	.word	0x05bd0086
 8006db8:	05bd05bd 	.word	0x05bd05bd
 8006dbc:	05bd0065 	.word	0x05bd0065
 8006dc0:	008905bd 	.word	0x008905bd
 8006dc4:	05bd0093 	.word	0x05bd0093
 8006dc8:	00960090 	.word	0x00960090
 8006dcc:	00b305bd 	.word	0x00b305bd
 8006dd0:	00b600b6 	.word	0x00b600b6
 8006dd4:	00b600b6 	.word	0x00b600b6
 8006dd8:	00b600b6 	.word	0x00b600b6
 8006ddc:	00b600b6 	.word	0x00b600b6
 8006de0:	05bd00b6 	.word	0x05bd00b6
 8006de4:	05bd05bd 	.word	0x05bd05bd
 8006de8:	05bd05bd 	.word	0x05bd05bd
 8006dec:	05bd05bd 	.word	0x05bd05bd
 8006df0:	05bd012c 	.word	0x05bd012c
 8006df4:	00fc00e9 	.word	0x00fc00e9
 8006df8:	012c012c 	.word	0x012c012c
 8006dfc:	05bd012c 	.word	0x05bd012c
 8006e00:	05bd05bd 	.word	0x05bd05bd
 8006e04:	00c605bd 	.word	0x00c605bd
 8006e08:	05bd05bd 	.word	0x05bd05bd
 8006e0c:	05bd0498 	.word	0x05bd0498
 8006e10:	05bd05bd 	.word	0x05bd05bd
 8006e14:	05bd04e2 	.word	0x05bd04e2
 8006e18:	05bd0503 	.word	0x05bd0503
 8006e1c:	052505bd 	.word	0x052505bd
 8006e20:	05bd05bd 	.word	0x05bd05bd
 8006e24:	05bd05bd 	.word	0x05bd05bd
 8006e28:	05bd05bd 	.word	0x05bd05bd
 8006e2c:	05bd05bd 	.word	0x05bd05bd
 8006e30:	05bd012c 	.word	0x05bd012c
 8006e34:	00fe00e9 	.word	0x00fe00e9
 8006e38:	012c012c 	.word	0x012c012c
 8006e3c:	00c9012c 	.word	0x00c9012c
 8006e40:	00dd00fe 	.word	0x00dd00fe
 8006e44:	00d605bd 	.word	0x00d605bd
 8006e48:	047305bd 	.word	0x047305bd
 8006e4c:	04d0049a 	.word	0x04d0049a
 8006e50:	05bd00dd 	.word	0x05bd00dd
 8006e54:	007c04e2 	.word	0x007c04e2
 8006e58:	05bd0505 	.word	0x05bd0505
 8006e5c:	054405bd 	.word	0x054405bd
 8006e60:	007c05bd 	.word	0x007c05bd
 8006e64:	aa22      	add	r2, sp, #136	; 0x88
 8006e66:	4641      	mov	r1, r8
 8006e68:	4650      	mov	r0, sl
 8006e6a:	f002 fe8c 	bl	8009b86 <__ssprint_r>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f040 8137 	bne.w	80070e2 <_svfprintf_r+0x41a>
 8006e74:	ac25      	add	r4, sp, #148	; 0x94
 8006e76:	e77c      	b.n	8006d72 <_svfprintf_r+0xaa>
 8006e78:	4650      	mov	r0, sl
 8006e7a:	f002 f8a3 	bl	8008fc4 <_localeconv_r>
 8006e7e:	6843      	ldr	r3, [r0, #4]
 8006e80:	9314      	str	r3, [sp, #80]	; 0x50
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7f9 f9a4 	bl	80001d0 <strlen>
 8006e88:	9012      	str	r0, [sp, #72]	; 0x48
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	f002 f89a 	bl	8008fc4 <_localeconv_r>
 8006e90:	6883      	ldr	r3, [r0, #8]
 8006e92:	930a      	str	r3, [sp, #40]	; 0x28
 8006e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e96:	222b      	movs	r2, #43	; 0x2b
 8006e98:	b12b      	cbz	r3, 8006ea6 <_svfprintf_r+0x1de>
 8006e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9c:	b11b      	cbz	r3, 8006ea6 <_svfprintf_r+0x1de>
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b10b      	cbz	r3, 8006ea6 <_svfprintf_r+0x1de>
 8006ea2:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8006ea6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ea8:	e775      	b.n	8006d96 <_svfprintf_r+0xce>
 8006eaa:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f9      	bne.n	8006ea6 <_svfprintf_r+0x1de>
 8006eb2:	2320      	movs	r3, #32
 8006eb4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006eb8:	e7f5      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006eba:	f04b 0b01 	orr.w	fp, fp, #1
 8006ebe:	e7f2      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006ec0:	f856 3b04 	ldr.w	r3, [r6], #4
 8006ec4:	9310      	str	r3, [sp, #64]	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	daed      	bge.n	8006ea6 <_svfprintf_r+0x1de>
 8006eca:	425b      	negs	r3, r3
 8006ecc:	9310      	str	r3, [sp, #64]	; 0x40
 8006ece:	f04b 0b04 	orr.w	fp, fp, #4
 8006ed2:	e7e8      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006ed4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006ed8:	e7e5      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006eda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006edc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ee0:	9306      	str	r3, [sp, #24]
 8006ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee4:	d113      	bne.n	8006f0e <_svfprintf_r+0x246>
 8006ee6:	f856 0b04 	ldr.w	r0, [r6], #4
 8006eea:	950b      	str	r5, [sp, #44]	; 0x2c
 8006eec:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006ef0:	9304      	str	r3, [sp, #16]
 8006ef2:	e7d8      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006ef4:	9904      	ldr	r1, [sp, #16]
 8006ef6:	fb07 3301 	mla	r3, r7, r1, r3
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f00:	9306      	str	r3, [sp, #24]
 8006f02:	9b06      	ldr	r3, [sp, #24]
 8006f04:	3b30      	subs	r3, #48	; 0x30
 8006f06:	2b09      	cmp	r3, #9
 8006f08:	d9f4      	bls.n	8006ef4 <_svfprintf_r+0x22c>
 8006f0a:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f0c:	e748      	b.n	8006da0 <_svfprintf_r+0xd8>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	e7f6      	b.n	8006f02 <_svfprintf_r+0x23a>
 8006f14:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006f18:	e7c5      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f1e:	9310      	str	r3, [sp, #64]	; 0x40
 8006f20:	9b06      	ldr	r3, [sp, #24]
 8006f22:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006f24:	3b30      	subs	r3, #48	; 0x30
 8006f26:	fb07 3301 	mla	r3, r7, r1, r3
 8006f2a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f30:	9306      	str	r3, [sp, #24]
 8006f32:	3b30      	subs	r3, #48	; 0x30
 8006f34:	2b09      	cmp	r3, #9
 8006f36:	d9f3      	bls.n	8006f20 <_svfprintf_r+0x258>
 8006f38:	e7e7      	b.n	8006f0a <_svfprintf_r+0x242>
 8006f3a:	f04b 0b08 	orr.w	fp, fp, #8
 8006f3e:	e7b2      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b68      	cmp	r3, #104	; 0x68
 8006f46:	bf01      	itttt	eq
 8006f48:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8006f4a:	3301      	addeq	r3, #1
 8006f4c:	930b      	streq	r3, [sp, #44]	; 0x2c
 8006f4e:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8006f52:	bf18      	it	ne
 8006f54:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8006f58:	e7a5      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b6c      	cmp	r3, #108	; 0x6c
 8006f60:	d105      	bne.n	8006f6e <_svfprintf_r+0x2a6>
 8006f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f64:	3301      	adds	r3, #1
 8006f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f68:	f04b 0b20 	orr.w	fp, fp, #32
 8006f6c:	e79b      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006f6e:	f04b 0b10 	orr.w	fp, fp, #16
 8006f72:	e798      	b.n	8006ea6 <_svfprintf_r+0x1de>
 8006f74:	f3af 8000 	nop.w
	...
 8006f80:	4632      	mov	r2, r6
 8006f82:	2000      	movs	r0, #0
 8006f84:	f852 3b04 	ldr.w	r3, [r2], #4
 8006f88:	9207      	str	r2, [sp, #28]
 8006f8a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006f8e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006f92:	2301      	movs	r3, #1
 8006f94:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8006f98:	9003      	str	r0, [sp, #12]
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8006fa4:	e1bc      	b.n	8007320 <_svfprintf_r+0x658>
 8006fa6:	f04b 0b10 	orr.w	fp, fp, #16
 8006faa:	f01b 0f20 	tst.w	fp, #32
 8006fae:	d012      	beq.n	8006fd6 <_svfprintf_r+0x30e>
 8006fb0:	1df3      	adds	r3, r6, #7
 8006fb2:	f023 0307 	bic.w	r3, r3, #7
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	685d      	ldr	r5, [r3, #4]
 8006fba:	f852 6b08 	ldr.w	r6, [r2], #8
 8006fbe:	9207      	str	r2, [sp, #28]
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	da06      	bge.n	8006fd2 <_svfprintf_r+0x30a>
 8006fc4:	4276      	negs	r6, r6
 8006fc6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006fca:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006fce:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e396      	b.n	8007704 <_svfprintf_r+0xa3c>
 8006fd6:	4633      	mov	r3, r6
 8006fd8:	f01b 0f10 	tst.w	fp, #16
 8006fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	d002      	beq.n	8006fea <_svfprintf_r+0x322>
 8006fe4:	462e      	mov	r6, r5
 8006fe6:	17ed      	asrs	r5, r5, #31
 8006fe8:	e7ea      	b.n	8006fc0 <_svfprintf_r+0x2f8>
 8006fea:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006fee:	d003      	beq.n	8006ff8 <_svfprintf_r+0x330>
 8006ff0:	b22e      	sxth	r6, r5
 8006ff2:	f345 35c0 	sbfx	r5, r5, #15, #1
 8006ff6:	e7e3      	b.n	8006fc0 <_svfprintf_r+0x2f8>
 8006ff8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006ffc:	d0f2      	beq.n	8006fe4 <_svfprintf_r+0x31c>
 8006ffe:	b26e      	sxtb	r6, r5
 8007000:	f345 15c0 	sbfx	r5, r5, #7, #1
 8007004:	e7dc      	b.n	8006fc0 <_svfprintf_r+0x2f8>
 8007006:	3607      	adds	r6, #7
 8007008:	f026 0307 	bic.w	r3, r6, #7
 800700c:	ecb3 7b02 	vldmia	r3!, {d7}
 8007010:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007014:	9307      	str	r3, [sp, #28]
 8007016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007018:	ee09 3a10 	vmov	s18, r3
 800701c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800701e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007022:	ee09 3a90 	vmov	s19, r3
 8007026:	f04f 32ff 	mov.w	r2, #4294967295
 800702a:	4b3a      	ldr	r3, [pc, #232]	; (8007114 <_svfprintf_r+0x44c>)
 800702c:	ec51 0b19 	vmov	r0, r1, d9
 8007030:	f7f9 fd7c 	bl	8000b2c <__aeabi_dcmpun>
 8007034:	bb10      	cbnz	r0, 800707c <_svfprintf_r+0x3b4>
 8007036:	4b37      	ldr	r3, [pc, #220]	; (8007114 <_svfprintf_r+0x44c>)
 8007038:	ec51 0b19 	vmov	r0, r1, d9
 800703c:	f04f 32ff 	mov.w	r2, #4294967295
 8007040:	f7f9 fd56 	bl	8000af0 <__aeabi_dcmple>
 8007044:	b9d0      	cbnz	r0, 800707c <_svfprintf_r+0x3b4>
 8007046:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800704a:	2200      	movs	r2, #0
 800704c:	2300      	movs	r3, #0
 800704e:	f7f9 fd45 	bl	8000adc <__aeabi_dcmplt>
 8007052:	b110      	cbz	r0, 800705a <_svfprintf_r+0x392>
 8007054:	232d      	movs	r3, #45	; 0x2d
 8007056:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800705a:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <_svfprintf_r+0x450>)
 800705c:	482f      	ldr	r0, [pc, #188]	; (800711c <_svfprintf_r+0x454>)
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	2100      	movs	r1, #0
 8007062:	2b47      	cmp	r3, #71	; 0x47
 8007064:	bfd4      	ite	le
 8007066:	4691      	movle	r9, r2
 8007068:	4681      	movgt	r9, r0
 800706a:	2303      	movs	r3, #3
 800706c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8007070:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8007074:	2600      	movs	r6, #0
 8007076:	4633      	mov	r3, r6
 8007078:	f001 b800 	b.w	800807c <_svfprintf_r+0x13b4>
 800707c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007080:	4610      	mov	r0, r2
 8007082:	4619      	mov	r1, r3
 8007084:	f7f9 fd52 	bl	8000b2c <__aeabi_dcmpun>
 8007088:	b140      	cbz	r0, 800709c <_svfprintf_r+0x3d4>
 800708a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800708c:	4a24      	ldr	r2, [pc, #144]	; (8007120 <_svfprintf_r+0x458>)
 800708e:	4825      	ldr	r0, [pc, #148]	; (8007124 <_svfprintf_r+0x45c>)
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfbc      	itt	lt
 8007094:	232d      	movlt	r3, #45	; 0x2d
 8007096:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800709a:	e7e0      	b.n	800705e <_svfprintf_r+0x396>
 800709c:	9b06      	ldr	r3, [sp, #24]
 800709e:	f023 0320 	bic.w	r3, r3, #32
 80070a2:	2b41      	cmp	r3, #65	; 0x41
 80070a4:	9308      	str	r3, [sp, #32]
 80070a6:	d125      	bne.n	80070f4 <_svfprintf_r+0x42c>
 80070a8:	2330      	movs	r3, #48	; 0x30
 80070aa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	2b61      	cmp	r3, #97	; 0x61
 80070b2:	bf0c      	ite	eq
 80070b4:	2378      	moveq	r3, #120	; 0x78
 80070b6:	2358      	movne	r3, #88	; 0x58
 80070b8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	2b63      	cmp	r3, #99	; 0x63
 80070c0:	f04b 0b02 	orr.w	fp, fp, #2
 80070c4:	dd30      	ble.n	8007128 <_svfprintf_r+0x460>
 80070c6:	1c59      	adds	r1, r3, #1
 80070c8:	4650      	mov	r0, sl
 80070ca:	f001 ff83 	bl	8008fd4 <_malloc_r>
 80070ce:	4681      	mov	r9, r0
 80070d0:	2800      	cmp	r0, #0
 80070d2:	f040 81fd 	bne.w	80074d0 <_svfprintf_r+0x808>
 80070d6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80070da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070de:	f8a8 300c 	strh.w	r3, [r8, #12]
 80070e2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80070e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ec:	bf18      	it	ne
 80070ee:	f04f 33ff 	movne.w	r3, #4294967295
 80070f2:	e60f      	b.n	8006d14 <_svfprintf_r+0x4c>
 80070f4:	9b04      	ldr	r3, [sp, #16]
 80070f6:	3301      	adds	r3, #1
 80070f8:	f000 81ec 	beq.w	80074d4 <_svfprintf_r+0x80c>
 80070fc:	9b08      	ldr	r3, [sp, #32]
 80070fe:	2b47      	cmp	r3, #71	; 0x47
 8007100:	f040 81eb 	bne.w	80074da <_svfprintf_r+0x812>
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f040 81e7 	bne.w	80074da <_svfprintf_r+0x812>
 800710c:	9303      	str	r3, [sp, #12]
 800710e:	2301      	movs	r3, #1
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	e00c      	b.n	800712e <_svfprintf_r+0x466>
 8007114:	7fefffff 	.word	0x7fefffff
 8007118:	0800b724 	.word	0x0800b724
 800711c:	0800b728 	.word	0x0800b728
 8007120:	0800b72c 	.word	0x0800b72c
 8007124:	0800b730 	.word	0x0800b730
 8007128:	9003      	str	r0, [sp, #12]
 800712a:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800712e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8007132:	9311      	str	r3, [sp, #68]	; 0x44
 8007134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007136:	2b00      	cmp	r3, #0
 8007138:	f280 81d1 	bge.w	80074de <_svfprintf_r+0x816>
 800713c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800713e:	ee08 3a10 	vmov	s16, r3
 8007142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007144:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007148:	ee08 3a90 	vmov	s17, r3
 800714c:	232d      	movs	r3, #45	; 0x2d
 800714e:	9318      	str	r3, [sp, #96]	; 0x60
 8007150:	9b08      	ldr	r3, [sp, #32]
 8007152:	2b41      	cmp	r3, #65	; 0x41
 8007154:	f040 81e1 	bne.w	800751a <_svfprintf_r+0x852>
 8007158:	eeb0 0a48 	vmov.f32	s0, s16
 800715c:	eef0 0a68 	vmov.f32	s1, s17
 8007160:	a81c      	add	r0, sp, #112	; 0x70
 8007162:	f002 fcb5 	bl	8009ad0 <frexp>
 8007166:	2200      	movs	r2, #0
 8007168:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800716c:	ec51 0b10 	vmov	r0, r1, d0
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	2200      	movs	r2, #0
 8007176:	2300      	movs	r3, #0
 8007178:	4606      	mov	r6, r0
 800717a:	460f      	mov	r7, r1
 800717c:	f7f9 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007180:	b108      	cbz	r0, 8007186 <_svfprintf_r+0x4be>
 8007182:	2301      	movs	r3, #1
 8007184:	931c      	str	r3, [sp, #112]	; 0x70
 8007186:	4ba7      	ldr	r3, [pc, #668]	; (8007424 <_svfprintf_r+0x75c>)
 8007188:	4aa7      	ldr	r2, [pc, #668]	; (8007428 <_svfprintf_r+0x760>)
 800718a:	9906      	ldr	r1, [sp, #24]
 800718c:	2961      	cmp	r1, #97	; 0x61
 800718e:	bf18      	it	ne
 8007190:	461a      	movne	r2, r3
 8007192:	9b04      	ldr	r3, [sp, #16]
 8007194:	9217      	str	r2, [sp, #92]	; 0x5c
 8007196:	3b01      	subs	r3, #1
 8007198:	9305      	str	r3, [sp, #20]
 800719a:	464d      	mov	r5, r9
 800719c:	4ba3      	ldr	r3, [pc, #652]	; (800742c <_svfprintf_r+0x764>)
 800719e:	2200      	movs	r2, #0
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 fa28 	bl	80005f8 <__aeabi_dmul>
 80071a8:	460f      	mov	r7, r1
 80071aa:	4606      	mov	r6, r0
 80071ac:	f7f9 fcd4 	bl	8000b58 <__aeabi_d2iz>
 80071b0:	9019      	str	r0, [sp, #100]	; 0x64
 80071b2:	f7f9 f9b7 	bl	8000524 <__aeabi_i2d>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4630      	mov	r0, r6
 80071bc:	4639      	mov	r1, r7
 80071be:	f7f9 f863 	bl	8000288 <__aeabi_dsub>
 80071c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071c6:	5c9b      	ldrb	r3, [r3, r2]
 80071c8:	f805 3b01 	strb.w	r3, [r5], #1
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	9309      	str	r3, [sp, #36]	; 0x24
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	d007      	beq.n	80071e8 <_svfprintf_r+0x520>
 80071d8:	3b01      	subs	r3, #1
 80071da:	9305      	str	r3, [sp, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	f7f9 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d0d9      	beq.n	800719c <_svfprintf_r+0x4d4>
 80071e8:	4b91      	ldr	r3, [pc, #580]	; (8007430 <_svfprintf_r+0x768>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 fc92 	bl	8000b18 <__aeabi_dcmpgt>
 80071f4:	b960      	cbnz	r0, 8007210 <_svfprintf_r+0x548>
 80071f6:	4b8e      	ldr	r3, [pc, #568]	; (8007430 <_svfprintf_r+0x768>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	f7f9 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007202:	2800      	cmp	r0, #0
 8007204:	f000 8184 	beq.w	8007510 <_svfprintf_r+0x848>
 8007208:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800720a:	07db      	lsls	r3, r3, #31
 800720c:	f140 8180 	bpl.w	8007510 <_svfprintf_r+0x848>
 8007210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007212:	9520      	str	r5, [sp, #128]	; 0x80
 8007214:	7bd9      	ldrb	r1, [r3, #15]
 8007216:	2030      	movs	r0, #48	; 0x30
 8007218:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800721a:	1e53      	subs	r3, r2, #1
 800721c:	9320      	str	r3, [sp, #128]	; 0x80
 800721e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8007222:	428b      	cmp	r3, r1
 8007224:	f000 8163 	beq.w	80074ee <_svfprintf_r+0x826>
 8007228:	2b39      	cmp	r3, #57	; 0x39
 800722a:	bf0b      	itete	eq
 800722c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800722e:	3301      	addne	r3, #1
 8007230:	7a9b      	ldrbeq	r3, [r3, #10]
 8007232:	b2db      	uxtbne	r3, r3
 8007234:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007238:	eba5 0309 	sub.w	r3, r5, r9
 800723c:	9305      	str	r3, [sp, #20]
 800723e:	9b08      	ldr	r3, [sp, #32]
 8007240:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007242:	2b47      	cmp	r3, #71	; 0x47
 8007244:	f040 81b1 	bne.w	80075aa <_svfprintf_r+0x8e2>
 8007248:	1cef      	adds	r7, r5, #3
 800724a:	db03      	blt.n	8007254 <_svfprintf_r+0x58c>
 800724c:	9b04      	ldr	r3, [sp, #16]
 800724e:	42ab      	cmp	r3, r5
 8007250:	f280 81d6 	bge.w	8007600 <_svfprintf_r+0x938>
 8007254:	9b06      	ldr	r3, [sp, #24]
 8007256:	3b02      	subs	r3, #2
 8007258:	9306      	str	r3, [sp, #24]
 800725a:	9906      	ldr	r1, [sp, #24]
 800725c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8007260:	f021 0120 	bic.w	r1, r1, #32
 8007264:	2941      	cmp	r1, #65	; 0x41
 8007266:	bf08      	it	eq
 8007268:	320f      	addeq	r2, #15
 800726a:	f105 33ff 	add.w	r3, r5, #4294967295
 800726e:	bf06      	itte	eq
 8007270:	b2d2      	uxtbeq	r2, r2
 8007272:	2101      	moveq	r1, #1
 8007274:	2100      	movne	r1, #0
 8007276:	2b00      	cmp	r3, #0
 8007278:	931c      	str	r3, [sp, #112]	; 0x70
 800727a:	bfb8      	it	lt
 800727c:	f1c5 0301 	rsblt	r3, r5, #1
 8007280:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007284:	bfb4      	ite	lt
 8007286:	222d      	movlt	r2, #45	; 0x2d
 8007288:	222b      	movge	r2, #43	; 0x2b
 800728a:	2b09      	cmp	r3, #9
 800728c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8007290:	f340 81a4 	ble.w	80075dc <_svfprintf_r+0x914>
 8007294:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8007298:	260a      	movs	r6, #10
 800729a:	4611      	mov	r1, r2
 800729c:	fb93 f5f6 	sdiv	r5, r3, r6
 80072a0:	fb06 3015 	mls	r0, r6, r5, r3
 80072a4:	3030      	adds	r0, #48	; 0x30
 80072a6:	f801 0c01 	strb.w	r0, [r1, #-1]
 80072aa:	4618      	mov	r0, r3
 80072ac:	2863      	cmp	r0, #99	; 0x63
 80072ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80072b2:	462b      	mov	r3, r5
 80072b4:	dcf1      	bgt.n	800729a <_svfprintf_r+0x5d2>
 80072b6:	3330      	adds	r3, #48	; 0x30
 80072b8:	1e88      	subs	r0, r1, #2
 80072ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072be:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80072c2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80072c6:	4603      	mov	r3, r0
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	f0c0 8182 	bcc.w	80075d2 <_svfprintf_r+0x90a>
 80072ce:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80072d2:	1a52      	subs	r2, r2, r1
 80072d4:	42a8      	cmp	r0, r5
 80072d6:	bf88      	it	hi
 80072d8:	2200      	movhi	r2, #0
 80072da:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80072de:	441a      	add	r2, r3
 80072e0:	ab1e      	add	r3, sp, #120	; 0x78
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	9a05      	ldr	r2, [sp, #20]
 80072e6:	9315      	str	r3, [sp, #84]	; 0x54
 80072e8:	2a01      	cmp	r2, #1
 80072ea:	4413      	add	r3, r2
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	dc02      	bgt.n	80072f6 <_svfprintf_r+0x62e>
 80072f0:	f01b 0f01 	tst.w	fp, #1
 80072f4:	d003      	beq.n	80072fe <_svfprintf_r+0x636>
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072fa:	4413      	add	r3, r2
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8007302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007306:	9311      	str	r3, [sp, #68]	; 0x44
 8007308:	2300      	movs	r3, #0
 800730a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800730e:	461d      	mov	r5, r3
 8007310:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007312:	b113      	cbz	r3, 800731a <_svfprintf_r+0x652>
 8007314:	232d      	movs	r3, #45	; 0x2d
 8007316:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800731a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800731e:	2600      	movs	r6, #0
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	42b3      	cmp	r3, r6
 8007324:	bfb8      	it	lt
 8007326:	4633      	movlt	r3, r6
 8007328:	9311      	str	r3, [sp, #68]	; 0x44
 800732a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800732e:	b113      	cbz	r3, 8007336 <_svfprintf_r+0x66e>
 8007330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007332:	3301      	adds	r3, #1
 8007334:	9311      	str	r3, [sp, #68]	; 0x44
 8007336:	f01b 0302 	ands.w	r3, fp, #2
 800733a:	9317      	str	r3, [sp, #92]	; 0x5c
 800733c:	bf1e      	ittt	ne
 800733e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8007340:	3302      	addne	r3, #2
 8007342:	9311      	strne	r3, [sp, #68]	; 0x44
 8007344:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8007348:	9318      	str	r3, [sp, #96]	; 0x60
 800734a:	d11f      	bne.n	800738c <_svfprintf_r+0x6c4>
 800734c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007350:	1a9f      	subs	r7, r3, r2
 8007352:	2f00      	cmp	r7, #0
 8007354:	dd1a      	ble.n	800738c <_svfprintf_r+0x6c4>
 8007356:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800735a:	4836      	ldr	r0, [pc, #216]	; (8007434 <_svfprintf_r+0x76c>)
 800735c:	6020      	str	r0, [r4, #0]
 800735e:	2f10      	cmp	r7, #16
 8007360:	f103 0301 	add.w	r3, r3, #1
 8007364:	f104 0108 	add.w	r1, r4, #8
 8007368:	f300 82ed 	bgt.w	8007946 <_svfprintf_r+0xc7e>
 800736c:	6067      	str	r7, [r4, #4]
 800736e:	2b07      	cmp	r3, #7
 8007370:	4417      	add	r7, r2
 8007372:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8007376:	f340 82f9 	ble.w	800796c <_svfprintf_r+0xca4>
 800737a:	aa22      	add	r2, sp, #136	; 0x88
 800737c:	4641      	mov	r1, r8
 800737e:	4650      	mov	r0, sl
 8007380:	f002 fc01 	bl	8009b86 <__ssprint_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	f040 8621 	bne.w	8007fcc <_svfprintf_r+0x1304>
 800738a:	ac25      	add	r4, sp, #148	; 0x94
 800738c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8007390:	b173      	cbz	r3, 80073b0 <_svfprintf_r+0x6e8>
 8007392:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	2301      	movs	r3, #1
 800739a:	6063      	str	r3, [r4, #4]
 800739c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800739e:	3301      	adds	r3, #1
 80073a0:	9324      	str	r3, [sp, #144]	; 0x90
 80073a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073a4:	3301      	adds	r3, #1
 80073a6:	2b07      	cmp	r3, #7
 80073a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80073aa:	f300 82e1 	bgt.w	8007970 <_svfprintf_r+0xca8>
 80073ae:	3408      	adds	r4, #8
 80073b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073b2:	b16b      	cbz	r3, 80073d0 <_svfprintf_r+0x708>
 80073b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	2302      	movs	r3, #2
 80073ba:	6063      	str	r3, [r4, #4]
 80073bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80073be:	3302      	adds	r3, #2
 80073c0:	9324      	str	r3, [sp, #144]	; 0x90
 80073c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073c4:	3301      	adds	r3, #1
 80073c6:	2b07      	cmp	r3, #7
 80073c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80073ca:	f300 82db 	bgt.w	8007984 <_svfprintf_r+0xcbc>
 80073ce:	3408      	adds	r4, #8
 80073d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d11f      	bne.n	8007416 <_svfprintf_r+0x74e>
 80073d6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80073da:	1a9f      	subs	r7, r3, r2
 80073dc:	2f00      	cmp	r7, #0
 80073de:	dd1a      	ble.n	8007416 <_svfprintf_r+0x74e>
 80073e0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80073e4:	4814      	ldr	r0, [pc, #80]	; (8007438 <_svfprintf_r+0x770>)
 80073e6:	6020      	str	r0, [r4, #0]
 80073e8:	2f10      	cmp	r7, #16
 80073ea:	f103 0301 	add.w	r3, r3, #1
 80073ee:	f104 0108 	add.w	r1, r4, #8
 80073f2:	f300 82d1 	bgt.w	8007998 <_svfprintf_r+0xcd0>
 80073f6:	6067      	str	r7, [r4, #4]
 80073f8:	2b07      	cmp	r3, #7
 80073fa:	4417      	add	r7, r2
 80073fc:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8007400:	f340 82dd 	ble.w	80079be <_svfprintf_r+0xcf6>
 8007404:	aa22      	add	r2, sp, #136	; 0x88
 8007406:	4641      	mov	r1, r8
 8007408:	4650      	mov	r0, sl
 800740a:	f002 fbbc 	bl	8009b86 <__ssprint_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	f040 85dc 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007414:	ac25      	add	r4, sp, #148	; 0x94
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	1af6      	subs	r6, r6, r3
 800741a:	2e00      	cmp	r6, #0
 800741c:	dd28      	ble.n	8007470 <_svfprintf_r+0x7a8>
 800741e:	4f06      	ldr	r7, [pc, #24]	; (8007438 <_svfprintf_r+0x770>)
 8007420:	e00c      	b.n	800743c <_svfprintf_r+0x774>
 8007422:	bf00      	nop
 8007424:	0800b745 	.word	0x0800b745
 8007428:	0800b734 	.word	0x0800b734
 800742c:	40300000 	.word	0x40300000
 8007430:	3fe00000 	.word	0x3fe00000
 8007434:	0800b758 	.word	0x0800b758
 8007438:	0800b768 	.word	0x0800b768
 800743c:	6027      	str	r7, [r4, #0]
 800743e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007442:	2e10      	cmp	r6, #16
 8007444:	f103 0301 	add.w	r3, r3, #1
 8007448:	f104 0108 	add.w	r1, r4, #8
 800744c:	f300 82b9 	bgt.w	80079c2 <_svfprintf_r+0xcfa>
 8007450:	6066      	str	r6, [r4, #4]
 8007452:	2b07      	cmp	r3, #7
 8007454:	4416      	add	r6, r2
 8007456:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800745a:	f340 82c5 	ble.w	80079e8 <_svfprintf_r+0xd20>
 800745e:	aa22      	add	r2, sp, #136	; 0x88
 8007460:	4641      	mov	r1, r8
 8007462:	4650      	mov	r0, sl
 8007464:	f002 fb8f 	bl	8009b86 <__ssprint_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	f040 85af 	bne.w	8007fcc <_svfprintf_r+0x1304>
 800746e:	ac25      	add	r4, sp, #148	; 0x94
 8007470:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007474:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007476:	f040 82bd 	bne.w	80079f4 <_svfprintf_r+0xd2c>
 800747a:	9b04      	ldr	r3, [sp, #16]
 800747c:	f8c4 9000 	str.w	r9, [r4]
 8007480:	441e      	add	r6, r3
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	9624      	str	r6, [sp, #144]	; 0x90
 8007486:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007488:	3301      	adds	r3, #1
 800748a:	2b07      	cmp	r3, #7
 800748c:	9323      	str	r3, [sp, #140]	; 0x8c
 800748e:	f300 82f6 	bgt.w	8007a7e <_svfprintf_r+0xdb6>
 8007492:	3408      	adds	r4, #8
 8007494:	f01b 0f04 	tst.w	fp, #4
 8007498:	f040 857a 	bne.w	8007f90 <_svfprintf_r+0x12c8>
 800749c:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 80074a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074a2:	428a      	cmp	r2, r1
 80074a4:	bfac      	ite	ge
 80074a6:	189b      	addge	r3, r3, r2
 80074a8:	185b      	addlt	r3, r3, r1
 80074aa:	930c      	str	r3, [sp, #48]	; 0x30
 80074ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80074ae:	b13b      	cbz	r3, 80074c0 <_svfprintf_r+0x7f8>
 80074b0:	aa22      	add	r2, sp, #136	; 0x88
 80074b2:	4641      	mov	r1, r8
 80074b4:	4650      	mov	r0, sl
 80074b6:	f002 fb66 	bl	8009b86 <__ssprint_r>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f040 8586 	bne.w	8007fcc <_svfprintf_r+0x1304>
 80074c0:	2300      	movs	r3, #0
 80074c2:	9323      	str	r3, [sp, #140]	; 0x8c
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f040 859c 	bne.w	8008004 <_svfprintf_r+0x133c>
 80074cc:	ac25      	add	r4, sp, #148	; 0x94
 80074ce:	e0ec      	b.n	80076aa <_svfprintf_r+0x9e2>
 80074d0:	9003      	str	r0, [sp, #12]
 80074d2:	e62c      	b.n	800712e <_svfprintf_r+0x466>
 80074d4:	9003      	str	r0, [sp, #12]
 80074d6:	2306      	movs	r3, #6
 80074d8:	e61a      	b.n	8007110 <_svfprintf_r+0x448>
 80074da:	9003      	str	r0, [sp, #12]
 80074dc:	e627      	b.n	800712e <_svfprintf_r+0x466>
 80074de:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80074e2:	2300      	movs	r3, #0
 80074e4:	eeb0 8a47 	vmov.f32	s16, s14
 80074e8:	eef0 8a67 	vmov.f32	s17, s15
 80074ec:	e62f      	b.n	800714e <_svfprintf_r+0x486>
 80074ee:	f802 0c01 	strb.w	r0, [r2, #-1]
 80074f2:	e691      	b.n	8007218 <_svfprintf_r+0x550>
 80074f4:	f803 0b01 	strb.w	r0, [r3], #1
 80074f8:	1aca      	subs	r2, r1, r3
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	dafa      	bge.n	80074f4 <_svfprintf_r+0x82c>
 80074fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007502:	3201      	adds	r2, #1
 8007504:	f103 0301 	add.w	r3, r3, #1
 8007508:	bfb8      	it	lt
 800750a:	2300      	movlt	r3, #0
 800750c:	441d      	add	r5, r3
 800750e:	e693      	b.n	8007238 <_svfprintf_r+0x570>
 8007510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007512:	462b      	mov	r3, r5
 8007514:	18a9      	adds	r1, r5, r2
 8007516:	2030      	movs	r0, #48	; 0x30
 8007518:	e7ee      	b.n	80074f8 <_svfprintf_r+0x830>
 800751a:	9b08      	ldr	r3, [sp, #32]
 800751c:	2b46      	cmp	r3, #70	; 0x46
 800751e:	d005      	beq.n	800752c <_svfprintf_r+0x864>
 8007520:	2b45      	cmp	r3, #69	; 0x45
 8007522:	d11b      	bne.n	800755c <_svfprintf_r+0x894>
 8007524:	9b04      	ldr	r3, [sp, #16]
 8007526:	1c5d      	adds	r5, r3, #1
 8007528:	2102      	movs	r1, #2
 800752a:	e001      	b.n	8007530 <_svfprintf_r+0x868>
 800752c:	9d04      	ldr	r5, [sp, #16]
 800752e:	2103      	movs	r1, #3
 8007530:	ab20      	add	r3, sp, #128	; 0x80
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	ab1d      	add	r3, sp, #116	; 0x74
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	462a      	mov	r2, r5
 800753a:	ab1c      	add	r3, sp, #112	; 0x70
 800753c:	4650      	mov	r0, sl
 800753e:	eeb0 0a48 	vmov.f32	s0, s16
 8007542:	eef0 0a68 	vmov.f32	s1, s17
 8007546:	f000 fe3f 	bl	80081c8 <_dtoa_r>
 800754a:	9b08      	ldr	r3, [sp, #32]
 800754c:	2b47      	cmp	r3, #71	; 0x47
 800754e:	4681      	mov	r9, r0
 8007550:	d106      	bne.n	8007560 <_svfprintf_r+0x898>
 8007552:	f01b 0f01 	tst.w	fp, #1
 8007556:	d103      	bne.n	8007560 <_svfprintf_r+0x898>
 8007558:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800755a:	e66d      	b.n	8007238 <_svfprintf_r+0x570>
 800755c:	9d04      	ldr	r5, [sp, #16]
 800755e:	e7e3      	b.n	8007528 <_svfprintf_r+0x860>
 8007560:	9b08      	ldr	r3, [sp, #32]
 8007562:	2b46      	cmp	r3, #70	; 0x46
 8007564:	eb09 0605 	add.w	r6, r9, r5
 8007568:	d10f      	bne.n	800758a <_svfprintf_r+0x8c2>
 800756a:	f899 3000 	ldrb.w	r3, [r9]
 800756e:	2b30      	cmp	r3, #48	; 0x30
 8007570:	d109      	bne.n	8007586 <_svfprintf_r+0x8be>
 8007572:	ec51 0b18 	vmov	r0, r1, d8
 8007576:	2200      	movs	r2, #0
 8007578:	2300      	movs	r3, #0
 800757a:	f7f9 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800757e:	b910      	cbnz	r0, 8007586 <_svfprintf_r+0x8be>
 8007580:	f1c5 0501 	rsb	r5, r5, #1
 8007584:	951c      	str	r5, [sp, #112]	; 0x70
 8007586:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007588:	441e      	add	r6, r3
 800758a:	ec51 0b18 	vmov	r0, r1, d8
 800758e:	2200      	movs	r2, #0
 8007590:	2300      	movs	r3, #0
 8007592:	f7f9 fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8007596:	b100      	cbz	r0, 800759a <_svfprintf_r+0x8d2>
 8007598:	9620      	str	r6, [sp, #128]	; 0x80
 800759a:	2230      	movs	r2, #48	; 0x30
 800759c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800759e:	429e      	cmp	r6, r3
 80075a0:	d9da      	bls.n	8007558 <_svfprintf_r+0x890>
 80075a2:	1c59      	adds	r1, r3, #1
 80075a4:	9120      	str	r1, [sp, #128]	; 0x80
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e7f8      	b.n	800759c <_svfprintf_r+0x8d4>
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	2b46      	cmp	r3, #70	; 0x46
 80075ae:	f47f ae54 	bne.w	800725a <_svfprintf_r+0x592>
 80075b2:	9a04      	ldr	r2, [sp, #16]
 80075b4:	f00b 0301 	and.w	r3, fp, #1
 80075b8:	2d00      	cmp	r5, #0
 80075ba:	ea43 0302 	orr.w	r3, r3, r2
 80075be:	dd1a      	ble.n	80075f6 <_svfprintf_r+0x92e>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d034      	beq.n	800762e <_svfprintf_r+0x966>
 80075c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c6:	18eb      	adds	r3, r5, r3
 80075c8:	441a      	add	r2, r3
 80075ca:	9204      	str	r2, [sp, #16]
 80075cc:	2366      	movs	r3, #102	; 0x66
 80075ce:	9306      	str	r3, [sp, #24]
 80075d0:	e033      	b.n	800763a <_svfprintf_r+0x972>
 80075d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075d6:	f802 6b01 	strb.w	r6, [r2], #1
 80075da:	e675      	b.n	80072c8 <_svfprintf_r+0x600>
 80075dc:	b941      	cbnz	r1, 80075f0 <_svfprintf_r+0x928>
 80075de:	2230      	movs	r2, #48	; 0x30
 80075e0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80075e4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80075e8:	3330      	adds	r3, #48	; 0x30
 80075ea:	f802 3b01 	strb.w	r3, [r2], #1
 80075ee:	e677      	b.n	80072e0 <_svfprintf_r+0x618>
 80075f0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80075f4:	e7f8      	b.n	80075e8 <_svfprintf_r+0x920>
 80075f6:	b1e3      	cbz	r3, 8007632 <_svfprintf_r+0x96a>
 80075f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075fa:	9a04      	ldr	r2, [sp, #16]
 80075fc:	3301      	adds	r3, #1
 80075fe:	e7e3      	b.n	80075c8 <_svfprintf_r+0x900>
 8007600:	9b05      	ldr	r3, [sp, #20]
 8007602:	429d      	cmp	r5, r3
 8007604:	db07      	blt.n	8007616 <_svfprintf_r+0x94e>
 8007606:	f01b 0f01 	tst.w	fp, #1
 800760a:	d02d      	beq.n	8007668 <_svfprintf_r+0x9a0>
 800760c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800760e:	18eb      	adds	r3, r5, r3
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	2367      	movs	r3, #103	; 0x67
 8007614:	e7db      	b.n	80075ce <_svfprintf_r+0x906>
 8007616:	9b05      	ldr	r3, [sp, #20]
 8007618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800761a:	2d00      	cmp	r5, #0
 800761c:	4413      	add	r3, r2
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	dcf7      	bgt.n	8007612 <_svfprintf_r+0x94a>
 8007622:	9a04      	ldr	r2, [sp, #16]
 8007624:	f1c5 0301 	rsb	r3, r5, #1
 8007628:	441a      	add	r2, r3
 800762a:	9204      	str	r2, [sp, #16]
 800762c:	e7f1      	b.n	8007612 <_svfprintf_r+0x94a>
 800762e:	9504      	str	r5, [sp, #16]
 8007630:	e7cc      	b.n	80075cc <_svfprintf_r+0x904>
 8007632:	2366      	movs	r3, #102	; 0x66
 8007634:	9306      	str	r3, [sp, #24]
 8007636:	2301      	movs	r3, #1
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800763e:	9309      	str	r3, [sp, #36]	; 0x24
 8007640:	d025      	beq.n	800768e <_svfprintf_r+0x9c6>
 8007642:	2300      	movs	r3, #0
 8007644:	2d00      	cmp	r5, #0
 8007646:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800764a:	f77f ae61 	ble.w	8007310 <_svfprintf_r+0x648>
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2bff      	cmp	r3, #255	; 0xff
 8007654:	d10a      	bne.n	800766c <_svfprintf_r+0x9a4>
 8007656:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800765a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800765c:	4413      	add	r3, r2
 800765e:	9a04      	ldr	r2, [sp, #16]
 8007660:	fb01 2303 	mla	r3, r1, r3, r2
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	e653      	b.n	8007310 <_svfprintf_r+0x648>
 8007668:	9504      	str	r5, [sp, #16]
 800766a:	e7d2      	b.n	8007612 <_svfprintf_r+0x94a>
 800766c:	42ab      	cmp	r3, r5
 800766e:	daf2      	bge.n	8007656 <_svfprintf_r+0x98e>
 8007670:	1aed      	subs	r5, r5, r3
 8007672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	b133      	cbz	r3, 8007686 <_svfprintf_r+0x9be>
 8007678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767a:	3301      	adds	r3, #1
 800767c:	9309      	str	r3, [sp, #36]	; 0x24
 800767e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007680:	3301      	adds	r3, #1
 8007682:	930a      	str	r3, [sp, #40]	; 0x28
 8007684:	e7e3      	b.n	800764e <_svfprintf_r+0x986>
 8007686:	9b08      	ldr	r3, [sp, #32]
 8007688:	3301      	adds	r3, #1
 800768a:	9308      	str	r3, [sp, #32]
 800768c:	e7df      	b.n	800764e <_svfprintf_r+0x986>
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	9308      	str	r3, [sp, #32]
 8007692:	e63d      	b.n	8007310 <_svfprintf_r+0x648>
 8007694:	1d33      	adds	r3, r6, #4
 8007696:	f01b 0f20 	tst.w	fp, #32
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	d00a      	beq.n	80076b4 <_svfprintf_r+0x9ec>
 800769e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076a0:	6833      	ldr	r3, [r6, #0]
 80076a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076a4:	17d2      	asrs	r2, r2, #31
 80076a6:	e9c3 1200 	strd	r1, r2, [r3]
 80076aa:	9e07      	ldr	r6, [sp, #28]
 80076ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80076b0:	f7ff bb4a 	b.w	8006d48 <_svfprintf_r+0x80>
 80076b4:	f01b 0f10 	tst.w	fp, #16
 80076b8:	d003      	beq.n	80076c2 <_svfprintf_r+0x9fa>
 80076ba:	6833      	ldr	r3, [r6, #0]
 80076bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e7f3      	b.n	80076aa <_svfprintf_r+0x9e2>
 80076c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80076c6:	d003      	beq.n	80076d0 <_svfprintf_r+0xa08>
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	e7ec      	b.n	80076aa <_svfprintf_r+0x9e2>
 80076d0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80076d4:	d0f1      	beq.n	80076ba <_svfprintf_r+0x9f2>
 80076d6:	6833      	ldr	r3, [r6, #0]
 80076d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076da:	701a      	strb	r2, [r3, #0]
 80076dc:	e7e5      	b.n	80076aa <_svfprintf_r+0x9e2>
 80076de:	f04b 0b10 	orr.w	fp, fp, #16
 80076e2:	f01b 0320 	ands.w	r3, fp, #32
 80076e6:	d01f      	beq.n	8007728 <_svfprintf_r+0xa60>
 80076e8:	1df3      	adds	r3, r6, #7
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	461a      	mov	r2, r3
 80076f0:	685d      	ldr	r5, [r3, #4]
 80076f2:	f852 6b08 	ldr.w	r6, [r2], #8
 80076f6:	9207      	str	r2, [sp, #28]
 80076f8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80076fc:	2300      	movs	r3, #0
 80076fe:	2200      	movs	r2, #0
 8007700:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8007704:	9a04      	ldr	r2, [sp, #16]
 8007706:	3201      	adds	r2, #1
 8007708:	f000 848d 	beq.w	8008026 <_svfprintf_r+0x135e>
 800770c:	ea56 0205 	orrs.w	r2, r6, r5
 8007710:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8007714:	f040 848c 	bne.w	8008030 <_svfprintf_r+0x1368>
 8007718:	9a04      	ldr	r2, [sp, #16]
 800771a:	2a00      	cmp	r2, #0
 800771c:	f000 80f9 	beq.w	8007912 <_svfprintf_r+0xc4a>
 8007720:	2b01      	cmp	r3, #1
 8007722:	f040 8488 	bne.w	8008036 <_svfprintf_r+0x136e>
 8007726:	e09f      	b.n	8007868 <_svfprintf_r+0xba0>
 8007728:	4632      	mov	r2, r6
 800772a:	f01b 0510 	ands.w	r5, fp, #16
 800772e:	f852 6b04 	ldr.w	r6, [r2], #4
 8007732:	9207      	str	r2, [sp, #28]
 8007734:	d001      	beq.n	800773a <_svfprintf_r+0xa72>
 8007736:	461d      	mov	r5, r3
 8007738:	e7de      	b.n	80076f8 <_svfprintf_r+0xa30>
 800773a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800773e:	d001      	beq.n	8007744 <_svfprintf_r+0xa7c>
 8007740:	b2b6      	uxth	r6, r6
 8007742:	e7d9      	b.n	80076f8 <_svfprintf_r+0xa30>
 8007744:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8007748:	d0d6      	beq.n	80076f8 <_svfprintf_r+0xa30>
 800774a:	b2f6      	uxtb	r6, r6
 800774c:	e7f3      	b.n	8007736 <_svfprintf_r+0xa6e>
 800774e:	4633      	mov	r3, r6
 8007750:	2278      	movs	r2, #120	; 0x78
 8007752:	f853 6b04 	ldr.w	r6, [r3], #4
 8007756:	9307      	str	r3, [sp, #28]
 8007758:	2330      	movs	r3, #48	; 0x30
 800775a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800775e:	4ba3      	ldr	r3, [pc, #652]	; (80079ec <_svfprintf_r+0xd24>)
 8007760:	9316      	str	r3, [sp, #88]	; 0x58
 8007762:	2500      	movs	r5, #0
 8007764:	f04b 0b02 	orr.w	fp, fp, #2
 8007768:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800776c:	2302      	movs	r3, #2
 800776e:	9206      	str	r2, [sp, #24]
 8007770:	e7c5      	b.n	80076fe <_svfprintf_r+0xa36>
 8007772:	4633      	mov	r3, r6
 8007774:	2500      	movs	r5, #0
 8007776:	f853 9b04 	ldr.w	r9, [r3], #4
 800777a:	9307      	str	r3, [sp, #28]
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8007782:	1c58      	adds	r0, r3, #1
 8007784:	d010      	beq.n	80077a8 <_svfprintf_r+0xae0>
 8007786:	461a      	mov	r2, r3
 8007788:	4629      	mov	r1, r5
 800778a:	4648      	mov	r0, r9
 800778c:	f7f8 fd28 	bl	80001e0 <memchr>
 8007790:	9003      	str	r0, [sp, #12]
 8007792:	2800      	cmp	r0, #0
 8007794:	f000 80d4 	beq.w	8007940 <_svfprintf_r+0xc78>
 8007798:	eba0 0309 	sub.w	r3, r0, r9
 800779c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80077a0:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80077a4:	462e      	mov	r6, r5
 80077a6:	e5bb      	b.n	8007320 <_svfprintf_r+0x658>
 80077a8:	4648      	mov	r0, r9
 80077aa:	f7f8 fd11 	bl	80001d0 <strlen>
 80077ae:	e9cd 5003 	strd	r5, r0, [sp, #12]
 80077b2:	e45f      	b.n	8007074 <_svfprintf_r+0x3ac>
 80077b4:	f04b 0b10 	orr.w	fp, fp, #16
 80077b8:	f01b 0320 	ands.w	r3, fp, #32
 80077bc:	d009      	beq.n	80077d2 <_svfprintf_r+0xb0a>
 80077be:	1df3      	adds	r3, r6, #7
 80077c0:	f023 0307 	bic.w	r3, r3, #7
 80077c4:	461a      	mov	r2, r3
 80077c6:	685d      	ldr	r5, [r3, #4]
 80077c8:	f852 6b08 	ldr.w	r6, [r2], #8
 80077cc:	9207      	str	r2, [sp, #28]
 80077ce:	2301      	movs	r3, #1
 80077d0:	e795      	b.n	80076fe <_svfprintf_r+0xa36>
 80077d2:	4632      	mov	r2, r6
 80077d4:	f01b 0510 	ands.w	r5, fp, #16
 80077d8:	f852 6b04 	ldr.w	r6, [r2], #4
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	d001      	beq.n	80077e4 <_svfprintf_r+0xb1c>
 80077e0:	461d      	mov	r5, r3
 80077e2:	e7f4      	b.n	80077ce <_svfprintf_r+0xb06>
 80077e4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80077e8:	d001      	beq.n	80077ee <_svfprintf_r+0xb26>
 80077ea:	b2b6      	uxth	r6, r6
 80077ec:	e7ef      	b.n	80077ce <_svfprintf_r+0xb06>
 80077ee:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80077f2:	d0ec      	beq.n	80077ce <_svfprintf_r+0xb06>
 80077f4:	b2f6      	uxtb	r6, r6
 80077f6:	e7f3      	b.n	80077e0 <_svfprintf_r+0xb18>
 80077f8:	4b7d      	ldr	r3, [pc, #500]	; (80079f0 <_svfprintf_r+0xd28>)
 80077fa:	9316      	str	r3, [sp, #88]	; 0x58
 80077fc:	f01b 0320 	ands.w	r3, fp, #32
 8007800:	d01b      	beq.n	800783a <_svfprintf_r+0xb72>
 8007802:	1df3      	adds	r3, r6, #7
 8007804:	f023 0307 	bic.w	r3, r3, #7
 8007808:	461a      	mov	r2, r3
 800780a:	685d      	ldr	r5, [r3, #4]
 800780c:	f852 6b08 	ldr.w	r6, [r2], #8
 8007810:	9207      	str	r2, [sp, #28]
 8007812:	f01b 0f01 	tst.w	fp, #1
 8007816:	d00a      	beq.n	800782e <_svfprintf_r+0xb66>
 8007818:	ea56 0305 	orrs.w	r3, r6, r5
 800781c:	d007      	beq.n	800782e <_svfprintf_r+0xb66>
 800781e:	2330      	movs	r3, #48	; 0x30
 8007820:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8007824:	9b06      	ldr	r3, [sp, #24]
 8007826:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800782a:	f04b 0b02 	orr.w	fp, fp, #2
 800782e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007832:	2302      	movs	r3, #2
 8007834:	e763      	b.n	80076fe <_svfprintf_r+0xa36>
 8007836:	4b6d      	ldr	r3, [pc, #436]	; (80079ec <_svfprintf_r+0xd24>)
 8007838:	e7df      	b.n	80077fa <_svfprintf_r+0xb32>
 800783a:	4632      	mov	r2, r6
 800783c:	f01b 0510 	ands.w	r5, fp, #16
 8007840:	f852 6b04 	ldr.w	r6, [r2], #4
 8007844:	9207      	str	r2, [sp, #28]
 8007846:	d001      	beq.n	800784c <_svfprintf_r+0xb84>
 8007848:	461d      	mov	r5, r3
 800784a:	e7e2      	b.n	8007812 <_svfprintf_r+0xb4a>
 800784c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007850:	d001      	beq.n	8007856 <_svfprintf_r+0xb8e>
 8007852:	b2b6      	uxth	r6, r6
 8007854:	e7dd      	b.n	8007812 <_svfprintf_r+0xb4a>
 8007856:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800785a:	d0da      	beq.n	8007812 <_svfprintf_r+0xb4a>
 800785c:	b2f6      	uxtb	r6, r6
 800785e:	e7f3      	b.n	8007848 <_svfprintf_r+0xb80>
 8007860:	2e0a      	cmp	r6, #10
 8007862:	f175 0300 	sbcs.w	r3, r5, #0
 8007866:	d205      	bcs.n	8007874 <_svfprintf_r+0xbac>
 8007868:	3630      	adds	r6, #48	; 0x30
 800786a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800786e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8007872:	e3fb      	b.n	800806c <_svfprintf_r+0x13a4>
 8007874:	2300      	movs	r3, #0
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800787c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8007880:	9303      	str	r3, [sp, #12]
 8007882:	220a      	movs	r2, #10
 8007884:	2300      	movs	r3, #0
 8007886:	4630      	mov	r0, r6
 8007888:	4629      	mov	r1, r5
 800788a:	f7f9 f9dd 	bl	8000c48 <__aeabi_uldivmod>
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	3301      	adds	r3, #1
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	3230      	adds	r2, #48	; 0x30
 8007898:	f10b 39ff 	add.w	r9, fp, #4294967295
 800789c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80078a0:	b1d3      	cbz	r3, 80078d8 <_svfprintf_r+0xc10>
 80078a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a4:	9a05      	ldr	r2, [sp, #20]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d115      	bne.n	80078d8 <_svfprintf_r+0xc10>
 80078ac:	2aff      	cmp	r2, #255	; 0xff
 80078ae:	d013      	beq.n	80078d8 <_svfprintf_r+0xc10>
 80078b0:	2e0a      	cmp	r6, #10
 80078b2:	f175 0300 	sbcs.w	r3, r5, #0
 80078b6:	d30f      	bcc.n	80078d8 <_svfprintf_r+0xc10>
 80078b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 80078bc:	eba9 0903 	sub.w	r9, r9, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	4648      	mov	r0, r9
 80078c4:	f002 f94c 	bl	8009b60 <strncpy>
 80078c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	b11b      	cbz	r3, 80078d6 <_svfprintf_r+0xc0e>
 80078ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d0:	3301      	adds	r3, #1
 80078d2:	930a      	str	r3, [sp, #40]	; 0x28
 80078d4:	2300      	movs	r3, #0
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	2300      	movs	r3, #0
 80078da:	220a      	movs	r2, #10
 80078dc:	4630      	mov	r0, r6
 80078de:	4629      	mov	r1, r5
 80078e0:	f7f9 f9b2 	bl	8000c48 <__aeabi_uldivmod>
 80078e4:	2e0a      	cmp	r6, #10
 80078e6:	f175 0300 	sbcs.w	r3, r5, #0
 80078ea:	f0c0 83bf 	bcc.w	800806c <_svfprintf_r+0x13a4>
 80078ee:	4606      	mov	r6, r0
 80078f0:	460d      	mov	r5, r1
 80078f2:	46cb      	mov	fp, r9
 80078f4:	e7c5      	b.n	8007882 <_svfprintf_r+0xbba>
 80078f6:	f006 030f 	and.w	r3, r6, #15
 80078fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078fc:	0936      	lsrs	r6, r6, #4
 80078fe:	5cd3      	ldrb	r3, [r2, r3]
 8007900:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007904:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8007908:	092d      	lsrs	r5, r5, #4
 800790a:	ea56 0305 	orrs.w	r3, r6, r5
 800790e:	d1f2      	bne.n	80078f6 <_svfprintf_r+0xc2e>
 8007910:	e3ac      	b.n	800806c <_svfprintf_r+0x13a4>
 8007912:	b933      	cbnz	r3, 8007922 <_svfprintf_r+0xc5a>
 8007914:	f01b 0f01 	tst.w	fp, #1
 8007918:	d003      	beq.n	8007922 <_svfprintf_r+0xc5a>
 800791a:	2330      	movs	r3, #48	; 0x30
 800791c:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8007920:	e7a5      	b.n	800786e <_svfprintf_r+0xba6>
 8007922:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8007926:	e3a1      	b.n	800806c <_svfprintf_r+0x13a4>
 8007928:	9b06      	ldr	r3, [sp, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8370 	beq.w	8008010 <_svfprintf_r+0x1348>
 8007930:	2000      	movs	r0, #0
 8007932:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8007936:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800793a:	9607      	str	r6, [sp, #28]
 800793c:	f7ff bb29 	b.w	8006f92 <_svfprintf_r+0x2ca>
 8007940:	9e03      	ldr	r6, [sp, #12]
 8007942:	f7ff bb98 	b.w	8007076 <_svfprintf_r+0x3ae>
 8007946:	2010      	movs	r0, #16
 8007948:	4402      	add	r2, r0
 800794a:	2b07      	cmp	r3, #7
 800794c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007950:	6060      	str	r0, [r4, #4]
 8007952:	dd08      	ble.n	8007966 <_svfprintf_r+0xc9e>
 8007954:	aa22      	add	r2, sp, #136	; 0x88
 8007956:	4641      	mov	r1, r8
 8007958:	4650      	mov	r0, sl
 800795a:	f002 f914 	bl	8009b86 <__ssprint_r>
 800795e:	2800      	cmp	r0, #0
 8007960:	f040 8334 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007964:	a925      	add	r1, sp, #148	; 0x94
 8007966:	3f10      	subs	r7, #16
 8007968:	460c      	mov	r4, r1
 800796a:	e4f4      	b.n	8007356 <_svfprintf_r+0x68e>
 800796c:	460c      	mov	r4, r1
 800796e:	e50d      	b.n	800738c <_svfprintf_r+0x6c4>
 8007970:	aa22      	add	r2, sp, #136	; 0x88
 8007972:	4641      	mov	r1, r8
 8007974:	4650      	mov	r0, sl
 8007976:	f002 f906 	bl	8009b86 <__ssprint_r>
 800797a:	2800      	cmp	r0, #0
 800797c:	f040 8326 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007980:	ac25      	add	r4, sp, #148	; 0x94
 8007982:	e515      	b.n	80073b0 <_svfprintf_r+0x6e8>
 8007984:	aa22      	add	r2, sp, #136	; 0x88
 8007986:	4641      	mov	r1, r8
 8007988:	4650      	mov	r0, sl
 800798a:	f002 f8fc 	bl	8009b86 <__ssprint_r>
 800798e:	2800      	cmp	r0, #0
 8007990:	f040 831c 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007994:	ac25      	add	r4, sp, #148	; 0x94
 8007996:	e51b      	b.n	80073d0 <_svfprintf_r+0x708>
 8007998:	2010      	movs	r0, #16
 800799a:	4402      	add	r2, r0
 800799c:	2b07      	cmp	r3, #7
 800799e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80079a2:	6060      	str	r0, [r4, #4]
 80079a4:	dd08      	ble.n	80079b8 <_svfprintf_r+0xcf0>
 80079a6:	aa22      	add	r2, sp, #136	; 0x88
 80079a8:	4641      	mov	r1, r8
 80079aa:	4650      	mov	r0, sl
 80079ac:	f002 f8eb 	bl	8009b86 <__ssprint_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f040 830b 	bne.w	8007fcc <_svfprintf_r+0x1304>
 80079b6:	a925      	add	r1, sp, #148	; 0x94
 80079b8:	3f10      	subs	r7, #16
 80079ba:	460c      	mov	r4, r1
 80079bc:	e510      	b.n	80073e0 <_svfprintf_r+0x718>
 80079be:	460c      	mov	r4, r1
 80079c0:	e529      	b.n	8007416 <_svfprintf_r+0x74e>
 80079c2:	2010      	movs	r0, #16
 80079c4:	4402      	add	r2, r0
 80079c6:	2b07      	cmp	r3, #7
 80079c8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80079cc:	6060      	str	r0, [r4, #4]
 80079ce:	dd08      	ble.n	80079e2 <_svfprintf_r+0xd1a>
 80079d0:	aa22      	add	r2, sp, #136	; 0x88
 80079d2:	4641      	mov	r1, r8
 80079d4:	4650      	mov	r0, sl
 80079d6:	f002 f8d6 	bl	8009b86 <__ssprint_r>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f040 82f6 	bne.w	8007fcc <_svfprintf_r+0x1304>
 80079e0:	a925      	add	r1, sp, #148	; 0x94
 80079e2:	3e10      	subs	r6, #16
 80079e4:	460c      	mov	r4, r1
 80079e6:	e529      	b.n	800743c <_svfprintf_r+0x774>
 80079e8:	460c      	mov	r4, r1
 80079ea:	e541      	b.n	8007470 <_svfprintf_r+0x7a8>
 80079ec:	0800b734 	.word	0x0800b734
 80079f0:	0800b745 	.word	0x0800b745
 80079f4:	9b06      	ldr	r3, [sp, #24]
 80079f6:	2b65      	cmp	r3, #101	; 0x65
 80079f8:	f340 8230 	ble.w	8007e5c <_svfprintf_r+0x1194>
 80079fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007a00:	2200      	movs	r2, #0
 8007a02:	2300      	movs	r3, #0
 8007a04:	f7f9 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d068      	beq.n	8007ade <_svfprintf_r+0xe16>
 8007a0c:	4b6d      	ldr	r3, [pc, #436]	; (8007bc4 <_svfprintf_r+0xefc>)
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	2301      	movs	r3, #1
 8007a12:	441e      	add	r6, r3
 8007a14:	6063      	str	r3, [r4, #4]
 8007a16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a18:	9624      	str	r6, [sp, #144]	; 0x90
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	2b07      	cmp	r3, #7
 8007a1e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007a20:	dc37      	bgt.n	8007a92 <_svfprintf_r+0xdca>
 8007a22:	3408      	adds	r4, #8
 8007a24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007a26:	9a05      	ldr	r2, [sp, #20]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	db03      	blt.n	8007a34 <_svfprintf_r+0xd6c>
 8007a2c:	f01b 0f01 	tst.w	fp, #1
 8007a30:	f43f ad30 	beq.w	8007494 <_svfprintf_r+0x7cc>
 8007a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a3c:	6063      	str	r3, [r4, #4]
 8007a3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a40:	4413      	add	r3, r2
 8007a42:	9324      	str	r3, [sp, #144]	; 0x90
 8007a44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a46:	3301      	adds	r3, #1
 8007a48:	2b07      	cmp	r3, #7
 8007a4a:	9323      	str	r3, [sp, #140]	; 0x8c
 8007a4c:	dc2b      	bgt.n	8007aa6 <_svfprintf_r+0xdde>
 8007a4e:	3408      	adds	r4, #8
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	1e5d      	subs	r5, r3, #1
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	f77f ad1d 	ble.w	8007494 <_svfprintf_r+0x7cc>
 8007a5a:	4e5b      	ldr	r6, [pc, #364]	; (8007bc8 <_svfprintf_r+0xf00>)
 8007a5c:	2710      	movs	r7, #16
 8007a5e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007a62:	2d10      	cmp	r5, #16
 8007a64:	f103 0301 	add.w	r3, r3, #1
 8007a68:	f104 0108 	add.w	r1, r4, #8
 8007a6c:	6026      	str	r6, [r4, #0]
 8007a6e:	dc24      	bgt.n	8007aba <_svfprintf_r+0xdf2>
 8007a70:	6065      	str	r5, [r4, #4]
 8007a72:	2b07      	cmp	r3, #7
 8007a74:	4415      	add	r5, r2
 8007a76:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007a7a:	f340 8286 	ble.w	8007f8a <_svfprintf_r+0x12c2>
 8007a7e:	aa22      	add	r2, sp, #136	; 0x88
 8007a80:	4641      	mov	r1, r8
 8007a82:	4650      	mov	r0, sl
 8007a84:	f002 f87f 	bl	8009b86 <__ssprint_r>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	f040 829f 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007a8e:	ac25      	add	r4, sp, #148	; 0x94
 8007a90:	e500      	b.n	8007494 <_svfprintf_r+0x7cc>
 8007a92:	aa22      	add	r2, sp, #136	; 0x88
 8007a94:	4641      	mov	r1, r8
 8007a96:	4650      	mov	r0, sl
 8007a98:	f002 f875 	bl	8009b86 <__ssprint_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f040 8295 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007aa2:	ac25      	add	r4, sp, #148	; 0x94
 8007aa4:	e7be      	b.n	8007a24 <_svfprintf_r+0xd5c>
 8007aa6:	aa22      	add	r2, sp, #136	; 0x88
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	4650      	mov	r0, sl
 8007aac:	f002 f86b 	bl	8009b86 <__ssprint_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	f040 828b 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007ab6:	ac25      	add	r4, sp, #148	; 0x94
 8007ab8:	e7ca      	b.n	8007a50 <_svfprintf_r+0xd88>
 8007aba:	3210      	adds	r2, #16
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007ac2:	6067      	str	r7, [r4, #4]
 8007ac4:	dd08      	ble.n	8007ad8 <_svfprintf_r+0xe10>
 8007ac6:	aa22      	add	r2, sp, #136	; 0x88
 8007ac8:	4641      	mov	r1, r8
 8007aca:	4650      	mov	r0, sl
 8007acc:	f002 f85b 	bl	8009b86 <__ssprint_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f040 827b 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007ad6:	a925      	add	r1, sp, #148	; 0x94
 8007ad8:	3d10      	subs	r5, #16
 8007ada:	460c      	mov	r4, r1
 8007adc:	e7bf      	b.n	8007a5e <_svfprintf_r+0xd96>
 8007ade:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dc73      	bgt.n	8007bcc <_svfprintf_r+0xf04>
 8007ae4:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <_svfprintf_r+0xefc>)
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	2301      	movs	r3, #1
 8007aea:	441e      	add	r6, r3
 8007aec:	6063      	str	r3, [r4, #4]
 8007aee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007af0:	9624      	str	r6, [sp, #144]	; 0x90
 8007af2:	3301      	adds	r3, #1
 8007af4:	2b07      	cmp	r3, #7
 8007af6:	9323      	str	r3, [sp, #140]	; 0x8c
 8007af8:	dc3d      	bgt.n	8007b76 <_svfprintf_r+0xeae>
 8007afa:	3408      	adds	r4, #8
 8007afc:	9905      	ldr	r1, [sp, #20]
 8007afe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b02:	430a      	orrs	r2, r1
 8007b04:	f00b 0101 	and.w	r1, fp, #1
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	f43f acc3 	beq.w	8007494 <_svfprintf_r+0x7cc>
 8007b0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b10:	6022      	str	r2, [r4, #0]
 8007b12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b14:	6062      	str	r2, [r4, #4]
 8007b16:	4413      	add	r3, r2
 8007b18:	9324      	str	r3, [sp, #144]	; 0x90
 8007b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	2b07      	cmp	r3, #7
 8007b20:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b22:	dc32      	bgt.n	8007b8a <_svfprintf_r+0xec2>
 8007b24:	3408      	adds	r4, #8
 8007b26:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007b28:	2d00      	cmp	r5, #0
 8007b2a:	da1b      	bge.n	8007b64 <_svfprintf_r+0xe9c>
 8007b2c:	4e26      	ldr	r6, [pc, #152]	; (8007bc8 <_svfprintf_r+0xf00>)
 8007b2e:	426d      	negs	r5, r5
 8007b30:	4623      	mov	r3, r4
 8007b32:	2710      	movs	r7, #16
 8007b34:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8007b38:	2d10      	cmp	r5, #16
 8007b3a:	f102 0201 	add.w	r2, r2, #1
 8007b3e:	f104 0408 	add.w	r4, r4, #8
 8007b42:	601e      	str	r6, [r3, #0]
 8007b44:	dc2b      	bgt.n	8007b9e <_svfprintf_r+0xed6>
 8007b46:	605d      	str	r5, [r3, #4]
 8007b48:	2a07      	cmp	r2, #7
 8007b4a:	440d      	add	r5, r1
 8007b4c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8007b50:	dd08      	ble.n	8007b64 <_svfprintf_r+0xe9c>
 8007b52:	aa22      	add	r2, sp, #136	; 0x88
 8007b54:	4641      	mov	r1, r8
 8007b56:	4650      	mov	r0, sl
 8007b58:	f002 f815 	bl	8009b86 <__ssprint_r>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f040 8235 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007b62:	ac25      	add	r4, sp, #148	; 0x94
 8007b64:	9b05      	ldr	r3, [sp, #20]
 8007b66:	9a05      	ldr	r2, [sp, #20]
 8007b68:	6063      	str	r3, [r4, #4]
 8007b6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b6c:	f8c4 9000 	str.w	r9, [r4]
 8007b70:	4413      	add	r3, r2
 8007b72:	9324      	str	r3, [sp, #144]	; 0x90
 8007b74:	e487      	b.n	8007486 <_svfprintf_r+0x7be>
 8007b76:	aa22      	add	r2, sp, #136	; 0x88
 8007b78:	4641      	mov	r1, r8
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	f002 f803 	bl	8009b86 <__ssprint_r>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	f040 8223 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007b86:	ac25      	add	r4, sp, #148	; 0x94
 8007b88:	e7b8      	b.n	8007afc <_svfprintf_r+0xe34>
 8007b8a:	aa22      	add	r2, sp, #136	; 0x88
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	4650      	mov	r0, sl
 8007b90:	f001 fff9 	bl	8009b86 <__ssprint_r>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f040 8219 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007b9a:	ac25      	add	r4, sp, #148	; 0x94
 8007b9c:	e7c3      	b.n	8007b26 <_svfprintf_r+0xe5e>
 8007b9e:	3110      	adds	r1, #16
 8007ba0:	2a07      	cmp	r2, #7
 8007ba2:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8007ba6:	605f      	str	r7, [r3, #4]
 8007ba8:	dd08      	ble.n	8007bbc <_svfprintf_r+0xef4>
 8007baa:	aa22      	add	r2, sp, #136	; 0x88
 8007bac:	4641      	mov	r1, r8
 8007bae:	4650      	mov	r0, sl
 8007bb0:	f001 ffe9 	bl	8009b86 <__ssprint_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f040 8209 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007bba:	ac25      	add	r4, sp, #148	; 0x94
 8007bbc:	3d10      	subs	r5, #16
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	e7b8      	b.n	8007b34 <_svfprintf_r+0xe6c>
 8007bc2:	bf00      	nop
 8007bc4:	0800b756 	.word	0x0800b756
 8007bc8:	0800b768 	.word	0x0800b768
 8007bcc:	9f05      	ldr	r7, [sp, #20]
 8007bce:	42af      	cmp	r7, r5
 8007bd0:	bfa8      	it	ge
 8007bd2:	462f      	movge	r7, r5
 8007bd4:	2f00      	cmp	r7, #0
 8007bd6:	dd0a      	ble.n	8007bee <_svfprintf_r+0xf26>
 8007bd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bda:	3301      	adds	r3, #1
 8007bdc:	443e      	add	r6, r7
 8007bde:	2b07      	cmp	r3, #7
 8007be0:	e9c4 9700 	strd	r9, r7, [r4]
 8007be4:	9624      	str	r6, [sp, #144]	; 0x90
 8007be6:	9323      	str	r3, [sp, #140]	; 0x8c
 8007be8:	f300 8085 	bgt.w	8007cf6 <_svfprintf_r+0x102e>
 8007bec:	3408      	adds	r4, #8
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	bfac      	ite	ge
 8007bf2:	1bee      	subge	r6, r5, r7
 8007bf4:	462e      	movlt	r6, r5
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	dd19      	ble.n	8007c2e <_svfprintf_r+0xf66>
 8007bfa:	4f97      	ldr	r7, [pc, #604]	; (8007e58 <_svfprintf_r+0x1190>)
 8007bfc:	6027      	str	r7, [r4, #0]
 8007bfe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007c02:	2e10      	cmp	r6, #16
 8007c04:	f103 0301 	add.w	r3, r3, #1
 8007c08:	f104 0108 	add.w	r1, r4, #8
 8007c0c:	dc7d      	bgt.n	8007d0a <_svfprintf_r+0x1042>
 8007c0e:	6066      	str	r6, [r4, #4]
 8007c10:	2b07      	cmp	r3, #7
 8007c12:	4416      	add	r6, r2
 8007c14:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007c18:	f340 808a 	ble.w	8007d30 <_svfprintf_r+0x1068>
 8007c1c:	aa22      	add	r2, sp, #136	; 0x88
 8007c1e:	4641      	mov	r1, r8
 8007c20:	4650      	mov	r0, sl
 8007c22:	f001 ffb0 	bl	8009b86 <__ssprint_r>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f040 81d0 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007c2c:	ac25      	add	r4, sp, #148	; 0x94
 8007c2e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8007c32:	444d      	add	r5, r9
 8007c34:	d00a      	beq.n	8007c4c <_svfprintf_r+0xf84>
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d17b      	bne.n	8007d34 <_svfprintf_r+0x106c>
 8007c3c:	9b08      	ldr	r3, [sp, #32]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d17b      	bne.n	8007d3a <_svfprintf_r+0x1072>
 8007c42:	9b05      	ldr	r3, [sp, #20]
 8007c44:	444b      	add	r3, r9
 8007c46:	429d      	cmp	r5, r3
 8007c48:	bf28      	it	cs
 8007c4a:	461d      	movcs	r5, r3
 8007c4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007c4e:	9a05      	ldr	r2, [sp, #20]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	db02      	blt.n	8007c5a <_svfprintf_r+0xf92>
 8007c54:	f01b 0f01 	tst.w	fp, #1
 8007c58:	d00e      	beq.n	8007c78 <_svfprintf_r+0xfb0>
 8007c5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c66:	4413      	add	r3, r2
 8007c68:	9324      	str	r3, [sp, #144]	; 0x90
 8007c6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	2b07      	cmp	r3, #7
 8007c70:	9323      	str	r3, [sp, #140]	; 0x8c
 8007c72:	f300 80dd 	bgt.w	8007e30 <_svfprintf_r+0x1168>
 8007c76:	3408      	adds	r4, #8
 8007c78:	9b05      	ldr	r3, [sp, #20]
 8007c7a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007c7c:	eb09 0203 	add.w	r2, r9, r3
 8007c80:	1b9e      	subs	r6, r3, r6
 8007c82:	1b52      	subs	r2, r2, r5
 8007c84:	4296      	cmp	r6, r2
 8007c86:	bfa8      	it	ge
 8007c88:	4616      	movge	r6, r2
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	dd0b      	ble.n	8007ca6 <_svfprintf_r+0xfde>
 8007c8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c90:	4433      	add	r3, r6
 8007c92:	9324      	str	r3, [sp, #144]	; 0x90
 8007c94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c96:	3301      	adds	r3, #1
 8007c98:	2b07      	cmp	r3, #7
 8007c9a:	e9c4 5600 	strd	r5, r6, [r4]
 8007c9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007ca0:	f300 80d0 	bgt.w	8007e44 <_svfprintf_r+0x117c>
 8007ca4:	3408      	adds	r4, #8
 8007ca6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007ca8:	9b05      	ldr	r3, [sp, #20]
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	eba3 0505 	sub.w	r5, r3, r5
 8007cb0:	bfa8      	it	ge
 8007cb2:	1bad      	subge	r5, r5, r6
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	f77f abed 	ble.w	8007494 <_svfprintf_r+0x7cc>
 8007cba:	4e67      	ldr	r6, [pc, #412]	; (8007e58 <_svfprintf_r+0x1190>)
 8007cbc:	2710      	movs	r7, #16
 8007cbe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007cc2:	2d10      	cmp	r5, #16
 8007cc4:	f103 0301 	add.w	r3, r3, #1
 8007cc8:	f104 0108 	add.w	r1, r4, #8
 8007ccc:	6026      	str	r6, [r4, #0]
 8007cce:	f77f aecf 	ble.w	8007a70 <_svfprintf_r+0xda8>
 8007cd2:	3210      	adds	r2, #16
 8007cd4:	2b07      	cmp	r3, #7
 8007cd6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007cda:	6067      	str	r7, [r4, #4]
 8007cdc:	dd08      	ble.n	8007cf0 <_svfprintf_r+0x1028>
 8007cde:	aa22      	add	r2, sp, #136	; 0x88
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	f001 ff4f 	bl	8009b86 <__ssprint_r>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f040 816f 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007cee:	a925      	add	r1, sp, #148	; 0x94
 8007cf0:	3d10      	subs	r5, #16
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	e7e3      	b.n	8007cbe <_svfprintf_r+0xff6>
 8007cf6:	aa22      	add	r2, sp, #136	; 0x88
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	4650      	mov	r0, sl
 8007cfc:	f001 ff43 	bl	8009b86 <__ssprint_r>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f040 8163 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007d06:	ac25      	add	r4, sp, #148	; 0x94
 8007d08:	e771      	b.n	8007bee <_svfprintf_r+0xf26>
 8007d0a:	2010      	movs	r0, #16
 8007d0c:	4402      	add	r2, r0
 8007d0e:	2b07      	cmp	r3, #7
 8007d10:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007d14:	6060      	str	r0, [r4, #4]
 8007d16:	dd08      	ble.n	8007d2a <_svfprintf_r+0x1062>
 8007d18:	aa22      	add	r2, sp, #136	; 0x88
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	f001 ff32 	bl	8009b86 <__ssprint_r>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f040 8152 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007d28:	a925      	add	r1, sp, #148	; 0x94
 8007d2a:	3e10      	subs	r6, #16
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	e765      	b.n	8007bfc <_svfprintf_r+0xf34>
 8007d30:	460c      	mov	r4, r1
 8007d32:	e77c      	b.n	8007c2e <_svfprintf_r+0xf66>
 8007d34:	9b08      	ldr	r3, [sp, #32]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04a      	beq.n	8007dd0 <_svfprintf_r+0x1108>
 8007d3a:	9b08      	ldr	r3, [sp, #32]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d4c:	4413      	add	r3, r2
 8007d4e:	9324      	str	r3, [sp, #144]	; 0x90
 8007d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d52:	3301      	adds	r3, #1
 8007d54:	2b07      	cmp	r3, #7
 8007d56:	9323      	str	r3, [sp, #140]	; 0x8c
 8007d58:	dc41      	bgt.n	8007dde <_svfprintf_r+0x1116>
 8007d5a:	3408      	adds	r4, #8
 8007d5c:	9b05      	ldr	r3, [sp, #20]
 8007d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d60:	eb09 0703 	add.w	r7, r9, r3
 8007d64:	1b7b      	subs	r3, r7, r5
 8007d66:	7817      	ldrb	r7, [r2, #0]
 8007d68:	429f      	cmp	r7, r3
 8007d6a:	bfa8      	it	ge
 8007d6c:	461f      	movge	r7, r3
 8007d6e:	2f00      	cmp	r7, #0
 8007d70:	dd0a      	ble.n	8007d88 <_svfprintf_r+0x10c0>
 8007d72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d74:	443b      	add	r3, r7
 8007d76:	9324      	str	r3, [sp, #144]	; 0x90
 8007d78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	2b07      	cmp	r3, #7
 8007d7e:	e9c4 5700 	strd	r5, r7, [r4]
 8007d82:	9323      	str	r3, [sp, #140]	; 0x8c
 8007d84:	dc35      	bgt.n	8007df2 <_svfprintf_r+0x112a>
 8007d86:	3408      	adds	r4, #8
 8007d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8a:	781e      	ldrb	r6, [r3, #0]
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	bfa8      	it	ge
 8007d90:	1bf6      	subge	r6, r6, r7
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	dd18      	ble.n	8007dc8 <_svfprintf_r+0x1100>
 8007d96:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007d9a:	482f      	ldr	r0, [pc, #188]	; (8007e58 <_svfprintf_r+0x1190>)
 8007d9c:	6020      	str	r0, [r4, #0]
 8007d9e:	2e10      	cmp	r6, #16
 8007da0:	f103 0301 	add.w	r3, r3, #1
 8007da4:	f104 0108 	add.w	r1, r4, #8
 8007da8:	dc2d      	bgt.n	8007e06 <_svfprintf_r+0x113e>
 8007daa:	4432      	add	r2, r6
 8007dac:	2b07      	cmp	r3, #7
 8007dae:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007db2:	6066      	str	r6, [r4, #4]
 8007db4:	dd3a      	ble.n	8007e2c <_svfprintf_r+0x1164>
 8007db6:	aa22      	add	r2, sp, #136	; 0x88
 8007db8:	4641      	mov	r1, r8
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f001 fee3 	bl	8009b86 <__ssprint_r>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	f040 8103 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007dc6:	ac25      	add	r4, sp, #148	; 0x94
 8007dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	441d      	add	r5, r3
 8007dce:	e732      	b.n	8007c36 <_svfprintf_r+0xf6e>
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	9309      	str	r3, [sp, #36]	; 0x24
 8007ddc:	e7b0      	b.n	8007d40 <_svfprintf_r+0x1078>
 8007dde:	aa22      	add	r2, sp, #136	; 0x88
 8007de0:	4641      	mov	r1, r8
 8007de2:	4650      	mov	r0, sl
 8007de4:	f001 fecf 	bl	8009b86 <__ssprint_r>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f040 80ef 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007dee:	ac25      	add	r4, sp, #148	; 0x94
 8007df0:	e7b4      	b.n	8007d5c <_svfprintf_r+0x1094>
 8007df2:	aa22      	add	r2, sp, #136	; 0x88
 8007df4:	4641      	mov	r1, r8
 8007df6:	4650      	mov	r0, sl
 8007df8:	f001 fec5 	bl	8009b86 <__ssprint_r>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f040 80e5 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007e02:	ac25      	add	r4, sp, #148	; 0x94
 8007e04:	e7c0      	b.n	8007d88 <_svfprintf_r+0x10c0>
 8007e06:	2010      	movs	r0, #16
 8007e08:	4402      	add	r2, r0
 8007e0a:	2b07      	cmp	r3, #7
 8007e0c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007e10:	6060      	str	r0, [r4, #4]
 8007e12:	dd08      	ble.n	8007e26 <_svfprintf_r+0x115e>
 8007e14:	aa22      	add	r2, sp, #136	; 0x88
 8007e16:	4641      	mov	r1, r8
 8007e18:	4650      	mov	r0, sl
 8007e1a:	f001 feb4 	bl	8009b86 <__ssprint_r>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f040 80d4 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007e24:	a925      	add	r1, sp, #148	; 0x94
 8007e26:	3e10      	subs	r6, #16
 8007e28:	460c      	mov	r4, r1
 8007e2a:	e7b4      	b.n	8007d96 <_svfprintf_r+0x10ce>
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	e7cb      	b.n	8007dc8 <_svfprintf_r+0x1100>
 8007e30:	aa22      	add	r2, sp, #136	; 0x88
 8007e32:	4641      	mov	r1, r8
 8007e34:	4650      	mov	r0, sl
 8007e36:	f001 fea6 	bl	8009b86 <__ssprint_r>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f040 80c6 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007e40:	ac25      	add	r4, sp, #148	; 0x94
 8007e42:	e719      	b.n	8007c78 <_svfprintf_r+0xfb0>
 8007e44:	aa22      	add	r2, sp, #136	; 0x88
 8007e46:	4641      	mov	r1, r8
 8007e48:	4650      	mov	r0, sl
 8007e4a:	f001 fe9c 	bl	8009b86 <__ssprint_r>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	f040 80bc 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007e54:	ac25      	add	r4, sp, #148	; 0x94
 8007e56:	e726      	b.n	8007ca6 <_svfprintf_r+0xfde>
 8007e58:	0800b768 	.word	0x0800b768
 8007e5c:	9a05      	ldr	r2, [sp, #20]
 8007e5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e60:	2a01      	cmp	r2, #1
 8007e62:	f106 0601 	add.w	r6, r6, #1
 8007e66:	f103 0301 	add.w	r3, r3, #1
 8007e6a:	f104 0508 	add.w	r5, r4, #8
 8007e6e:	dc02      	bgt.n	8007e76 <_svfprintf_r+0x11ae>
 8007e70:	f01b 0f01 	tst.w	fp, #1
 8007e74:	d07e      	beq.n	8007f74 <_svfprintf_r+0x12ac>
 8007e76:	2201      	movs	r2, #1
 8007e78:	2b07      	cmp	r3, #7
 8007e7a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007e7e:	f8c4 9000 	str.w	r9, [r4]
 8007e82:	6062      	str	r2, [r4, #4]
 8007e84:	dd08      	ble.n	8007e98 <_svfprintf_r+0x11d0>
 8007e86:	aa22      	add	r2, sp, #136	; 0x88
 8007e88:	4641      	mov	r1, r8
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	f001 fe7b 	bl	8009b86 <__ssprint_r>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	f040 809b 	bne.w	8007fcc <_svfprintf_r+0x1304>
 8007e96:	ad25      	add	r5, sp, #148	; 0x94
 8007e98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ea0:	606b      	str	r3, [r5, #4]
 8007ea2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ea4:	4413      	add	r3, r2
 8007ea6:	9324      	str	r3, [sp, #144]	; 0x90
 8007ea8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007eaa:	3301      	adds	r3, #1
 8007eac:	2b07      	cmp	r3, #7
 8007eae:	9323      	str	r3, [sp, #140]	; 0x8c
 8007eb0:	dc32      	bgt.n	8007f18 <_svfprintf_r+0x1250>
 8007eb2:	3508      	adds	r5, #8
 8007eb4:	9b05      	ldr	r3, [sp, #20]
 8007eb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007eba:	1e5c      	subs	r4, r3, #1
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f7f8 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d130      	bne.n	8007f2a <_svfprintf_r+0x1262>
 8007ec8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007eca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ecc:	9a05      	ldr	r2, [sp, #20]
 8007ece:	3101      	adds	r1, #1
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	f109 0001 	add.w	r0, r9, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	2907      	cmp	r1, #7
 8007eda:	e9c5 0400 	strd	r0, r4, [r5]
 8007ede:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8007ee2:	dd50      	ble.n	8007f86 <_svfprintf_r+0x12be>
 8007ee4:	aa22      	add	r2, sp, #136	; 0x88
 8007ee6:	4641      	mov	r1, r8
 8007ee8:	4650      	mov	r0, sl
 8007eea:	f001 fe4c 	bl	8009b86 <__ssprint_r>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d16c      	bne.n	8007fcc <_svfprintf_r+0x1304>
 8007ef2:	ad25      	add	r5, sp, #148	; 0x94
 8007ef4:	ab1e      	add	r3, sp, #120	; 0x78
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007efa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007efc:	606b      	str	r3, [r5, #4]
 8007efe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f00:	4413      	add	r3, r2
 8007f02:	9324      	str	r3, [sp, #144]	; 0x90
 8007f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f06:	3301      	adds	r3, #1
 8007f08:	2b07      	cmp	r3, #7
 8007f0a:	9323      	str	r3, [sp, #140]	; 0x8c
 8007f0c:	f73f adb7 	bgt.w	8007a7e <_svfprintf_r+0xdb6>
 8007f10:	f105 0408 	add.w	r4, r5, #8
 8007f14:	f7ff babe 	b.w	8007494 <_svfprintf_r+0x7cc>
 8007f18:	aa22      	add	r2, sp, #136	; 0x88
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	f001 fe32 	bl	8009b86 <__ssprint_r>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d152      	bne.n	8007fcc <_svfprintf_r+0x1304>
 8007f26:	ad25      	add	r5, sp, #148	; 0x94
 8007f28:	e7c4      	b.n	8007eb4 <_svfprintf_r+0x11ec>
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	dde2      	ble.n	8007ef4 <_svfprintf_r+0x122c>
 8007f2e:	4e56      	ldr	r6, [pc, #344]	; (8008088 <_svfprintf_r+0x13c0>)
 8007f30:	2710      	movs	r7, #16
 8007f32:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007f36:	2c10      	cmp	r4, #16
 8007f38:	f103 0301 	add.w	r3, r3, #1
 8007f3c:	f105 0108 	add.w	r1, r5, #8
 8007f40:	602e      	str	r6, [r5, #0]
 8007f42:	dc07      	bgt.n	8007f54 <_svfprintf_r+0x128c>
 8007f44:	606c      	str	r4, [r5, #4]
 8007f46:	2b07      	cmp	r3, #7
 8007f48:	4414      	add	r4, r2
 8007f4a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8007f4e:	dcc9      	bgt.n	8007ee4 <_svfprintf_r+0x121c>
 8007f50:	460d      	mov	r5, r1
 8007f52:	e7cf      	b.n	8007ef4 <_svfprintf_r+0x122c>
 8007f54:	3210      	adds	r2, #16
 8007f56:	2b07      	cmp	r3, #7
 8007f58:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007f5c:	606f      	str	r7, [r5, #4]
 8007f5e:	dd06      	ble.n	8007f6e <_svfprintf_r+0x12a6>
 8007f60:	aa22      	add	r2, sp, #136	; 0x88
 8007f62:	4641      	mov	r1, r8
 8007f64:	4650      	mov	r0, sl
 8007f66:	f001 fe0e 	bl	8009b86 <__ssprint_r>
 8007f6a:	bb78      	cbnz	r0, 8007fcc <_svfprintf_r+0x1304>
 8007f6c:	a925      	add	r1, sp, #148	; 0x94
 8007f6e:	3c10      	subs	r4, #16
 8007f70:	460d      	mov	r5, r1
 8007f72:	e7de      	b.n	8007f32 <_svfprintf_r+0x126a>
 8007f74:	2201      	movs	r2, #1
 8007f76:	2b07      	cmp	r3, #7
 8007f78:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007f7c:	f8c4 9000 	str.w	r9, [r4]
 8007f80:	6062      	str	r2, [r4, #4]
 8007f82:	ddb7      	ble.n	8007ef4 <_svfprintf_r+0x122c>
 8007f84:	e7ae      	b.n	8007ee4 <_svfprintf_r+0x121c>
 8007f86:	3508      	adds	r5, #8
 8007f88:	e7b4      	b.n	8007ef4 <_svfprintf_r+0x122c>
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f7ff ba82 	b.w	8007494 <_svfprintf_r+0x7cc>
 8007f90:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007f94:	1a9d      	subs	r5, r3, r2
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	f77f aa80 	ble.w	800749c <_svfprintf_r+0x7d4>
 8007f9c:	4e3b      	ldr	r6, [pc, #236]	; (800808c <_svfprintf_r+0x13c4>)
 8007f9e:	2710      	movs	r7, #16
 8007fa0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007fa4:	2d10      	cmp	r5, #16
 8007fa6:	f103 0301 	add.w	r3, r3, #1
 8007faa:	6026      	str	r6, [r4, #0]
 8007fac:	dc18      	bgt.n	8007fe0 <_svfprintf_r+0x1318>
 8007fae:	6065      	str	r5, [r4, #4]
 8007fb0:	2b07      	cmp	r3, #7
 8007fb2:	4415      	add	r5, r2
 8007fb4:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007fb8:	f77f aa70 	ble.w	800749c <_svfprintf_r+0x7d4>
 8007fbc:	aa22      	add	r2, sp, #136	; 0x88
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	4650      	mov	r0, sl
 8007fc2:	f001 fde0 	bl	8009b86 <__ssprint_r>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f43f aa68 	beq.w	800749c <_svfprintf_r+0x7d4>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f43f a887 	beq.w	80070e2 <_svfprintf_r+0x41a>
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	f000 ff34 	bl	8008e44 <_free_r>
 8007fdc:	f7ff b881 	b.w	80070e2 <_svfprintf_r+0x41a>
 8007fe0:	3210      	adds	r2, #16
 8007fe2:	2b07      	cmp	r3, #7
 8007fe4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007fe8:	6067      	str	r7, [r4, #4]
 8007fea:	dc02      	bgt.n	8007ff2 <_svfprintf_r+0x132a>
 8007fec:	3408      	adds	r4, #8
 8007fee:	3d10      	subs	r5, #16
 8007ff0:	e7d6      	b.n	8007fa0 <_svfprintf_r+0x12d8>
 8007ff2:	aa22      	add	r2, sp, #136	; 0x88
 8007ff4:	4641      	mov	r1, r8
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	f001 fdc5 	bl	8009b86 <__ssprint_r>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d1e5      	bne.n	8007fcc <_svfprintf_r+0x1304>
 8008000:	ac25      	add	r4, sp, #148	; 0x94
 8008002:	e7f4      	b.n	8007fee <_svfprintf_r+0x1326>
 8008004:	9903      	ldr	r1, [sp, #12]
 8008006:	4650      	mov	r0, sl
 8008008:	f000 ff1c 	bl	8008e44 <_free_r>
 800800c:	f7ff ba5e 	b.w	80074cc <_svfprintf_r+0x804>
 8008010:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008012:	2b00      	cmp	r3, #0
 8008014:	f43f a865 	beq.w	80070e2 <_svfprintf_r+0x41a>
 8008018:	aa22      	add	r2, sp, #136	; 0x88
 800801a:	4641      	mov	r1, r8
 800801c:	4650      	mov	r0, sl
 800801e:	f001 fdb2 	bl	8009b86 <__ssprint_r>
 8008022:	f7ff b85e 	b.w	80070e2 <_svfprintf_r+0x41a>
 8008026:	ea56 0205 	orrs.w	r2, r6, r5
 800802a:	465f      	mov	r7, fp
 800802c:	f43f ab78 	beq.w	8007720 <_svfprintf_r+0xa58>
 8008030:	2b01      	cmp	r3, #1
 8008032:	f43f ac15 	beq.w	8007860 <_svfprintf_r+0xb98>
 8008036:	2b02      	cmp	r3, #2
 8008038:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800803c:	f43f ac5b 	beq.w	80078f6 <_svfprintf_r+0xc2e>
 8008040:	f006 0307 	and.w	r3, r6, #7
 8008044:	08f6      	lsrs	r6, r6, #3
 8008046:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 800804a:	08ed      	lsrs	r5, r5, #3
 800804c:	3330      	adds	r3, #48	; 0x30
 800804e:	ea56 0105 	orrs.w	r1, r6, r5
 8008052:	464a      	mov	r2, r9
 8008054:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8008058:	d1f2      	bne.n	8008040 <_svfprintf_r+0x1378>
 800805a:	07f9      	lsls	r1, r7, #31
 800805c:	d506      	bpl.n	800806c <_svfprintf_r+0x13a4>
 800805e:	2b30      	cmp	r3, #48	; 0x30
 8008060:	d004      	beq.n	800806c <_svfprintf_r+0x13a4>
 8008062:	2330      	movs	r3, #48	; 0x30
 8008064:	f809 3c01 	strb.w	r3, [r9, #-1]
 8008068:	f1a2 0902 	sub.w	r9, r2, #2
 800806c:	ab4e      	add	r3, sp, #312	; 0x138
 800806e:	eba3 0309 	sub.w	r3, r3, r9
 8008072:	9e04      	ldr	r6, [sp, #16]
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	2300      	movs	r3, #0
 8008078:	46bb      	mov	fp, r7
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008080:	461d      	mov	r5, r3
 8008082:	f7ff b94d 	b.w	8007320 <_svfprintf_r+0x658>
 8008086:	bf00      	nop
 8008088:	0800b768 	.word	0x0800b768
 800808c:	0800b758 	.word	0x0800b758

08008090 <register_fini>:
 8008090:	4b02      	ldr	r3, [pc, #8]	; (800809c <register_fini+0xc>)
 8008092:	b113      	cbz	r3, 800809a <register_fini+0xa>
 8008094:	4802      	ldr	r0, [pc, #8]	; (80080a0 <register_fini+0x10>)
 8008096:	f000 b805 	b.w	80080a4 <atexit>
 800809a:	4770      	bx	lr
 800809c:	00000000 	.word	0x00000000
 80080a0:	08008d75 	.word	0x08008d75

080080a4 <atexit>:
 80080a4:	2300      	movs	r3, #0
 80080a6:	4601      	mov	r1, r0
 80080a8:	461a      	mov	r2, r3
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 bdf4 	b.w	8009c98 <__register_exitproc>

080080b0 <quorem>:
 80080b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	6903      	ldr	r3, [r0, #16]
 80080b6:	690c      	ldr	r4, [r1, #16]
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	4607      	mov	r7, r0
 80080bc:	f2c0 8081 	blt.w	80081c2 <quorem+0x112>
 80080c0:	3c01      	subs	r4, #1
 80080c2:	f101 0814 	add.w	r8, r1, #20
 80080c6:	f100 0514 	add.w	r5, r0, #20
 80080ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080d8:	3301      	adds	r3, #1
 80080da:	429a      	cmp	r2, r3
 80080dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80080e8:	d331      	bcc.n	800814e <quorem+0x9e>
 80080ea:	f04f 0e00 	mov.w	lr, #0
 80080ee:	4640      	mov	r0, r8
 80080f0:	46ac      	mov	ip, r5
 80080f2:	46f2      	mov	sl, lr
 80080f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80080f8:	b293      	uxth	r3, r2
 80080fa:	fb06 e303 	mla	r3, r6, r3, lr
 80080fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008102:	b29b      	uxth	r3, r3
 8008104:	ebaa 0303 	sub.w	r3, sl, r3
 8008108:	f8dc a000 	ldr.w	sl, [ip]
 800810c:	0c12      	lsrs	r2, r2, #16
 800810e:	fa13 f38a 	uxtah	r3, r3, sl
 8008112:	fb06 e202 	mla	r2, r6, r2, lr
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	9b00      	ldr	r3, [sp, #0]
 800811a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800811e:	b292      	uxth	r2, r2
 8008120:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008128:	f8bd 3000 	ldrh.w	r3, [sp]
 800812c:	4581      	cmp	r9, r0
 800812e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008132:	f84c 3b04 	str.w	r3, [ip], #4
 8008136:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800813a:	d2db      	bcs.n	80080f4 <quorem+0x44>
 800813c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008140:	b92b      	cbnz	r3, 800814e <quorem+0x9e>
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	3b04      	subs	r3, #4
 8008146:	429d      	cmp	r5, r3
 8008148:	461a      	mov	r2, r3
 800814a:	d32e      	bcc.n	80081aa <quorem+0xfa>
 800814c:	613c      	str	r4, [r7, #16]
 800814e:	4638      	mov	r0, r7
 8008150:	f001 fbbc 	bl	80098cc <__mcmp>
 8008154:	2800      	cmp	r0, #0
 8008156:	db24      	blt.n	80081a2 <quorem+0xf2>
 8008158:	3601      	adds	r6, #1
 800815a:	4628      	mov	r0, r5
 800815c:	f04f 0c00 	mov.w	ip, #0
 8008160:	f858 2b04 	ldr.w	r2, [r8], #4
 8008164:	f8d0 e000 	ldr.w	lr, [r0]
 8008168:	b293      	uxth	r3, r2
 800816a:	ebac 0303 	sub.w	r3, ip, r3
 800816e:	0c12      	lsrs	r2, r2, #16
 8008170:	fa13 f38e 	uxtah	r3, r3, lr
 8008174:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800817c:	b29b      	uxth	r3, r3
 800817e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008182:	45c1      	cmp	r9, r8
 8008184:	f840 3b04 	str.w	r3, [r0], #4
 8008188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800818c:	d2e8      	bcs.n	8008160 <quorem+0xb0>
 800818e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008196:	b922      	cbnz	r2, 80081a2 <quorem+0xf2>
 8008198:	3b04      	subs	r3, #4
 800819a:	429d      	cmp	r5, r3
 800819c:	461a      	mov	r2, r3
 800819e:	d30a      	bcc.n	80081b6 <quorem+0x106>
 80081a0:	613c      	str	r4, [r7, #16]
 80081a2:	4630      	mov	r0, r6
 80081a4:	b003      	add	sp, #12
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	3b04      	subs	r3, #4
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	d1cc      	bne.n	800814c <quorem+0x9c>
 80081b2:	3c01      	subs	r4, #1
 80081b4:	e7c7      	b.n	8008146 <quorem+0x96>
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	d1f0      	bne.n	80081a0 <quorem+0xf0>
 80081be:	3c01      	subs	r4, #1
 80081c0:	e7eb      	b.n	800819a <quorem+0xea>
 80081c2:	2000      	movs	r0, #0
 80081c4:	e7ee      	b.n	80081a4 <quorem+0xf4>
	...

080081c8 <_dtoa_r>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	ed2d 8b04 	vpush	{d8-d9}
 80081d0:	b093      	sub	sp, #76	; 0x4c
 80081d2:	ec57 6b10 	vmov	r6, r7, d0
 80081d6:	9106      	str	r1, [sp, #24]
 80081d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80081da:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80081dc:	9209      	str	r2, [sp, #36]	; 0x24
 80081de:	ee10 aa10 	vmov	sl, s0
 80081e2:	4604      	mov	r4, r0
 80081e4:	930c      	str	r3, [sp, #48]	; 0x30
 80081e6:	46bb      	mov	fp, r7
 80081e8:	b141      	cbz	r1, 80081fc <_dtoa_r+0x34>
 80081ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ec:	604a      	str	r2, [r1, #4]
 80081ee:	2301      	movs	r3, #1
 80081f0:	4093      	lsls	r3, r2
 80081f2:	608b      	str	r3, [r1, #8]
 80081f4:	f001 f95b 	bl	80094ae <_Bfree>
 80081f8:	2300      	movs	r3, #0
 80081fa:	6423      	str	r3, [r4, #64]	; 0x40
 80081fc:	1e3b      	subs	r3, r7, #0
 80081fe:	bfaa      	itet	ge
 8008200:	2300      	movge	r3, #0
 8008202:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008206:	602b      	strge	r3, [r5, #0]
 8008208:	4ba3      	ldr	r3, [pc, #652]	; (8008498 <_dtoa_r+0x2d0>)
 800820a:	bfbc      	itt	lt
 800820c:	2201      	movlt	r2, #1
 800820e:	602a      	strlt	r2, [r5, #0]
 8008210:	ea33 030b 	bics.w	r3, r3, fp
 8008214:	d11b      	bne.n	800824e <_dtoa_r+0x86>
 8008216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008218:	f242 730f 	movw	r3, #9999	; 0x270f
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008222:	4333      	orrs	r3, r6
 8008224:	f000 8590 	beq.w	8008d48 <_dtoa_r+0xb80>
 8008228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800822a:	b90b      	cbnz	r3, 8008230 <_dtoa_r+0x68>
 800822c:	4b9b      	ldr	r3, [pc, #620]	; (800849c <_dtoa_r+0x2d4>)
 800822e:	e022      	b.n	8008276 <_dtoa_r+0xae>
 8008230:	4b9a      	ldr	r3, [pc, #616]	; (800849c <_dtoa_r+0x2d4>)
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	3303      	adds	r3, #3
 8008236:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	9801      	ldr	r0, [sp, #4]
 800823c:	b013      	add	sp, #76	; 0x4c
 800823e:	ecbd 8b04 	vpop	{d8-d9}
 8008242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008246:	4b96      	ldr	r3, [pc, #600]	; (80084a0 <_dtoa_r+0x2d8>)
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	3308      	adds	r3, #8
 800824c:	e7f3      	b.n	8008236 <_dtoa_r+0x6e>
 800824e:	2200      	movs	r2, #0
 8008250:	2300      	movs	r3, #0
 8008252:	4650      	mov	r0, sl
 8008254:	4659      	mov	r1, fp
 8008256:	f7f8 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800825a:	ec4b ab19 	vmov	d9, sl, fp
 800825e:	4680      	mov	r8, r0
 8008260:	b158      	cbz	r0, 800827a <_dtoa_r+0xb2>
 8008262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008264:	2301      	movs	r3, #1
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8569 	beq.w	8008d42 <_dtoa_r+0xb7a>
 8008270:	488c      	ldr	r0, [pc, #560]	; (80084a4 <_dtoa_r+0x2dc>)
 8008272:	6018      	str	r0, [r3, #0]
 8008274:	1e43      	subs	r3, r0, #1
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	e7df      	b.n	800823a <_dtoa_r+0x72>
 800827a:	ec4b ab10 	vmov	d0, sl, fp
 800827e:	aa10      	add	r2, sp, #64	; 0x40
 8008280:	a911      	add	r1, sp, #68	; 0x44
 8008282:	4620      	mov	r0, r4
 8008284:	f001 fbc8 	bl	8009a18 <__d2b>
 8008288:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800828c:	ee08 0a10 	vmov	s16, r0
 8008290:	2d00      	cmp	r5, #0
 8008292:	f000 8082 	beq.w	800839a <_dtoa_r+0x1d2>
 8008296:	ee19 3a90 	vmov	r3, s19
 800829a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800829e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082a2:	4656      	mov	r6, sl
 80082a4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082ac:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082b0:	4b7d      	ldr	r3, [pc, #500]	; (80084a8 <_dtoa_r+0x2e0>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f7 ffe6 	bl	8000288 <__aeabi_dsub>
 80082bc:	a370      	add	r3, pc, #448	; (adr r3, 8008480 <_dtoa_r+0x2b8>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f8 f999 	bl	80005f8 <__aeabi_dmul>
 80082c6:	a370      	add	r3, pc, #448	; (adr r3, 8008488 <_dtoa_r+0x2c0>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f7 ffde 	bl	800028c <__adddf3>
 80082d0:	4606      	mov	r6, r0
 80082d2:	4628      	mov	r0, r5
 80082d4:	460f      	mov	r7, r1
 80082d6:	f7f8 f925 	bl	8000524 <__aeabi_i2d>
 80082da:	a36d      	add	r3, pc, #436	; (adr r3, 8008490 <_dtoa_r+0x2c8>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f7f8 f98a 	bl	80005f8 <__aeabi_dmul>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f7 ffce 	bl	800028c <__adddf3>
 80082f0:	4606      	mov	r6, r0
 80082f2:	460f      	mov	r7, r1
 80082f4:	f7f8 fc30 	bl	8000b58 <__aeabi_d2iz>
 80082f8:	2200      	movs	r2, #0
 80082fa:	9000      	str	r0, [sp, #0]
 80082fc:	2300      	movs	r3, #0
 80082fe:	4630      	mov	r0, r6
 8008300:	4639      	mov	r1, r7
 8008302:	f7f8 fbeb 	bl	8000adc <__aeabi_dcmplt>
 8008306:	b150      	cbz	r0, 800831e <_dtoa_r+0x156>
 8008308:	9800      	ldr	r0, [sp, #0]
 800830a:	f7f8 f90b 	bl	8000524 <__aeabi_i2d>
 800830e:	4632      	mov	r2, r6
 8008310:	463b      	mov	r3, r7
 8008312:	f7f8 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008316:	b910      	cbnz	r0, 800831e <_dtoa_r+0x156>
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	3b01      	subs	r3, #1
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	9b00      	ldr	r3, [sp, #0]
 8008320:	2b16      	cmp	r3, #22
 8008322:	d858      	bhi.n	80083d6 <_dtoa_r+0x20e>
 8008324:	9a00      	ldr	r2, [sp, #0]
 8008326:	4b61      	ldr	r3, [pc, #388]	; (80084ac <_dtoa_r+0x2e4>)
 8008328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	ec51 0b19 	vmov	r0, r1, d9
 8008334:	f7f8 fbd2 	bl	8000adc <__aeabi_dcmplt>
 8008338:	2800      	cmp	r0, #0
 800833a:	d04e      	beq.n	80083da <_dtoa_r+0x212>
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	3b01      	subs	r3, #1
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	2300      	movs	r3, #0
 8008344:	930b      	str	r3, [sp, #44]	; 0x2c
 8008346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008348:	1b5d      	subs	r5, r3, r5
 800834a:	1e6b      	subs	r3, r5, #1
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	bf45      	ittet	mi
 8008350:	f1c5 0301 	rsbmi	r3, r5, #1
 8008354:	9304      	strmi	r3, [sp, #16]
 8008356:	2300      	movpl	r3, #0
 8008358:	2300      	movmi	r3, #0
 800835a:	bf4c      	ite	mi
 800835c:	9305      	strmi	r3, [sp, #20]
 800835e:	9304      	strpl	r3, [sp, #16]
 8008360:	9b00      	ldr	r3, [sp, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	db3b      	blt.n	80083de <_dtoa_r+0x216>
 8008366:	9b05      	ldr	r3, [sp, #20]
 8008368:	9a00      	ldr	r2, [sp, #0]
 800836a:	920a      	str	r2, [sp, #40]	; 0x28
 800836c:	4413      	add	r3, r2
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	2300      	movs	r3, #0
 8008372:	9307      	str	r3, [sp, #28]
 8008374:	9b06      	ldr	r3, [sp, #24]
 8008376:	2b09      	cmp	r3, #9
 8008378:	d869      	bhi.n	800844e <_dtoa_r+0x286>
 800837a:	2b05      	cmp	r3, #5
 800837c:	bfc4      	itt	gt
 800837e:	3b04      	subgt	r3, #4
 8008380:	9306      	strgt	r3, [sp, #24]
 8008382:	9b06      	ldr	r3, [sp, #24]
 8008384:	f1a3 0302 	sub.w	r3, r3, #2
 8008388:	bfcc      	ite	gt
 800838a:	2500      	movgt	r5, #0
 800838c:	2501      	movle	r5, #1
 800838e:	2b03      	cmp	r3, #3
 8008390:	d868      	bhi.n	8008464 <_dtoa_r+0x29c>
 8008392:	e8df f003 	tbb	[pc, r3]
 8008396:	3a2d      	.short	0x3a2d
 8008398:	5a38      	.short	0x5a38
 800839a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800839e:	441d      	add	r5, r3
 80083a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083a4:	2b20      	cmp	r3, #32
 80083a6:	bfc1      	itttt	gt
 80083a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083b0:	fa0b f303 	lslgt.w	r3, fp, r3
 80083b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083b8:	bfda      	itte	le
 80083ba:	f1c3 0320 	rsble	r3, r3, #32
 80083be:	fa06 f003 	lslle.w	r0, r6, r3
 80083c2:	4318      	orrgt	r0, r3
 80083c4:	f7f8 f89e 	bl	8000504 <__aeabi_ui2d>
 80083c8:	2301      	movs	r3, #1
 80083ca:	4606      	mov	r6, r0
 80083cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083d0:	3d01      	subs	r5, #1
 80083d2:	930e      	str	r3, [sp, #56]	; 0x38
 80083d4:	e76c      	b.n	80082b0 <_dtoa_r+0xe8>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e7b4      	b.n	8008344 <_dtoa_r+0x17c>
 80083da:	900b      	str	r0, [sp, #44]	; 0x2c
 80083dc:	e7b3      	b.n	8008346 <_dtoa_r+0x17e>
 80083de:	9b04      	ldr	r3, [sp, #16]
 80083e0:	9a00      	ldr	r2, [sp, #0]
 80083e2:	1a9b      	subs	r3, r3, r2
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	4253      	negs	r3, r2
 80083e8:	9307      	str	r3, [sp, #28]
 80083ea:	2300      	movs	r3, #0
 80083ec:	930a      	str	r3, [sp, #40]	; 0x28
 80083ee:	e7c1      	b.n	8008374 <_dtoa_r+0x1ac>
 80083f0:	2300      	movs	r3, #0
 80083f2:	9308      	str	r3, [sp, #32]
 80083f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dc37      	bgt.n	800846a <_dtoa_r+0x2a2>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008400:	461a      	mov	r2, r3
 8008402:	9209      	str	r2, [sp, #36]	; 0x24
 8008404:	e00c      	b.n	8008420 <_dtoa_r+0x258>
 8008406:	2301      	movs	r3, #1
 8008408:	e7f3      	b.n	80083f2 <_dtoa_r+0x22a>
 800840a:	2300      	movs	r3, #0
 800840c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800840e:	9308      	str	r3, [sp, #32]
 8008410:	9b00      	ldr	r3, [sp, #0]
 8008412:	4413      	add	r3, r2
 8008414:	9302      	str	r3, [sp, #8]
 8008416:	3301      	adds	r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	bfb8      	it	lt
 800841e:	2301      	movlt	r3, #1
 8008420:	2200      	movs	r2, #0
 8008422:	6462      	str	r2, [r4, #68]	; 0x44
 8008424:	2204      	movs	r2, #4
 8008426:	f102 0014 	add.w	r0, r2, #20
 800842a:	4298      	cmp	r0, r3
 800842c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800842e:	d920      	bls.n	8008472 <_dtoa_r+0x2aa>
 8008430:	4620      	mov	r0, r4
 8008432:	f001 f817 	bl	8009464 <_Balloc>
 8008436:	9001      	str	r0, [sp, #4]
 8008438:	2800      	cmp	r0, #0
 800843a:	d13d      	bne.n	80084b8 <_dtoa_r+0x2f0>
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <_dtoa_r+0x2e8>)
 800843e:	4602      	mov	r2, r0
 8008440:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008444:	481b      	ldr	r0, [pc, #108]	; (80084b4 <_dtoa_r+0x2ec>)
 8008446:	f001 fc69 	bl	8009d1c <__assert_func>
 800844a:	2301      	movs	r3, #1
 800844c:	e7de      	b.n	800840c <_dtoa_r+0x244>
 800844e:	2501      	movs	r5, #1
 8008450:	2300      	movs	r3, #0
 8008452:	9306      	str	r3, [sp, #24]
 8008454:	9508      	str	r5, [sp, #32]
 8008456:	f04f 33ff 	mov.w	r3, #4294967295
 800845a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800845e:	2200      	movs	r2, #0
 8008460:	2312      	movs	r3, #18
 8008462:	e7ce      	b.n	8008402 <_dtoa_r+0x23a>
 8008464:	2301      	movs	r3, #1
 8008466:	9308      	str	r3, [sp, #32]
 8008468:	e7f5      	b.n	8008456 <_dtoa_r+0x28e>
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008470:	e7d6      	b.n	8008420 <_dtoa_r+0x258>
 8008472:	3101      	adds	r1, #1
 8008474:	6461      	str	r1, [r4, #68]	; 0x44
 8008476:	0052      	lsls	r2, r2, #1
 8008478:	e7d5      	b.n	8008426 <_dtoa_r+0x25e>
 800847a:	bf00      	nop
 800847c:	f3af 8000 	nop.w
 8008480:	636f4361 	.word	0x636f4361
 8008484:	3fd287a7 	.word	0x3fd287a7
 8008488:	8b60c8b3 	.word	0x8b60c8b3
 800848c:	3fc68a28 	.word	0x3fc68a28
 8008490:	509f79fb 	.word	0x509f79fb
 8008494:	3fd34413 	.word	0x3fd34413
 8008498:	7ff00000 	.word	0x7ff00000
 800849c:	0800b778 	.word	0x0800b778
 80084a0:	0800b77c 	.word	0x0800b77c
 80084a4:	0800b757 	.word	0x0800b757
 80084a8:	3ff80000 	.word	0x3ff80000
 80084ac:	0800b878 	.word	0x0800b878
 80084b0:	0800b785 	.word	0x0800b785
 80084b4:	0800b796 	.word	0x0800b796
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	6423      	str	r3, [r4, #64]	; 0x40
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	2b0e      	cmp	r3, #14
 80084c0:	f200 809d 	bhi.w	80085fe <_dtoa_r+0x436>
 80084c4:	2d00      	cmp	r5, #0
 80084c6:	f000 809a 	beq.w	80085fe <_dtoa_r+0x436>
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	dd32      	ble.n	8008536 <_dtoa_r+0x36e>
 80084d0:	4ab7      	ldr	r2, [pc, #732]	; (80087b0 <_dtoa_r+0x5e8>)
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084de:	9b00      	ldr	r3, [sp, #0]
 80084e0:	05d8      	lsls	r0, r3, #23
 80084e2:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084e6:	d516      	bpl.n	8008516 <_dtoa_r+0x34e>
 80084e8:	4bb2      	ldr	r3, [pc, #712]	; (80087b4 <_dtoa_r+0x5ec>)
 80084ea:	ec51 0b19 	vmov	r0, r1, d9
 80084ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084f2:	f7f8 f9ab 	bl	800084c <__aeabi_ddiv>
 80084f6:	f007 070f 	and.w	r7, r7, #15
 80084fa:	4682      	mov	sl, r0
 80084fc:	468b      	mov	fp, r1
 80084fe:	2503      	movs	r5, #3
 8008500:	4eac      	ldr	r6, [pc, #688]	; (80087b4 <_dtoa_r+0x5ec>)
 8008502:	b957      	cbnz	r7, 800851a <_dtoa_r+0x352>
 8008504:	4642      	mov	r2, r8
 8008506:	464b      	mov	r3, r9
 8008508:	4650      	mov	r0, sl
 800850a:	4659      	mov	r1, fp
 800850c:	f7f8 f99e 	bl	800084c <__aeabi_ddiv>
 8008510:	4682      	mov	sl, r0
 8008512:	468b      	mov	fp, r1
 8008514:	e028      	b.n	8008568 <_dtoa_r+0x3a0>
 8008516:	2502      	movs	r5, #2
 8008518:	e7f2      	b.n	8008500 <_dtoa_r+0x338>
 800851a:	07f9      	lsls	r1, r7, #31
 800851c:	d508      	bpl.n	8008530 <_dtoa_r+0x368>
 800851e:	4640      	mov	r0, r8
 8008520:	4649      	mov	r1, r9
 8008522:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	3501      	adds	r5, #1
 800852c:	4680      	mov	r8, r0
 800852e:	4689      	mov	r9, r1
 8008530:	107f      	asrs	r7, r7, #1
 8008532:	3608      	adds	r6, #8
 8008534:	e7e5      	b.n	8008502 <_dtoa_r+0x33a>
 8008536:	f000 809b 	beq.w	8008670 <_dtoa_r+0x4a8>
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	4f9d      	ldr	r7, [pc, #628]	; (80087b4 <_dtoa_r+0x5ec>)
 800853e:	425e      	negs	r6, r3
 8008540:	4b9b      	ldr	r3, [pc, #620]	; (80087b0 <_dtoa_r+0x5e8>)
 8008542:	f006 020f 	and.w	r2, r6, #15
 8008546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	ec51 0b19 	vmov	r0, r1, d9
 8008552:	f7f8 f851 	bl	80005f8 <__aeabi_dmul>
 8008556:	1136      	asrs	r6, r6, #4
 8008558:	4682      	mov	sl, r0
 800855a:	468b      	mov	fp, r1
 800855c:	2300      	movs	r3, #0
 800855e:	2502      	movs	r5, #2
 8008560:	2e00      	cmp	r6, #0
 8008562:	d17a      	bne.n	800865a <_dtoa_r+0x492>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1d3      	bne.n	8008510 <_dtoa_r+0x348>
 8008568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 8082 	beq.w	8008674 <_dtoa_r+0x4ac>
 8008570:	4b91      	ldr	r3, [pc, #580]	; (80087b8 <_dtoa_r+0x5f0>)
 8008572:	2200      	movs	r2, #0
 8008574:	4650      	mov	r0, sl
 8008576:	4659      	mov	r1, fp
 8008578:	f7f8 fab0 	bl	8000adc <__aeabi_dcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	d079      	beq.n	8008674 <_dtoa_r+0x4ac>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d076      	beq.n	8008674 <_dtoa_r+0x4ac>
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	dd36      	ble.n	80085fa <_dtoa_r+0x432>
 800858c:	9b00      	ldr	r3, [sp, #0]
 800858e:	4650      	mov	r0, sl
 8008590:	4659      	mov	r1, fp
 8008592:	1e5f      	subs	r7, r3, #1
 8008594:	2200      	movs	r2, #0
 8008596:	4b89      	ldr	r3, [pc, #548]	; (80087bc <_dtoa_r+0x5f4>)
 8008598:	f7f8 f82e 	bl	80005f8 <__aeabi_dmul>
 800859c:	9e02      	ldr	r6, [sp, #8]
 800859e:	4682      	mov	sl, r0
 80085a0:	468b      	mov	fp, r1
 80085a2:	3501      	adds	r5, #1
 80085a4:	4628      	mov	r0, r5
 80085a6:	f7f7 ffbd 	bl	8000524 <__aeabi_i2d>
 80085aa:	4652      	mov	r2, sl
 80085ac:	465b      	mov	r3, fp
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	4b83      	ldr	r3, [pc, #524]	; (80087c0 <_dtoa_r+0x5f8>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	f7f7 fe69 	bl	800028c <__adddf3>
 80085ba:	46d0      	mov	r8, sl
 80085bc:	46d9      	mov	r9, fp
 80085be:	4682      	mov	sl, r0
 80085c0:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085c4:	2e00      	cmp	r6, #0
 80085c6:	d158      	bne.n	800867a <_dtoa_r+0x4b2>
 80085c8:	4b7e      	ldr	r3, [pc, #504]	; (80087c4 <_dtoa_r+0x5fc>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	4640      	mov	r0, r8
 80085ce:	4649      	mov	r1, r9
 80085d0:	f7f7 fe5a 	bl	8000288 <__aeabi_dsub>
 80085d4:	4652      	mov	r2, sl
 80085d6:	465b      	mov	r3, fp
 80085d8:	4680      	mov	r8, r0
 80085da:	4689      	mov	r9, r1
 80085dc:	f7f8 fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f040 8296 	bne.w	8008b12 <_dtoa_r+0x94a>
 80085e6:	4652      	mov	r2, sl
 80085e8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085ec:	4640      	mov	r0, r8
 80085ee:	4649      	mov	r1, r9
 80085f0:	f7f8 fa74 	bl	8000adc <__aeabi_dcmplt>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	f040 828a 	bne.w	8008b0e <_dtoa_r+0x946>
 80085fa:	ec5b ab19 	vmov	sl, fp, d9
 80085fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008600:	2b00      	cmp	r3, #0
 8008602:	f2c0 8149 	blt.w	8008898 <_dtoa_r+0x6d0>
 8008606:	9a00      	ldr	r2, [sp, #0]
 8008608:	2a0e      	cmp	r2, #14
 800860a:	f300 8145 	bgt.w	8008898 <_dtoa_r+0x6d0>
 800860e:	4b68      	ldr	r3, [pc, #416]	; (80087b0 <_dtoa_r+0x5e8>)
 8008610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	f280 80d6 	bge.w	80087cc <_dtoa_r+0x604>
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	f300 80d2 	bgt.w	80087cc <_dtoa_r+0x604>
 8008628:	f040 8270 	bne.w	8008b0c <_dtoa_r+0x944>
 800862c:	4b65      	ldr	r3, [pc, #404]	; (80087c4 <_dtoa_r+0x5fc>)
 800862e:	2200      	movs	r2, #0
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	4652      	mov	r2, sl
 800863a:	465b      	mov	r3, fp
 800863c:	f7f8 fa62 	bl	8000b04 <__aeabi_dcmpge>
 8008640:	9e03      	ldr	r6, [sp, #12]
 8008642:	4637      	mov	r7, r6
 8008644:	2800      	cmp	r0, #0
 8008646:	f040 8246 	bne.w	8008ad6 <_dtoa_r+0x90e>
 800864a:	9d01      	ldr	r5, [sp, #4]
 800864c:	2331      	movs	r3, #49	; 0x31
 800864e:	f805 3b01 	strb.w	r3, [r5], #1
 8008652:	9b00      	ldr	r3, [sp, #0]
 8008654:	3301      	adds	r3, #1
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	e241      	b.n	8008ade <_dtoa_r+0x916>
 800865a:	07f2      	lsls	r2, r6, #31
 800865c:	d505      	bpl.n	800866a <_dtoa_r+0x4a2>
 800865e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008662:	f7f7 ffc9 	bl	80005f8 <__aeabi_dmul>
 8008666:	3501      	adds	r5, #1
 8008668:	2301      	movs	r3, #1
 800866a:	1076      	asrs	r6, r6, #1
 800866c:	3708      	adds	r7, #8
 800866e:	e777      	b.n	8008560 <_dtoa_r+0x398>
 8008670:	2502      	movs	r5, #2
 8008672:	e779      	b.n	8008568 <_dtoa_r+0x3a0>
 8008674:	9f00      	ldr	r7, [sp, #0]
 8008676:	9e03      	ldr	r6, [sp, #12]
 8008678:	e794      	b.n	80085a4 <_dtoa_r+0x3dc>
 800867a:	9901      	ldr	r1, [sp, #4]
 800867c:	4b4c      	ldr	r3, [pc, #304]	; (80087b0 <_dtoa_r+0x5e8>)
 800867e:	4431      	add	r1, r6
 8008680:	910d      	str	r1, [sp, #52]	; 0x34
 8008682:	9908      	ldr	r1, [sp, #32]
 8008684:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008688:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800868c:	2900      	cmp	r1, #0
 800868e:	d043      	beq.n	8008718 <_dtoa_r+0x550>
 8008690:	494d      	ldr	r1, [pc, #308]	; (80087c8 <_dtoa_r+0x600>)
 8008692:	2000      	movs	r0, #0
 8008694:	f7f8 f8da 	bl	800084c <__aeabi_ddiv>
 8008698:	4652      	mov	r2, sl
 800869a:	465b      	mov	r3, fp
 800869c:	f7f7 fdf4 	bl	8000288 <__aeabi_dsub>
 80086a0:	9d01      	ldr	r5, [sp, #4]
 80086a2:	4682      	mov	sl, r0
 80086a4:	468b      	mov	fp, r1
 80086a6:	4649      	mov	r1, r9
 80086a8:	4640      	mov	r0, r8
 80086aa:	f7f8 fa55 	bl	8000b58 <__aeabi_d2iz>
 80086ae:	4606      	mov	r6, r0
 80086b0:	f7f7 ff38 	bl	8000524 <__aeabi_i2d>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4640      	mov	r0, r8
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f7 fde4 	bl	8000288 <__aeabi_dsub>
 80086c0:	3630      	adds	r6, #48	; 0x30
 80086c2:	f805 6b01 	strb.w	r6, [r5], #1
 80086c6:	4652      	mov	r2, sl
 80086c8:	465b      	mov	r3, fp
 80086ca:	4680      	mov	r8, r0
 80086cc:	4689      	mov	r9, r1
 80086ce:	f7f8 fa05 	bl	8000adc <__aeabi_dcmplt>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d163      	bne.n	800879e <_dtoa_r+0x5d6>
 80086d6:	4642      	mov	r2, r8
 80086d8:	464b      	mov	r3, r9
 80086da:	4937      	ldr	r1, [pc, #220]	; (80087b8 <_dtoa_r+0x5f0>)
 80086dc:	2000      	movs	r0, #0
 80086de:	f7f7 fdd3 	bl	8000288 <__aeabi_dsub>
 80086e2:	4652      	mov	r2, sl
 80086e4:	465b      	mov	r3, fp
 80086e6:	f7f8 f9f9 	bl	8000adc <__aeabi_dcmplt>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	f040 80b6 	bne.w	800885c <_dtoa_r+0x694>
 80086f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f2:	429d      	cmp	r5, r3
 80086f4:	d081      	beq.n	80085fa <_dtoa_r+0x432>
 80086f6:	4b31      	ldr	r3, [pc, #196]	; (80087bc <_dtoa_r+0x5f4>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	4650      	mov	r0, sl
 80086fc:	4659      	mov	r1, fp
 80086fe:	f7f7 ff7b 	bl	80005f8 <__aeabi_dmul>
 8008702:	4b2e      	ldr	r3, [pc, #184]	; (80087bc <_dtoa_r+0x5f4>)
 8008704:	4682      	mov	sl, r0
 8008706:	468b      	mov	fp, r1
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	2200      	movs	r2, #0
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	4680      	mov	r8, r0
 8008714:	4689      	mov	r9, r1
 8008716:	e7c6      	b.n	80086a6 <_dtoa_r+0x4de>
 8008718:	4650      	mov	r0, sl
 800871a:	4659      	mov	r1, fp
 800871c:	f7f7 ff6c 	bl	80005f8 <__aeabi_dmul>
 8008720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008722:	9d01      	ldr	r5, [sp, #4]
 8008724:	930f      	str	r3, [sp, #60]	; 0x3c
 8008726:	4682      	mov	sl, r0
 8008728:	468b      	mov	fp, r1
 800872a:	4649      	mov	r1, r9
 800872c:	4640      	mov	r0, r8
 800872e:	f7f8 fa13 	bl	8000b58 <__aeabi_d2iz>
 8008732:	4606      	mov	r6, r0
 8008734:	f7f7 fef6 	bl	8000524 <__aeabi_i2d>
 8008738:	3630      	adds	r6, #48	; 0x30
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	f7f7 fda1 	bl	8000288 <__aeabi_dsub>
 8008746:	f805 6b01 	strb.w	r6, [r5], #1
 800874a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800874c:	429d      	cmp	r5, r3
 800874e:	4680      	mov	r8, r0
 8008750:	4689      	mov	r9, r1
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	d124      	bne.n	80087a2 <_dtoa_r+0x5da>
 8008758:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <_dtoa_r+0x600>)
 800875a:	4650      	mov	r0, sl
 800875c:	4659      	mov	r1, fp
 800875e:	f7f7 fd95 	bl	800028c <__adddf3>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f8 f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 800876e:	2800      	cmp	r0, #0
 8008770:	d174      	bne.n	800885c <_dtoa_r+0x694>
 8008772:	4652      	mov	r2, sl
 8008774:	465b      	mov	r3, fp
 8008776:	4914      	ldr	r1, [pc, #80]	; (80087c8 <_dtoa_r+0x600>)
 8008778:	2000      	movs	r0, #0
 800877a:	f7f7 fd85 	bl	8000288 <__aeabi_dsub>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4640      	mov	r0, r8
 8008784:	4649      	mov	r1, r9
 8008786:	f7f8 f9a9 	bl	8000adc <__aeabi_dcmplt>
 800878a:	2800      	cmp	r0, #0
 800878c:	f43f af35 	beq.w	80085fa <_dtoa_r+0x432>
 8008790:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008792:	1e6b      	subs	r3, r5, #1
 8008794:	930f      	str	r3, [sp, #60]	; 0x3c
 8008796:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800879a:	2b30      	cmp	r3, #48	; 0x30
 800879c:	d0f8      	beq.n	8008790 <_dtoa_r+0x5c8>
 800879e:	9700      	str	r7, [sp, #0]
 80087a0:	e04a      	b.n	8008838 <_dtoa_r+0x670>
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <_dtoa_r+0x5f4>)
 80087a4:	f7f7 ff28 	bl	80005f8 <__aeabi_dmul>
 80087a8:	4680      	mov	r8, r0
 80087aa:	4689      	mov	r9, r1
 80087ac:	e7bd      	b.n	800872a <_dtoa_r+0x562>
 80087ae:	bf00      	nop
 80087b0:	0800b878 	.word	0x0800b878
 80087b4:	0800b850 	.word	0x0800b850
 80087b8:	3ff00000 	.word	0x3ff00000
 80087bc:	40240000 	.word	0x40240000
 80087c0:	401c0000 	.word	0x401c0000
 80087c4:	40140000 	.word	0x40140000
 80087c8:	3fe00000 	.word	0x3fe00000
 80087cc:	9d01      	ldr	r5, [sp, #4]
 80087ce:	4656      	mov	r6, sl
 80087d0:	465f      	mov	r7, fp
 80087d2:	4642      	mov	r2, r8
 80087d4:	464b      	mov	r3, r9
 80087d6:	4630      	mov	r0, r6
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f8 f837 	bl	800084c <__aeabi_ddiv>
 80087de:	f7f8 f9bb 	bl	8000b58 <__aeabi_d2iz>
 80087e2:	4682      	mov	sl, r0
 80087e4:	f7f7 fe9e 	bl	8000524 <__aeabi_i2d>
 80087e8:	4642      	mov	r2, r8
 80087ea:	464b      	mov	r3, r9
 80087ec:	f7f7 ff04 	bl	80005f8 <__aeabi_dmul>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4630      	mov	r0, r6
 80087f6:	4639      	mov	r1, r7
 80087f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087fc:	f7f7 fd44 	bl	8000288 <__aeabi_dsub>
 8008800:	f805 6b01 	strb.w	r6, [r5], #1
 8008804:	9e01      	ldr	r6, [sp, #4]
 8008806:	9f03      	ldr	r7, [sp, #12]
 8008808:	1bae      	subs	r6, r5, r6
 800880a:	42b7      	cmp	r7, r6
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	d135      	bne.n	800887e <_dtoa_r+0x6b6>
 8008812:	f7f7 fd3b 	bl	800028c <__adddf3>
 8008816:	4642      	mov	r2, r8
 8008818:	464b      	mov	r3, r9
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	f7f8 f97b 	bl	8000b18 <__aeabi_dcmpgt>
 8008822:	b9d0      	cbnz	r0, 800885a <_dtoa_r+0x692>
 8008824:	4642      	mov	r2, r8
 8008826:	464b      	mov	r3, r9
 8008828:	4630      	mov	r0, r6
 800882a:	4639      	mov	r1, r7
 800882c:	f7f8 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008830:	b110      	cbz	r0, 8008838 <_dtoa_r+0x670>
 8008832:	f01a 0f01 	tst.w	sl, #1
 8008836:	d110      	bne.n	800885a <_dtoa_r+0x692>
 8008838:	4620      	mov	r0, r4
 800883a:	ee18 1a10 	vmov	r1, s16
 800883e:	f000 fe36 	bl	80094ae <_Bfree>
 8008842:	2300      	movs	r3, #0
 8008844:	9800      	ldr	r0, [sp, #0]
 8008846:	702b      	strb	r3, [r5, #0]
 8008848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800884a:	3001      	adds	r0, #1
 800884c:	6018      	str	r0, [r3, #0]
 800884e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008850:	2b00      	cmp	r3, #0
 8008852:	f43f acf2 	beq.w	800823a <_dtoa_r+0x72>
 8008856:	601d      	str	r5, [r3, #0]
 8008858:	e4ef      	b.n	800823a <_dtoa_r+0x72>
 800885a:	9f00      	ldr	r7, [sp, #0]
 800885c:	462b      	mov	r3, r5
 800885e:	461d      	mov	r5, r3
 8008860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008864:	2a39      	cmp	r2, #57	; 0x39
 8008866:	d106      	bne.n	8008876 <_dtoa_r+0x6ae>
 8008868:	9a01      	ldr	r2, [sp, #4]
 800886a:	429a      	cmp	r2, r3
 800886c:	d1f7      	bne.n	800885e <_dtoa_r+0x696>
 800886e:	9901      	ldr	r1, [sp, #4]
 8008870:	2230      	movs	r2, #48	; 0x30
 8008872:	3701      	adds	r7, #1
 8008874:	700a      	strb	r2, [r1, #0]
 8008876:	781a      	ldrb	r2, [r3, #0]
 8008878:	3201      	adds	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	e78f      	b.n	800879e <_dtoa_r+0x5d6>
 800887e:	4ba6      	ldr	r3, [pc, #664]	; (8008b18 <_dtoa_r+0x950>)
 8008880:	2200      	movs	r2, #0
 8008882:	f7f7 feb9 	bl	80005f8 <__aeabi_dmul>
 8008886:	2200      	movs	r2, #0
 8008888:	2300      	movs	r3, #0
 800888a:	4606      	mov	r6, r0
 800888c:	460f      	mov	r7, r1
 800888e:	f7f8 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008892:	2800      	cmp	r0, #0
 8008894:	d09d      	beq.n	80087d2 <_dtoa_r+0x60a>
 8008896:	e7cf      	b.n	8008838 <_dtoa_r+0x670>
 8008898:	9a08      	ldr	r2, [sp, #32]
 800889a:	2a00      	cmp	r2, #0
 800889c:	f000 80d7 	beq.w	8008a4e <_dtoa_r+0x886>
 80088a0:	9a06      	ldr	r2, [sp, #24]
 80088a2:	2a01      	cmp	r2, #1
 80088a4:	f300 80ba 	bgt.w	8008a1c <_dtoa_r+0x854>
 80088a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	f000 80b2 	beq.w	8008a14 <_dtoa_r+0x84c>
 80088b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088b4:	9e07      	ldr	r6, [sp, #28]
 80088b6:	9d04      	ldr	r5, [sp, #16]
 80088b8:	9a04      	ldr	r2, [sp, #16]
 80088ba:	441a      	add	r2, r3
 80088bc:	9204      	str	r2, [sp, #16]
 80088be:	9a05      	ldr	r2, [sp, #20]
 80088c0:	2101      	movs	r1, #1
 80088c2:	441a      	add	r2, r3
 80088c4:	4620      	mov	r0, r4
 80088c6:	9205      	str	r2, [sp, #20]
 80088c8:	f000 fe90 	bl	80095ec <__i2b>
 80088cc:	4607      	mov	r7, r0
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	dd0c      	ble.n	80088ec <_dtoa_r+0x724>
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dd09      	ble.n	80088ec <_dtoa_r+0x724>
 80088d8:	42ab      	cmp	r3, r5
 80088da:	9a04      	ldr	r2, [sp, #16]
 80088dc:	bfa8      	it	ge
 80088de:	462b      	movge	r3, r5
 80088e0:	1ad2      	subs	r2, r2, r3
 80088e2:	9204      	str	r2, [sp, #16]
 80088e4:	9a05      	ldr	r2, [sp, #20]
 80088e6:	1aed      	subs	r5, r5, r3
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	9305      	str	r3, [sp, #20]
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	b31b      	cbz	r3, 8008938 <_dtoa_r+0x770>
 80088f0:	9b08      	ldr	r3, [sp, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 80af 	beq.w	8008a56 <_dtoa_r+0x88e>
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	dd13      	ble.n	8008924 <_dtoa_r+0x75c>
 80088fc:	4639      	mov	r1, r7
 80088fe:	4632      	mov	r2, r6
 8008900:	4620      	mov	r0, r4
 8008902:	f000 ff33 	bl	800976c <__pow5mult>
 8008906:	ee18 2a10 	vmov	r2, s16
 800890a:	4601      	mov	r1, r0
 800890c:	4607      	mov	r7, r0
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fe82 	bl	8009618 <__multiply>
 8008914:	ee18 1a10 	vmov	r1, s16
 8008918:	4680      	mov	r8, r0
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fdc7 	bl	80094ae <_Bfree>
 8008920:	ee08 8a10 	vmov	s16, r8
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	1b9a      	subs	r2, r3, r6
 8008928:	d006      	beq.n	8008938 <_dtoa_r+0x770>
 800892a:	ee18 1a10 	vmov	r1, s16
 800892e:	4620      	mov	r0, r4
 8008930:	f000 ff1c 	bl	800976c <__pow5mult>
 8008934:	ee08 0a10 	vmov	s16, r0
 8008938:	2101      	movs	r1, #1
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fe56 	bl	80095ec <__i2b>
 8008940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	4606      	mov	r6, r0
 8008946:	f340 8088 	ble.w	8008a5a <_dtoa_r+0x892>
 800894a:	461a      	mov	r2, r3
 800894c:	4601      	mov	r1, r0
 800894e:	4620      	mov	r0, r4
 8008950:	f000 ff0c 	bl	800976c <__pow5mult>
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b01      	cmp	r3, #1
 8008958:	4606      	mov	r6, r0
 800895a:	f340 8081 	ble.w	8008a60 <_dtoa_r+0x898>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	6933      	ldr	r3, [r6, #16]
 8008964:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008968:	6918      	ldr	r0, [r3, #16]
 800896a:	f000 fdef 	bl	800954c <__hi0bits>
 800896e:	f1c0 0020 	rsb	r0, r0, #32
 8008972:	9b05      	ldr	r3, [sp, #20]
 8008974:	4418      	add	r0, r3
 8008976:	f010 001f 	ands.w	r0, r0, #31
 800897a:	f000 8092 	beq.w	8008aa2 <_dtoa_r+0x8da>
 800897e:	f1c0 0320 	rsb	r3, r0, #32
 8008982:	2b04      	cmp	r3, #4
 8008984:	f340 808a 	ble.w	8008a9c <_dtoa_r+0x8d4>
 8008988:	f1c0 001c 	rsb	r0, r0, #28
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	4403      	add	r3, r0
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9b05      	ldr	r3, [sp, #20]
 8008994:	4403      	add	r3, r0
 8008996:	4405      	add	r5, r0
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	dd07      	ble.n	80089b0 <_dtoa_r+0x7e8>
 80089a0:	ee18 1a10 	vmov	r1, s16
 80089a4:	461a      	mov	r2, r3
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 ff20 	bl	80097ec <__lshift>
 80089ac:	ee08 0a10 	vmov	s16, r0
 80089b0:	9b05      	ldr	r3, [sp, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd05      	ble.n	80089c2 <_dtoa_r+0x7fa>
 80089b6:	4631      	mov	r1, r6
 80089b8:	461a      	mov	r2, r3
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 ff16 	bl	80097ec <__lshift>
 80089c0:	4606      	mov	r6, r0
 80089c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d06e      	beq.n	8008aa6 <_dtoa_r+0x8de>
 80089c8:	ee18 0a10 	vmov	r0, s16
 80089cc:	4631      	mov	r1, r6
 80089ce:	f000 ff7d 	bl	80098cc <__mcmp>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	da67      	bge.n	8008aa6 <_dtoa_r+0x8de>
 80089d6:	9b00      	ldr	r3, [sp, #0]
 80089d8:	3b01      	subs	r3, #1
 80089da:	ee18 1a10 	vmov	r1, s16
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	220a      	movs	r2, #10
 80089e2:	2300      	movs	r3, #0
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fd6b 	bl	80094c0 <__multadd>
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	ee08 0a10 	vmov	s16, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 81b0 	beq.w	8008d56 <_dtoa_r+0xb8e>
 80089f6:	2300      	movs	r3, #0
 80089f8:	4639      	mov	r1, r7
 80089fa:	220a      	movs	r2, #10
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fd5f 	bl	80094c0 <__multadd>
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	4607      	mov	r7, r0
 8008a08:	f300 808e 	bgt.w	8008b28 <_dtoa_r+0x960>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dc51      	bgt.n	8008ab6 <_dtoa_r+0x8ee>
 8008a12:	e089      	b.n	8008b28 <_dtoa_r+0x960>
 8008a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a1a:	e74b      	b.n	80088b4 <_dtoa_r+0x6ec>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	1e5e      	subs	r6, r3, #1
 8008a20:	9b07      	ldr	r3, [sp, #28]
 8008a22:	42b3      	cmp	r3, r6
 8008a24:	bfbf      	itttt	lt
 8008a26:	9b07      	ldrlt	r3, [sp, #28]
 8008a28:	9607      	strlt	r6, [sp, #28]
 8008a2a:	1af2      	sublt	r2, r6, r3
 8008a2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a2e:	bfb6      	itet	lt
 8008a30:	189b      	addlt	r3, r3, r2
 8008a32:	1b9e      	subge	r6, r3, r6
 8008a34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	bfb8      	it	lt
 8008a3a:	2600      	movlt	r6, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bfb7      	itett	lt
 8008a40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a48:	1a9d      	sublt	r5, r3, r2
 8008a4a:	2300      	movlt	r3, #0
 8008a4c:	e734      	b.n	80088b8 <_dtoa_r+0x6f0>
 8008a4e:	9e07      	ldr	r6, [sp, #28]
 8008a50:	9d04      	ldr	r5, [sp, #16]
 8008a52:	9f08      	ldr	r7, [sp, #32]
 8008a54:	e73b      	b.n	80088ce <_dtoa_r+0x706>
 8008a56:	9a07      	ldr	r2, [sp, #28]
 8008a58:	e767      	b.n	800892a <_dtoa_r+0x762>
 8008a5a:	9b06      	ldr	r3, [sp, #24]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	dc18      	bgt.n	8008a92 <_dtoa_r+0x8ca>
 8008a60:	f1ba 0f00 	cmp.w	sl, #0
 8008a64:	d115      	bne.n	8008a92 <_dtoa_r+0x8ca>
 8008a66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a6a:	b993      	cbnz	r3, 8008a92 <_dtoa_r+0x8ca>
 8008a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a70:	0d1b      	lsrs	r3, r3, #20
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	b183      	cbz	r3, 8008a98 <_dtoa_r+0x8d0>
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	9b05      	ldr	r3, [sp, #20]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	f04f 0801 	mov.w	r8, #1
 8008a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f47f af6a 	bne.w	8008962 <_dtoa_r+0x79a>
 8008a8e:	2001      	movs	r0, #1
 8008a90:	e76f      	b.n	8008972 <_dtoa_r+0x7aa>
 8008a92:	f04f 0800 	mov.w	r8, #0
 8008a96:	e7f6      	b.n	8008a86 <_dtoa_r+0x8be>
 8008a98:	4698      	mov	r8, r3
 8008a9a:	e7f4      	b.n	8008a86 <_dtoa_r+0x8be>
 8008a9c:	f43f af7d 	beq.w	800899a <_dtoa_r+0x7d2>
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	301c      	adds	r0, #28
 8008aa4:	e772      	b.n	800898c <_dtoa_r+0x7c4>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dc37      	bgt.n	8008b1c <_dtoa_r+0x954>
 8008aac:	9b06      	ldr	r3, [sp, #24]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	dd34      	ble.n	8008b1c <_dtoa_r+0x954>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	9302      	str	r3, [sp, #8]
 8008ab6:	9b02      	ldr	r3, [sp, #8]
 8008ab8:	b96b      	cbnz	r3, 8008ad6 <_dtoa_r+0x90e>
 8008aba:	4631      	mov	r1, r6
 8008abc:	2205      	movs	r2, #5
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fcfe 	bl	80094c0 <__multadd>
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	ee18 0a10 	vmov	r0, s16
 8008acc:	f000 fefe 	bl	80098cc <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f73f adba 	bgt.w	800864a <_dtoa_r+0x482>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	9d01      	ldr	r5, [sp, #4]
 8008ada:	43db      	mvns	r3, r3
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 fce2 	bl	80094ae <_Bfree>
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	f43f aea4 	beq.w	8008838 <_dtoa_r+0x670>
 8008af0:	f1b8 0f00 	cmp.w	r8, #0
 8008af4:	d005      	beq.n	8008b02 <_dtoa_r+0x93a>
 8008af6:	45b8      	cmp	r8, r7
 8008af8:	d003      	beq.n	8008b02 <_dtoa_r+0x93a>
 8008afa:	4641      	mov	r1, r8
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 fcd6 	bl	80094ae <_Bfree>
 8008b02:	4639      	mov	r1, r7
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fcd2 	bl	80094ae <_Bfree>
 8008b0a:	e695      	b.n	8008838 <_dtoa_r+0x670>
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	4637      	mov	r7, r6
 8008b10:	e7e1      	b.n	8008ad6 <_dtoa_r+0x90e>
 8008b12:	9700      	str	r7, [sp, #0]
 8008b14:	4637      	mov	r7, r6
 8008b16:	e598      	b.n	800864a <_dtoa_r+0x482>
 8008b18:	40240000 	.word	0x40240000
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80c9 	beq.w	8008cb6 <_dtoa_r+0xaee>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	dd05      	ble.n	8008b38 <_dtoa_r+0x970>
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fe5b 	bl	80097ec <__lshift>
 8008b36:	4607      	mov	r7, r0
 8008b38:	f1b8 0f00 	cmp.w	r8, #0
 8008b3c:	d05a      	beq.n	8008bf4 <_dtoa_r+0xa2c>
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fc8f 	bl	8009464 <_Balloc>
 8008b46:	4605      	mov	r5, r0
 8008b48:	b920      	cbnz	r0, 8008b54 <_dtoa_r+0x98c>
 8008b4a:	4b87      	ldr	r3, [pc, #540]	; (8008d68 <_dtoa_r+0xba0>)
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b52:	e477      	b.n	8008444 <_dtoa_r+0x27c>
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	3202      	adds	r2, #2
 8008b58:	0092      	lsls	r2, r2, #2
 8008b5a:	f107 010c 	add.w	r1, r7, #12
 8008b5e:	300c      	adds	r0, #12
 8008b60:	f7fe f87a 	bl	8006c58 <memcpy>
 8008b64:	2201      	movs	r2, #1
 8008b66:	4629      	mov	r1, r5
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fe3f 	bl	80097ec <__lshift>
 8008b6e:	9b01      	ldr	r3, [sp, #4]
 8008b70:	f103 0901 	add.w	r9, r3, #1
 8008b74:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b78:	4413      	add	r3, r2
 8008b7a:	9305      	str	r3, [sp, #20]
 8008b7c:	f00a 0301 	and.w	r3, sl, #1
 8008b80:	46b8      	mov	r8, r7
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	4607      	mov	r7, r0
 8008b86:	4631      	mov	r1, r6
 8008b88:	ee18 0a10 	vmov	r0, s16
 8008b8c:	f7ff fa90 	bl	80080b0 <quorem>
 8008b90:	4641      	mov	r1, r8
 8008b92:	9002      	str	r0, [sp, #8]
 8008b94:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b98:	ee18 0a10 	vmov	r0, s16
 8008b9c:	f000 fe96 	bl	80098cc <__mcmp>
 8008ba0:	463a      	mov	r2, r7
 8008ba2:	9003      	str	r0, [sp, #12]
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 feac 	bl	8009904 <__mdiff>
 8008bac:	68c2      	ldr	r2, [r0, #12]
 8008bae:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	bb02      	cbnz	r2, 8008bf8 <_dtoa_r+0xa30>
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	ee18 0a10 	vmov	r0, s16
 8008bbc:	f000 fe86 	bl	80098cc <__mcmp>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	9207      	str	r2, [sp, #28]
 8008bc8:	f000 fc71 	bl	80094ae <_Bfree>
 8008bcc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bd0:	ea43 0102 	orr.w	r1, r3, r2
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	464d      	mov	r5, r9
 8008bda:	d10f      	bne.n	8008bfc <_dtoa_r+0xa34>
 8008bdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008be0:	d02a      	beq.n	8008c38 <_dtoa_r+0xa70>
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd02      	ble.n	8008bee <_dtoa_r+0xa26>
 8008be8:	9b02      	ldr	r3, [sp, #8]
 8008bea:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008bee:	f88b a000 	strb.w	sl, [fp]
 8008bf2:	e776      	b.n	8008ae2 <_dtoa_r+0x91a>
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	e7ba      	b.n	8008b6e <_dtoa_r+0x9a6>
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	e7e2      	b.n	8008bc2 <_dtoa_r+0x9fa>
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	db04      	blt.n	8008c0c <_dtoa_r+0xa44>
 8008c02:	9906      	ldr	r1, [sp, #24]
 8008c04:	430b      	orrs	r3, r1
 8008c06:	9904      	ldr	r1, [sp, #16]
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	d122      	bne.n	8008c52 <_dtoa_r+0xa8a>
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	ddee      	ble.n	8008bee <_dtoa_r+0xa26>
 8008c10:	ee18 1a10 	vmov	r1, s16
 8008c14:	2201      	movs	r2, #1
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fde8 	bl	80097ec <__lshift>
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	ee08 0a10 	vmov	s16, r0
 8008c22:	f000 fe53 	bl	80098cc <__mcmp>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	dc03      	bgt.n	8008c32 <_dtoa_r+0xa6a>
 8008c2a:	d1e0      	bne.n	8008bee <_dtoa_r+0xa26>
 8008c2c:	f01a 0f01 	tst.w	sl, #1
 8008c30:	d0dd      	beq.n	8008bee <_dtoa_r+0xa26>
 8008c32:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c36:	d1d7      	bne.n	8008be8 <_dtoa_r+0xa20>
 8008c38:	2339      	movs	r3, #57	; 0x39
 8008c3a:	f88b 3000 	strb.w	r3, [fp]
 8008c3e:	462b      	mov	r3, r5
 8008c40:	461d      	mov	r5, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c48:	2a39      	cmp	r2, #57	; 0x39
 8008c4a:	d071      	beq.n	8008d30 <_dtoa_r+0xb68>
 8008c4c:	3201      	adds	r2, #1
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	e747      	b.n	8008ae2 <_dtoa_r+0x91a>
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	dd07      	ble.n	8008c66 <_dtoa_r+0xa9e>
 8008c56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c5a:	d0ed      	beq.n	8008c38 <_dtoa_r+0xa70>
 8008c5c:	f10a 0301 	add.w	r3, sl, #1
 8008c60:	f88b 3000 	strb.w	r3, [fp]
 8008c64:	e73d      	b.n	8008ae2 <_dtoa_r+0x91a>
 8008c66:	9b05      	ldr	r3, [sp, #20]
 8008c68:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c6c:	4599      	cmp	r9, r3
 8008c6e:	d047      	beq.n	8008d00 <_dtoa_r+0xb38>
 8008c70:	ee18 1a10 	vmov	r1, s16
 8008c74:	2300      	movs	r3, #0
 8008c76:	220a      	movs	r2, #10
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fc21 	bl	80094c0 <__multadd>
 8008c7e:	45b8      	cmp	r8, r7
 8008c80:	ee08 0a10 	vmov	s16, r0
 8008c84:	f04f 0300 	mov.w	r3, #0
 8008c88:	f04f 020a 	mov.w	r2, #10
 8008c8c:	4641      	mov	r1, r8
 8008c8e:	4620      	mov	r0, r4
 8008c90:	d106      	bne.n	8008ca0 <_dtoa_r+0xad8>
 8008c92:	f000 fc15 	bl	80094c0 <__multadd>
 8008c96:	4680      	mov	r8, r0
 8008c98:	4607      	mov	r7, r0
 8008c9a:	f109 0901 	add.w	r9, r9, #1
 8008c9e:	e772      	b.n	8008b86 <_dtoa_r+0x9be>
 8008ca0:	f000 fc0e 	bl	80094c0 <__multadd>
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	220a      	movs	r2, #10
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 fc07 	bl	80094c0 <__multadd>
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	e7f1      	b.n	8008c9a <_dtoa_r+0xad2>
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	9d01      	ldr	r5, [sp, #4]
 8008cbc:	ee18 0a10 	vmov	r0, s16
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	f7ff f9f5 	bl	80080b0 <quorem>
 8008cc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	f805 ab01 	strb.w	sl, [r5], #1
 8008cd0:	1aea      	subs	r2, r5, r3
 8008cd2:	9b02      	ldr	r3, [sp, #8]
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	dd09      	ble.n	8008cec <_dtoa_r+0xb24>
 8008cd8:	ee18 1a10 	vmov	r1, s16
 8008cdc:	2300      	movs	r3, #0
 8008cde:	220a      	movs	r2, #10
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fbed 	bl	80094c0 <__multadd>
 8008ce6:	ee08 0a10 	vmov	s16, r0
 8008cea:	e7e7      	b.n	8008cbc <_dtoa_r+0xaf4>
 8008cec:	9b02      	ldr	r3, [sp, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfc8      	it	gt
 8008cf2:	461d      	movgt	r5, r3
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	bfd8      	it	le
 8008cf8:	2501      	movle	r5, #1
 8008cfa:	441d      	add	r5, r3
 8008cfc:	f04f 0800 	mov.w	r8, #0
 8008d00:	ee18 1a10 	vmov	r1, s16
 8008d04:	2201      	movs	r2, #1
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fd70 	bl	80097ec <__lshift>
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	ee08 0a10 	vmov	s16, r0
 8008d12:	f000 fddb 	bl	80098cc <__mcmp>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	dc91      	bgt.n	8008c3e <_dtoa_r+0xa76>
 8008d1a:	d102      	bne.n	8008d22 <_dtoa_r+0xb5a>
 8008d1c:	f01a 0f01 	tst.w	sl, #1
 8008d20:	d18d      	bne.n	8008c3e <_dtoa_r+0xa76>
 8008d22:	462b      	mov	r3, r5
 8008d24:	461d      	mov	r5, r3
 8008d26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d2a:	2a30      	cmp	r2, #48	; 0x30
 8008d2c:	d0fa      	beq.n	8008d24 <_dtoa_r+0xb5c>
 8008d2e:	e6d8      	b.n	8008ae2 <_dtoa_r+0x91a>
 8008d30:	9a01      	ldr	r2, [sp, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d184      	bne.n	8008c40 <_dtoa_r+0xa78>
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2331      	movs	r3, #49	; 0x31
 8008d3e:	7013      	strb	r3, [r2, #0]
 8008d40:	e6cf      	b.n	8008ae2 <_dtoa_r+0x91a>
 8008d42:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <_dtoa_r+0xba4>)
 8008d44:	f7ff ba97 	b.w	8008276 <_dtoa_r+0xae>
 8008d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f47f aa7b 	bne.w	8008246 <_dtoa_r+0x7e>
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <_dtoa_r+0xba8>)
 8008d52:	f7ff ba90 	b.w	8008276 <_dtoa_r+0xae>
 8008d56:	9b02      	ldr	r3, [sp, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	dcae      	bgt.n	8008cba <_dtoa_r+0xaf2>
 8008d5c:	9b06      	ldr	r3, [sp, #24]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	f73f aea9 	bgt.w	8008ab6 <_dtoa_r+0x8ee>
 8008d64:	e7a9      	b.n	8008cba <_dtoa_r+0xaf2>
 8008d66:	bf00      	nop
 8008d68:	0800b785 	.word	0x0800b785
 8008d6c:	0800b756 	.word	0x0800b756
 8008d70:	0800b77c 	.word	0x0800b77c

08008d74 <__libc_fini_array>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d07      	ldr	r5, [pc, #28]	; (8008d94 <__libc_fini_array+0x20>)
 8008d78:	4c07      	ldr	r4, [pc, #28]	; (8008d98 <__libc_fini_array+0x24>)
 8008d7a:	1b64      	subs	r4, r4, r5
 8008d7c:	10a4      	asrs	r4, r4, #2
 8008d7e:	b91c      	cbnz	r4, 8008d88 <__libc_fini_array+0x14>
 8008d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d84:	f002 bc8e 	b.w	800b6a4 <_fini>
 8008d88:	3c01      	subs	r4, #1
 8008d8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008d8e:	4798      	blx	r3
 8008d90:	e7f5      	b.n	8008d7e <__libc_fini_array+0xa>
 8008d92:	bf00      	nop
 8008d94:	0800bac4 	.word	0x0800bac4
 8008d98:	0800bac8 	.word	0x0800bac8

08008d9c <_malloc_trim_r>:
 8008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	4606      	mov	r6, r0
 8008da2:	2008      	movs	r0, #8
 8008da4:	460c      	mov	r4, r1
 8008da6:	f000 ff69 	bl	8009c7c <sysconf>
 8008daa:	4f23      	ldr	r7, [pc, #140]	; (8008e38 <_malloc_trim_r+0x9c>)
 8008dac:	4680      	mov	r8, r0
 8008dae:	4630      	mov	r0, r6
 8008db0:	f000 fb4c 	bl	800944c <__malloc_lock>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	685d      	ldr	r5, [r3, #4]
 8008db8:	f025 0503 	bic.w	r5, r5, #3
 8008dbc:	1b2c      	subs	r4, r5, r4
 8008dbe:	3c11      	subs	r4, #17
 8008dc0:	4444      	add	r4, r8
 8008dc2:	fbb4 f4f8 	udiv	r4, r4, r8
 8008dc6:	3c01      	subs	r4, #1
 8008dc8:	fb08 f404 	mul.w	r4, r8, r4
 8008dcc:	45a0      	cmp	r8, r4
 8008dce:	dd05      	ble.n	8008ddc <_malloc_trim_r+0x40>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 fb41 	bl	8009458 <__malloc_unlock>
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4630      	mov	r0, r6
 8008de0:	f000 feae 	bl	8009b40 <_sbrk_r>
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	442b      	add	r3, r5
 8008de8:	4298      	cmp	r0, r3
 8008dea:	d1f1      	bne.n	8008dd0 <_malloc_trim_r+0x34>
 8008dec:	4261      	negs	r1, r4
 8008dee:	4630      	mov	r0, r6
 8008df0:	f000 fea6 	bl	8009b40 <_sbrk_r>
 8008df4:	3001      	adds	r0, #1
 8008df6:	d110      	bne.n	8008e1a <_malloc_trim_r+0x7e>
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f000 fea0 	bl	8009b40 <_sbrk_r>
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	1a83      	subs	r3, r0, r2
 8008e04:	2b0f      	cmp	r3, #15
 8008e06:	dde3      	ble.n	8008dd0 <_malloc_trim_r+0x34>
 8008e08:	490c      	ldr	r1, [pc, #48]	; (8008e3c <_malloc_trim_r+0xa0>)
 8008e0a:	6809      	ldr	r1, [r1, #0]
 8008e0c:	1a40      	subs	r0, r0, r1
 8008e0e:	490c      	ldr	r1, [pc, #48]	; (8008e40 <_malloc_trim_r+0xa4>)
 8008e10:	f043 0301 	orr.w	r3, r3, #1
 8008e14:	6008      	str	r0, [r1, #0]
 8008e16:	6053      	str	r3, [r2, #4]
 8008e18:	e7da      	b.n	8008dd0 <_malloc_trim_r+0x34>
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <_malloc_trim_r+0xa4>)
 8008e1e:	1b2d      	subs	r5, r5, r4
 8008e20:	f045 0501 	orr.w	r5, r5, #1
 8008e24:	605d      	str	r5, [r3, #4]
 8008e26:	6813      	ldr	r3, [r2, #0]
 8008e28:	4630      	mov	r0, r6
 8008e2a:	1b1b      	subs	r3, r3, r4
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	f000 fb13 	bl	8009458 <__malloc_unlock>
 8008e32:	2001      	movs	r0, #1
 8008e34:	e7d0      	b.n	8008dd8 <_malloc_trim_r+0x3c>
 8008e36:	bf00      	nop
 8008e38:	20000454 	.word	0x20000454
 8008e3c:	2000085c 	.word	0x2000085c
 8008e40:	20000ea4 	.word	0x20000ea4

08008e44 <_free_r>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	4605      	mov	r5, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	f000 80b1 	beq.w	8008fb2 <_free_r+0x16e>
 8008e50:	f000 fafc 	bl	800944c <__malloc_lock>
 8008e54:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008e58:	4856      	ldr	r0, [pc, #344]	; (8008fb4 <_free_r+0x170>)
 8008e5a:	f022 0401 	bic.w	r4, r2, #1
 8008e5e:	f1a7 0308 	sub.w	r3, r7, #8
 8008e62:	eb03 0c04 	add.w	ip, r3, r4
 8008e66:	6881      	ldr	r1, [r0, #8]
 8008e68:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008e6c:	4561      	cmp	r1, ip
 8008e6e:	f026 0603 	bic.w	r6, r6, #3
 8008e72:	f002 0201 	and.w	r2, r2, #1
 8008e76:	d11b      	bne.n	8008eb0 <_free_r+0x6c>
 8008e78:	4434      	add	r4, r6
 8008e7a:	b93a      	cbnz	r2, 8008e8c <_free_r+0x48>
 8008e7c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8008e80:	1a9b      	subs	r3, r3, r2
 8008e82:	4414      	add	r4, r2
 8008e84:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8008e88:	60ca      	str	r2, [r1, #12]
 8008e8a:	6091      	str	r1, [r2, #8]
 8008e8c:	f044 0201 	orr.w	r2, r4, #1
 8008e90:	605a      	str	r2, [r3, #4]
 8008e92:	6083      	str	r3, [r0, #8]
 8008e94:	4b48      	ldr	r3, [pc, #288]	; (8008fb8 <_free_r+0x174>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	d804      	bhi.n	8008ea6 <_free_r+0x62>
 8008e9c:	4b47      	ldr	r3, [pc, #284]	; (8008fbc <_free_r+0x178>)
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	6819      	ldr	r1, [r3, #0]
 8008ea2:	f7ff ff7b 	bl	8008d9c <_malloc_trim_r>
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008eac:	f000 bad4 	b.w	8009458 <__malloc_unlock>
 8008eb0:	f8cc 6004 	str.w	r6, [ip, #4]
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	d138      	bne.n	8008f2a <_free_r+0xe6>
 8008eb8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008ebc:	1a5b      	subs	r3, r3, r1
 8008ebe:	440c      	add	r4, r1
 8008ec0:	6899      	ldr	r1, [r3, #8]
 8008ec2:	f100 0708 	add.w	r7, r0, #8
 8008ec6:	42b9      	cmp	r1, r7
 8008ec8:	d031      	beq.n	8008f2e <_free_r+0xea>
 8008eca:	68df      	ldr	r7, [r3, #12]
 8008ecc:	60cf      	str	r7, [r1, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	eb0c 0106 	add.w	r1, ip, r6
 8008ed4:	6849      	ldr	r1, [r1, #4]
 8008ed6:	07c9      	lsls	r1, r1, #31
 8008ed8:	d40b      	bmi.n	8008ef2 <_free_r+0xae>
 8008eda:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008ede:	4434      	add	r4, r6
 8008ee0:	bb3a      	cbnz	r2, 8008f32 <_free_r+0xee>
 8008ee2:	4e37      	ldr	r6, [pc, #220]	; (8008fc0 <_free_r+0x17c>)
 8008ee4:	42b1      	cmp	r1, r6
 8008ee6:	d124      	bne.n	8008f32 <_free_r+0xee>
 8008ee8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eec:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f044 0101 	orr.w	r1, r4, #1
 8008ef6:	6059      	str	r1, [r3, #4]
 8008ef8:	511c      	str	r4, [r3, r4]
 8008efa:	2a00      	cmp	r2, #0
 8008efc:	d1d3      	bne.n	8008ea6 <_free_r+0x62>
 8008efe:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8008f02:	d21b      	bcs.n	8008f3c <_free_r+0xf8>
 8008f04:	0961      	lsrs	r1, r4, #5
 8008f06:	08e2      	lsrs	r2, r4, #3
 8008f08:	2401      	movs	r4, #1
 8008f0a:	408c      	lsls	r4, r1
 8008f0c:	6841      	ldr	r1, [r0, #4]
 8008f0e:	3201      	adds	r2, #1
 8008f10:	430c      	orrs	r4, r1
 8008f12:	6044      	str	r4, [r0, #4]
 8008f14:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008f18:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008f1c:	3908      	subs	r1, #8
 8008f1e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8008f22:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8008f26:	60e3      	str	r3, [r4, #12]
 8008f28:	e7bd      	b.n	8008ea6 <_free_r+0x62>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	e7d0      	b.n	8008ed0 <_free_r+0x8c>
 8008f2e:	2201      	movs	r2, #1
 8008f30:	e7ce      	b.n	8008ed0 <_free_r+0x8c>
 8008f32:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8008f36:	60ce      	str	r6, [r1, #12]
 8008f38:	60b1      	str	r1, [r6, #8]
 8008f3a:	e7da      	b.n	8008ef2 <_free_r+0xae>
 8008f3c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8008f40:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8008f44:	d214      	bcs.n	8008f70 <_free_r+0x12c>
 8008f46:	09a2      	lsrs	r2, r4, #6
 8008f48:	3238      	adds	r2, #56	; 0x38
 8008f4a:	1c51      	adds	r1, r2, #1
 8008f4c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008f50:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8008f54:	428e      	cmp	r6, r1
 8008f56:	d125      	bne.n	8008fa4 <_free_r+0x160>
 8008f58:	2401      	movs	r4, #1
 8008f5a:	1092      	asrs	r2, r2, #2
 8008f5c:	fa04 f202 	lsl.w	r2, r4, r2
 8008f60:	6844      	ldr	r4, [r0, #4]
 8008f62:	4322      	orrs	r2, r4
 8008f64:	6042      	str	r2, [r0, #4]
 8008f66:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8008f6a:	60b3      	str	r3, [r6, #8]
 8008f6c:	60cb      	str	r3, [r1, #12]
 8008f6e:	e79a      	b.n	8008ea6 <_free_r+0x62>
 8008f70:	2a14      	cmp	r2, #20
 8008f72:	d801      	bhi.n	8008f78 <_free_r+0x134>
 8008f74:	325b      	adds	r2, #91	; 0x5b
 8008f76:	e7e8      	b.n	8008f4a <_free_r+0x106>
 8008f78:	2a54      	cmp	r2, #84	; 0x54
 8008f7a:	d802      	bhi.n	8008f82 <_free_r+0x13e>
 8008f7c:	0b22      	lsrs	r2, r4, #12
 8008f7e:	326e      	adds	r2, #110	; 0x6e
 8008f80:	e7e3      	b.n	8008f4a <_free_r+0x106>
 8008f82:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008f86:	d802      	bhi.n	8008f8e <_free_r+0x14a>
 8008f88:	0be2      	lsrs	r2, r4, #15
 8008f8a:	3277      	adds	r2, #119	; 0x77
 8008f8c:	e7dd      	b.n	8008f4a <_free_r+0x106>
 8008f8e:	f240 5154 	movw	r1, #1364	; 0x554
 8008f92:	428a      	cmp	r2, r1
 8008f94:	bf9a      	itte	ls
 8008f96:	0ca2      	lsrls	r2, r4, #18
 8008f98:	327c      	addls	r2, #124	; 0x7c
 8008f9a:	227e      	movhi	r2, #126	; 0x7e
 8008f9c:	e7d5      	b.n	8008f4a <_free_r+0x106>
 8008f9e:	6889      	ldr	r1, [r1, #8]
 8008fa0:	428e      	cmp	r6, r1
 8008fa2:	d004      	beq.n	8008fae <_free_r+0x16a>
 8008fa4:	684a      	ldr	r2, [r1, #4]
 8008fa6:	f022 0203 	bic.w	r2, r2, #3
 8008faa:	42a2      	cmp	r2, r4
 8008fac:	d8f7      	bhi.n	8008f9e <_free_r+0x15a>
 8008fae:	68ce      	ldr	r6, [r1, #12]
 8008fb0:	e7d9      	b.n	8008f66 <_free_r+0x122>
 8008fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb4:	20000454 	.word	0x20000454
 8008fb8:	20000860 	.word	0x20000860
 8008fbc:	20000ed4 	.word	0x20000ed4
 8008fc0:	2000045c 	.word	0x2000045c

08008fc4 <_localeconv_r>:
 8008fc4:	4800      	ldr	r0, [pc, #0]	; (8008fc8 <_localeconv_r+0x4>)
 8008fc6:	4770      	bx	lr
 8008fc8:	20000954 	.word	0x20000954

08008fcc <__retarget_lock_init_recursive>:
 8008fcc:	4770      	bx	lr

08008fce <__retarget_lock_close_recursive>:
 8008fce:	4770      	bx	lr

08008fd0 <__retarget_lock_acquire_recursive>:
 8008fd0:	4770      	bx	lr

08008fd2 <__retarget_lock_release_recursive>:
 8008fd2:	4770      	bx	lr

08008fd4 <_malloc_r>:
 8008fd4:	f101 030b 	add.w	r3, r1, #11
 8008fd8:	2b16      	cmp	r3, #22
 8008fda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fde:	4605      	mov	r5, r0
 8008fe0:	d906      	bls.n	8008ff0 <_malloc_r+0x1c>
 8008fe2:	f033 0707 	bics.w	r7, r3, #7
 8008fe6:	d504      	bpl.n	8008ff2 <_malloc_r+0x1e>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	2400      	movs	r4, #0
 8008fee:	e1a5      	b.n	800933c <_malloc_r+0x368>
 8008ff0:	2710      	movs	r7, #16
 8008ff2:	42b9      	cmp	r1, r7
 8008ff4:	d8f8      	bhi.n	8008fe8 <_malloc_r+0x14>
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 fa28 	bl	800944c <__malloc_lock>
 8008ffc:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009000:	4eb0      	ldr	r6, [pc, #704]	; (80092c4 <_malloc_r+0x2f0>)
 8009002:	d237      	bcs.n	8009074 <_malloc_r+0xa0>
 8009004:	f107 0208 	add.w	r2, r7, #8
 8009008:	4432      	add	r2, r6
 800900a:	f1a2 0108 	sub.w	r1, r2, #8
 800900e:	6854      	ldr	r4, [r2, #4]
 8009010:	428c      	cmp	r4, r1
 8009012:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8009016:	d102      	bne.n	800901e <_malloc_r+0x4a>
 8009018:	68d4      	ldr	r4, [r2, #12]
 800901a:	42a2      	cmp	r2, r4
 800901c:	d010      	beq.n	8009040 <_malloc_r+0x6c>
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009024:	f023 0303 	bic.w	r3, r3, #3
 8009028:	60ca      	str	r2, [r1, #12]
 800902a:	4423      	add	r3, r4
 800902c:	6091      	str	r1, [r2, #8]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	f042 0201 	orr.w	r2, r2, #1
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fa0e 	bl	8009458 <__malloc_unlock>
 800903c:	3408      	adds	r4, #8
 800903e:	e17d      	b.n	800933c <_malloc_r+0x368>
 8009040:	3302      	adds	r3, #2
 8009042:	6934      	ldr	r4, [r6, #16]
 8009044:	49a0      	ldr	r1, [pc, #640]	; (80092c8 <_malloc_r+0x2f4>)
 8009046:	428c      	cmp	r4, r1
 8009048:	d077      	beq.n	800913a <_malloc_r+0x166>
 800904a:	6862      	ldr	r2, [r4, #4]
 800904c:	f022 0c03 	bic.w	ip, r2, #3
 8009050:	ebac 0007 	sub.w	r0, ip, r7
 8009054:	280f      	cmp	r0, #15
 8009056:	dd48      	ble.n	80090ea <_malloc_r+0x116>
 8009058:	19e2      	adds	r2, r4, r7
 800905a:	f040 0301 	orr.w	r3, r0, #1
 800905e:	f047 0701 	orr.w	r7, r7, #1
 8009062:	6067      	str	r7, [r4, #4]
 8009064:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009068:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800906c:	6053      	str	r3, [r2, #4]
 800906e:	f844 000c 	str.w	r0, [r4, ip]
 8009072:	e7e0      	b.n	8009036 <_malloc_r+0x62>
 8009074:	0a7b      	lsrs	r3, r7, #9
 8009076:	d02a      	beq.n	80090ce <_malloc_r+0xfa>
 8009078:	2b04      	cmp	r3, #4
 800907a:	d812      	bhi.n	80090a2 <_malloc_r+0xce>
 800907c:	09bb      	lsrs	r3, r7, #6
 800907e:	3338      	adds	r3, #56	; 0x38
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8009086:	f1a2 0c08 	sub.w	ip, r2, #8
 800908a:	6854      	ldr	r4, [r2, #4]
 800908c:	4564      	cmp	r4, ip
 800908e:	d006      	beq.n	800909e <_malloc_r+0xca>
 8009090:	6862      	ldr	r2, [r4, #4]
 8009092:	f022 0203 	bic.w	r2, r2, #3
 8009096:	1bd0      	subs	r0, r2, r7
 8009098:	280f      	cmp	r0, #15
 800909a:	dd1c      	ble.n	80090d6 <_malloc_r+0x102>
 800909c:	3b01      	subs	r3, #1
 800909e:	3301      	adds	r3, #1
 80090a0:	e7cf      	b.n	8009042 <_malloc_r+0x6e>
 80090a2:	2b14      	cmp	r3, #20
 80090a4:	d801      	bhi.n	80090aa <_malloc_r+0xd6>
 80090a6:	335b      	adds	r3, #91	; 0x5b
 80090a8:	e7ea      	b.n	8009080 <_malloc_r+0xac>
 80090aa:	2b54      	cmp	r3, #84	; 0x54
 80090ac:	d802      	bhi.n	80090b4 <_malloc_r+0xe0>
 80090ae:	0b3b      	lsrs	r3, r7, #12
 80090b0:	336e      	adds	r3, #110	; 0x6e
 80090b2:	e7e5      	b.n	8009080 <_malloc_r+0xac>
 80090b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80090b8:	d802      	bhi.n	80090c0 <_malloc_r+0xec>
 80090ba:	0bfb      	lsrs	r3, r7, #15
 80090bc:	3377      	adds	r3, #119	; 0x77
 80090be:	e7df      	b.n	8009080 <_malloc_r+0xac>
 80090c0:	f240 5254 	movw	r2, #1364	; 0x554
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d804      	bhi.n	80090d2 <_malloc_r+0xfe>
 80090c8:	0cbb      	lsrs	r3, r7, #18
 80090ca:	337c      	adds	r3, #124	; 0x7c
 80090cc:	e7d8      	b.n	8009080 <_malloc_r+0xac>
 80090ce:	233f      	movs	r3, #63	; 0x3f
 80090d0:	e7d6      	b.n	8009080 <_malloc_r+0xac>
 80090d2:	237e      	movs	r3, #126	; 0x7e
 80090d4:	e7d4      	b.n	8009080 <_malloc_r+0xac>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	68e1      	ldr	r1, [r4, #12]
 80090da:	db04      	blt.n	80090e6 <_malloc_r+0x112>
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	60d9      	str	r1, [r3, #12]
 80090e0:	608b      	str	r3, [r1, #8]
 80090e2:	18a3      	adds	r3, r4, r2
 80090e4:	e7a3      	b.n	800902e <_malloc_r+0x5a>
 80090e6:	460c      	mov	r4, r1
 80090e8:	e7d0      	b.n	800908c <_malloc_r+0xb8>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80090f0:	db07      	blt.n	8009102 <_malloc_r+0x12e>
 80090f2:	44a4      	add	ip, r4
 80090f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80090f8:	f043 0301 	orr.w	r3, r3, #1
 80090fc:	f8cc 3004 	str.w	r3, [ip, #4]
 8009100:	e799      	b.n	8009036 <_malloc_r+0x62>
 8009102:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009106:	6870      	ldr	r0, [r6, #4]
 8009108:	f080 8096 	bcs.w	8009238 <_malloc_r+0x264>
 800910c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009110:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009114:	f04f 0c01 	mov.w	ip, #1
 8009118:	3201      	adds	r2, #1
 800911a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800911e:	ea4c 0000 	orr.w	r0, ip, r0
 8009122:	6070      	str	r0, [r6, #4]
 8009124:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009128:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800912c:	3808      	subs	r0, #8
 800912e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009132:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8009136:	f8cc 400c 	str.w	r4, [ip, #12]
 800913a:	2001      	movs	r0, #1
 800913c:	109a      	asrs	r2, r3, #2
 800913e:	fa00 f202 	lsl.w	r2, r0, r2
 8009142:	6870      	ldr	r0, [r6, #4]
 8009144:	4290      	cmp	r0, r2
 8009146:	d326      	bcc.n	8009196 <_malloc_r+0x1c2>
 8009148:	4210      	tst	r0, r2
 800914a:	d106      	bne.n	800915a <_malloc_r+0x186>
 800914c:	f023 0303 	bic.w	r3, r3, #3
 8009150:	0052      	lsls	r2, r2, #1
 8009152:	4210      	tst	r0, r2
 8009154:	f103 0304 	add.w	r3, r3, #4
 8009158:	d0fa      	beq.n	8009150 <_malloc_r+0x17c>
 800915a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800915e:	46c1      	mov	r9, r8
 8009160:	469e      	mov	lr, r3
 8009162:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009166:	454c      	cmp	r4, r9
 8009168:	f040 80ba 	bne.w	80092e0 <_malloc_r+0x30c>
 800916c:	f10e 0e01 	add.w	lr, lr, #1
 8009170:	f01e 0f03 	tst.w	lr, #3
 8009174:	f109 0908 	add.w	r9, r9, #8
 8009178:	d1f3      	bne.n	8009162 <_malloc_r+0x18e>
 800917a:	0798      	lsls	r0, r3, #30
 800917c:	f040 80e4 	bne.w	8009348 <_malloc_r+0x374>
 8009180:	6873      	ldr	r3, [r6, #4]
 8009182:	ea23 0302 	bic.w	r3, r3, r2
 8009186:	6073      	str	r3, [r6, #4]
 8009188:	6870      	ldr	r0, [r6, #4]
 800918a:	0052      	lsls	r2, r2, #1
 800918c:	4290      	cmp	r0, r2
 800918e:	d302      	bcc.n	8009196 <_malloc_r+0x1c2>
 8009190:	2a00      	cmp	r2, #0
 8009192:	f040 80e6 	bne.w	8009362 <_malloc_r+0x38e>
 8009196:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800919a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800919e:	f023 0903 	bic.w	r9, r3, #3
 80091a2:	45b9      	cmp	r9, r7
 80091a4:	d304      	bcc.n	80091b0 <_malloc_r+0x1dc>
 80091a6:	eba9 0207 	sub.w	r2, r9, r7
 80091aa:	2a0f      	cmp	r2, #15
 80091ac:	f300 8142 	bgt.w	8009434 <_malloc_r+0x460>
 80091b0:	4b46      	ldr	r3, [pc, #280]	; (80092cc <_malloc_r+0x2f8>)
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	3110      	adds	r1, #16
 80091b6:	4439      	add	r1, r7
 80091b8:	2008      	movs	r0, #8
 80091ba:	9101      	str	r1, [sp, #4]
 80091bc:	f000 fd5e 	bl	8009c7c <sysconf>
 80091c0:	4a43      	ldr	r2, [pc, #268]	; (80092d0 <_malloc_r+0x2fc>)
 80091c2:	9901      	ldr	r1, [sp, #4]
 80091c4:	6813      	ldr	r3, [r2, #0]
 80091c6:	3301      	adds	r3, #1
 80091c8:	bf1f      	itttt	ne
 80091ca:	f101 31ff 	addne.w	r1, r1, #4294967295
 80091ce:	1809      	addne	r1, r1, r0
 80091d0:	4243      	negne	r3, r0
 80091d2:	4019      	andne	r1, r3
 80091d4:	4680      	mov	r8, r0
 80091d6:	4628      	mov	r0, r5
 80091d8:	9101      	str	r1, [sp, #4]
 80091da:	f000 fcb1 	bl	8009b40 <_sbrk_r>
 80091de:	1c42      	adds	r2, r0, #1
 80091e0:	eb0a 0b09 	add.w	fp, sl, r9
 80091e4:	4604      	mov	r4, r0
 80091e6:	f000 80f8 	beq.w	80093da <_malloc_r+0x406>
 80091ea:	4583      	cmp	fp, r0
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	4a38      	ldr	r2, [pc, #224]	; (80092d0 <_malloc_r+0x2fc>)
 80091f0:	d902      	bls.n	80091f8 <_malloc_r+0x224>
 80091f2:	45b2      	cmp	sl, r6
 80091f4:	f040 80f1 	bne.w	80093da <_malloc_r+0x406>
 80091f8:	4b36      	ldr	r3, [pc, #216]	; (80092d4 <_malloc_r+0x300>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	45a3      	cmp	fp, r4
 80091fe:	eb00 0e01 	add.w	lr, r0, r1
 8009202:	f8c3 e000 	str.w	lr, [r3]
 8009206:	f108 3cff 	add.w	ip, r8, #4294967295
 800920a:	f040 80ac 	bne.w	8009366 <_malloc_r+0x392>
 800920e:	ea1b 0f0c 	tst.w	fp, ip
 8009212:	f040 80a8 	bne.w	8009366 <_malloc_r+0x392>
 8009216:	68b2      	ldr	r2, [r6, #8]
 8009218:	4449      	add	r1, r9
 800921a:	f041 0101 	orr.w	r1, r1, #1
 800921e:	6051      	str	r1, [r2, #4]
 8009220:	4a2d      	ldr	r2, [pc, #180]	; (80092d8 <_malloc_r+0x304>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6811      	ldr	r1, [r2, #0]
 8009226:	428b      	cmp	r3, r1
 8009228:	bf88      	it	hi
 800922a:	6013      	strhi	r3, [r2, #0]
 800922c:	4a2b      	ldr	r2, [pc, #172]	; (80092dc <_malloc_r+0x308>)
 800922e:	6811      	ldr	r1, [r2, #0]
 8009230:	428b      	cmp	r3, r1
 8009232:	bf88      	it	hi
 8009234:	6013      	strhi	r3, [r2, #0]
 8009236:	e0d0      	b.n	80093da <_malloc_r+0x406>
 8009238:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800923c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009240:	d218      	bcs.n	8009274 <_malloc_r+0x2a0>
 8009242:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009246:	3238      	adds	r2, #56	; 0x38
 8009248:	f102 0e01 	add.w	lr, r2, #1
 800924c:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009250:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009254:	45f0      	cmp	r8, lr
 8009256:	d12b      	bne.n	80092b0 <_malloc_r+0x2dc>
 8009258:	1092      	asrs	r2, r2, #2
 800925a:	f04f 0c01 	mov.w	ip, #1
 800925e:	fa0c f202 	lsl.w	r2, ip, r2
 8009262:	4310      	orrs	r0, r2
 8009264:	6070      	str	r0, [r6, #4]
 8009266:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800926a:	f8c8 4008 	str.w	r4, [r8, #8]
 800926e:	f8ce 400c 	str.w	r4, [lr, #12]
 8009272:	e762      	b.n	800913a <_malloc_r+0x166>
 8009274:	2a14      	cmp	r2, #20
 8009276:	d801      	bhi.n	800927c <_malloc_r+0x2a8>
 8009278:	325b      	adds	r2, #91	; 0x5b
 800927a:	e7e5      	b.n	8009248 <_malloc_r+0x274>
 800927c:	2a54      	cmp	r2, #84	; 0x54
 800927e:	d803      	bhi.n	8009288 <_malloc_r+0x2b4>
 8009280:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009284:	326e      	adds	r2, #110	; 0x6e
 8009286:	e7df      	b.n	8009248 <_malloc_r+0x274>
 8009288:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800928c:	d803      	bhi.n	8009296 <_malloc_r+0x2c2>
 800928e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009292:	3277      	adds	r2, #119	; 0x77
 8009294:	e7d8      	b.n	8009248 <_malloc_r+0x274>
 8009296:	f240 5e54 	movw	lr, #1364	; 0x554
 800929a:	4572      	cmp	r2, lr
 800929c:	bf9a      	itte	ls
 800929e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80092a2:	327c      	addls	r2, #124	; 0x7c
 80092a4:	227e      	movhi	r2, #126	; 0x7e
 80092a6:	e7cf      	b.n	8009248 <_malloc_r+0x274>
 80092a8:	f8de e008 	ldr.w	lr, [lr, #8]
 80092ac:	45f0      	cmp	r8, lr
 80092ae:	d005      	beq.n	80092bc <_malloc_r+0x2e8>
 80092b0:	f8de 2004 	ldr.w	r2, [lr, #4]
 80092b4:	f022 0203 	bic.w	r2, r2, #3
 80092b8:	4562      	cmp	r2, ip
 80092ba:	d8f5      	bhi.n	80092a8 <_malloc_r+0x2d4>
 80092bc:	f8de 800c 	ldr.w	r8, [lr, #12]
 80092c0:	e7d1      	b.n	8009266 <_malloc_r+0x292>
 80092c2:	bf00      	nop
 80092c4:	20000454 	.word	0x20000454
 80092c8:	2000045c 	.word	0x2000045c
 80092cc:	20000ed4 	.word	0x20000ed4
 80092d0:	2000085c 	.word	0x2000085c
 80092d4:	20000ea4 	.word	0x20000ea4
 80092d8:	20000ecc 	.word	0x20000ecc
 80092dc:	20000ed0 	.word	0x20000ed0
 80092e0:	6860      	ldr	r0, [r4, #4]
 80092e2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80092e6:	f020 0003 	bic.w	r0, r0, #3
 80092ea:	eba0 0a07 	sub.w	sl, r0, r7
 80092ee:	f1ba 0f0f 	cmp.w	sl, #15
 80092f2:	dd12      	ble.n	800931a <_malloc_r+0x346>
 80092f4:	68a3      	ldr	r3, [r4, #8]
 80092f6:	19e2      	adds	r2, r4, r7
 80092f8:	f047 0701 	orr.w	r7, r7, #1
 80092fc:	6067      	str	r7, [r4, #4]
 80092fe:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009302:	f8cc 3008 	str.w	r3, [ip, #8]
 8009306:	f04a 0301 	orr.w	r3, sl, #1
 800930a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800930e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009312:	6053      	str	r3, [r2, #4]
 8009314:	f844 a000 	str.w	sl, [r4, r0]
 8009318:	e68d      	b.n	8009036 <_malloc_r+0x62>
 800931a:	f1ba 0f00 	cmp.w	sl, #0
 800931e:	db11      	blt.n	8009344 <_malloc_r+0x370>
 8009320:	4420      	add	r0, r4
 8009322:	6843      	ldr	r3, [r0, #4]
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	6043      	str	r3, [r0, #4]
 800932a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800932e:	4628      	mov	r0, r5
 8009330:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009334:	f8cc 3008 	str.w	r3, [ip, #8]
 8009338:	f000 f88e 	bl	8009458 <__malloc_unlock>
 800933c:	4620      	mov	r0, r4
 800933e:	b003      	add	sp, #12
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	4664      	mov	r4, ip
 8009346:	e70e      	b.n	8009166 <_malloc_r+0x192>
 8009348:	f858 0908 	ldr.w	r0, [r8], #-8
 800934c:	4540      	cmp	r0, r8
 800934e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009352:	f43f af12 	beq.w	800917a <_malloc_r+0x1a6>
 8009356:	e717      	b.n	8009188 <_malloc_r+0x1b4>
 8009358:	3304      	adds	r3, #4
 800935a:	0052      	lsls	r2, r2, #1
 800935c:	4210      	tst	r0, r2
 800935e:	d0fb      	beq.n	8009358 <_malloc_r+0x384>
 8009360:	e6fb      	b.n	800915a <_malloc_r+0x186>
 8009362:	4673      	mov	r3, lr
 8009364:	e7fa      	b.n	800935c <_malloc_r+0x388>
 8009366:	6810      	ldr	r0, [r2, #0]
 8009368:	3001      	adds	r0, #1
 800936a:	bf1b      	ittet	ne
 800936c:	eba4 0b0b 	subne.w	fp, r4, fp
 8009370:	eb0b 020e 	addne.w	r2, fp, lr
 8009374:	6014      	streq	r4, [r2, #0]
 8009376:	601a      	strne	r2, [r3, #0]
 8009378:	f014 0b07 	ands.w	fp, r4, #7
 800937c:	bf1a      	itte	ne
 800937e:	f1cb 0008 	rsbne	r0, fp, #8
 8009382:	1824      	addne	r4, r4, r0
 8009384:	4658      	moveq	r0, fp
 8009386:	1862      	adds	r2, r4, r1
 8009388:	ea02 010c 	and.w	r1, r2, ip
 800938c:	4480      	add	r8, r0
 800938e:	eba8 0801 	sub.w	r8, r8, r1
 8009392:	ea08 080c 	and.w	r8, r8, ip
 8009396:	4641      	mov	r1, r8
 8009398:	4628      	mov	r0, r5
 800939a:	9201      	str	r2, [sp, #4]
 800939c:	f000 fbd0 	bl	8009b40 <_sbrk_r>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	9a01      	ldr	r2, [sp, #4]
 80093a4:	4b28      	ldr	r3, [pc, #160]	; (8009448 <_malloc_r+0x474>)
 80093a6:	d107      	bne.n	80093b8 <_malloc_r+0x3e4>
 80093a8:	f1bb 0f00 	cmp.w	fp, #0
 80093ac:	d023      	beq.n	80093f6 <_malloc_r+0x422>
 80093ae:	f1ab 0008 	sub.w	r0, fp, #8
 80093b2:	4410      	add	r0, r2
 80093b4:	f04f 0800 	mov.w	r8, #0
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	60b4      	str	r4, [r6, #8]
 80093bc:	1b00      	subs	r0, r0, r4
 80093be:	4440      	add	r0, r8
 80093c0:	4442      	add	r2, r8
 80093c2:	f040 0001 	orr.w	r0, r0, #1
 80093c6:	45b2      	cmp	sl, r6
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	6060      	str	r0, [r4, #4]
 80093cc:	f43f af28 	beq.w	8009220 <_malloc_r+0x24c>
 80093d0:	f1b9 0f0f 	cmp.w	r9, #15
 80093d4:	d812      	bhi.n	80093fc <_malloc_r+0x428>
 80093d6:	2301      	movs	r3, #1
 80093d8:	6063      	str	r3, [r4, #4]
 80093da:	68b3      	ldr	r3, [r6, #8]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	42bb      	cmp	r3, r7
 80093e4:	eba3 0207 	sub.w	r2, r3, r7
 80093e8:	d301      	bcc.n	80093ee <_malloc_r+0x41a>
 80093ea:	2a0f      	cmp	r2, #15
 80093ec:	dc22      	bgt.n	8009434 <_malloc_r+0x460>
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f832 	bl	8009458 <__malloc_unlock>
 80093f4:	e5fa      	b.n	8008fec <_malloc_r+0x18>
 80093f6:	4610      	mov	r0, r2
 80093f8:	46d8      	mov	r8, fp
 80093fa:	e7dd      	b.n	80093b8 <_malloc_r+0x3e4>
 80093fc:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009400:	f1a9 090c 	sub.w	r9, r9, #12
 8009404:	f029 0907 	bic.w	r9, r9, #7
 8009408:	f002 0201 	and.w	r2, r2, #1
 800940c:	ea42 0209 	orr.w	r2, r2, r9
 8009410:	f8ca 2004 	str.w	r2, [sl, #4]
 8009414:	2105      	movs	r1, #5
 8009416:	eb0a 0209 	add.w	r2, sl, r9
 800941a:	f1b9 0f0f 	cmp.w	r9, #15
 800941e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009422:	f67f aefd 	bls.w	8009220 <_malloc_r+0x24c>
 8009426:	f10a 0108 	add.w	r1, sl, #8
 800942a:	4628      	mov	r0, r5
 800942c:	f7ff fd0a 	bl	8008e44 <_free_r>
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <_malloc_r+0x474>)
 8009432:	e6f5      	b.n	8009220 <_malloc_r+0x24c>
 8009434:	68b4      	ldr	r4, [r6, #8]
 8009436:	f047 0301 	orr.w	r3, r7, #1
 800943a:	4427      	add	r7, r4
 800943c:	f042 0201 	orr.w	r2, r2, #1
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	60b7      	str	r7, [r6, #8]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	e5f6      	b.n	8009036 <_malloc_r+0x62>
 8009448:	20000ea4 	.word	0x20000ea4

0800944c <__malloc_lock>:
 800944c:	4801      	ldr	r0, [pc, #4]	; (8009454 <__malloc_lock+0x8>)
 800944e:	f7ff bdbf 	b.w	8008fd0 <__retarget_lock_acquire_recursive>
 8009452:	bf00      	nop
 8009454:	20000ea1 	.word	0x20000ea1

08009458 <__malloc_unlock>:
 8009458:	4801      	ldr	r0, [pc, #4]	; (8009460 <__malloc_unlock+0x8>)
 800945a:	f7ff bdba 	b.w	8008fd2 <__retarget_lock_release_recursive>
 800945e:	bf00      	nop
 8009460:	20000ea1 	.word	0x20000ea1

08009464 <_Balloc>:
 8009464:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009466:	b570      	push	{r4, r5, r6, lr}
 8009468:	4605      	mov	r5, r0
 800946a:	460c      	mov	r4, r1
 800946c:	b17b      	cbz	r3, 800948e <_Balloc+0x2a>
 800946e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009470:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009474:	b9a0      	cbnz	r0, 80094a0 <_Balloc+0x3c>
 8009476:	2101      	movs	r1, #1
 8009478:	fa01 f604 	lsl.w	r6, r1, r4
 800947c:	1d72      	adds	r2, r6, #5
 800947e:	0092      	lsls	r2, r2, #2
 8009480:	4628      	mov	r0, r5
 8009482:	f000 fc69 	bl	8009d58 <_calloc_r>
 8009486:	b148      	cbz	r0, 800949c <_Balloc+0x38>
 8009488:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800948c:	e00b      	b.n	80094a6 <_Balloc+0x42>
 800948e:	2221      	movs	r2, #33	; 0x21
 8009490:	2104      	movs	r1, #4
 8009492:	f000 fc61 	bl	8009d58 <_calloc_r>
 8009496:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009498:	2800      	cmp	r0, #0
 800949a:	d1e8      	bne.n	800946e <_Balloc+0xa>
 800949c:	2000      	movs	r0, #0
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	6802      	ldr	r2, [r0, #0]
 80094a2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80094a6:	2300      	movs	r3, #0
 80094a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094ac:	e7f7      	b.n	800949e <_Balloc+0x3a>

080094ae <_Bfree>:
 80094ae:	b131      	cbz	r1, 80094be <_Bfree+0x10>
 80094b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80094b2:	684a      	ldr	r2, [r1, #4]
 80094b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80094b8:	6008      	str	r0, [r1, #0]
 80094ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80094be:	4770      	bx	lr

080094c0 <__multadd>:
 80094c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c4:	690d      	ldr	r5, [r1, #16]
 80094c6:	4607      	mov	r7, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	461e      	mov	r6, r3
 80094cc:	f101 0c14 	add.w	ip, r1, #20
 80094d0:	2000      	movs	r0, #0
 80094d2:	f8dc 3000 	ldr.w	r3, [ip]
 80094d6:	b299      	uxth	r1, r3
 80094d8:	fb02 6101 	mla	r1, r2, r1, r6
 80094dc:	0c1e      	lsrs	r6, r3, #16
 80094de:	0c0b      	lsrs	r3, r1, #16
 80094e0:	fb02 3306 	mla	r3, r2, r6, r3
 80094e4:	b289      	uxth	r1, r1
 80094e6:	3001      	adds	r0, #1
 80094e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094ec:	4285      	cmp	r5, r0
 80094ee:	f84c 1b04 	str.w	r1, [ip], #4
 80094f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094f6:	dcec      	bgt.n	80094d2 <__multadd+0x12>
 80094f8:	b30e      	cbz	r6, 800953e <__multadd+0x7e>
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	42ab      	cmp	r3, r5
 80094fe:	dc19      	bgt.n	8009534 <__multadd+0x74>
 8009500:	6861      	ldr	r1, [r4, #4]
 8009502:	4638      	mov	r0, r7
 8009504:	3101      	adds	r1, #1
 8009506:	f7ff ffad 	bl	8009464 <_Balloc>
 800950a:	4680      	mov	r8, r0
 800950c:	b928      	cbnz	r0, 800951a <__multadd+0x5a>
 800950e:	4602      	mov	r2, r0
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <__multadd+0x84>)
 8009512:	480d      	ldr	r0, [pc, #52]	; (8009548 <__multadd+0x88>)
 8009514:	21b5      	movs	r1, #181	; 0xb5
 8009516:	f000 fc01 	bl	8009d1c <__assert_func>
 800951a:	6922      	ldr	r2, [r4, #16]
 800951c:	3202      	adds	r2, #2
 800951e:	f104 010c 	add.w	r1, r4, #12
 8009522:	0092      	lsls	r2, r2, #2
 8009524:	300c      	adds	r0, #12
 8009526:	f7fd fb97 	bl	8006c58 <memcpy>
 800952a:	4621      	mov	r1, r4
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff ffbe 	bl	80094ae <_Bfree>
 8009532:	4644      	mov	r4, r8
 8009534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009538:	3501      	adds	r5, #1
 800953a:	615e      	str	r6, [r3, #20]
 800953c:	6125      	str	r5, [r4, #16]
 800953e:	4620      	mov	r0, r4
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	0800b785 	.word	0x0800b785
 8009548:	0800b7f1 	.word	0x0800b7f1

0800954c <__hi0bits>:
 800954c:	0c03      	lsrs	r3, r0, #16
 800954e:	041b      	lsls	r3, r3, #16
 8009550:	b9d3      	cbnz	r3, 8009588 <__hi0bits+0x3c>
 8009552:	0400      	lsls	r0, r0, #16
 8009554:	2310      	movs	r3, #16
 8009556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800955a:	bf04      	itt	eq
 800955c:	0200      	lsleq	r0, r0, #8
 800955e:	3308      	addeq	r3, #8
 8009560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009564:	bf04      	itt	eq
 8009566:	0100      	lsleq	r0, r0, #4
 8009568:	3304      	addeq	r3, #4
 800956a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800956e:	bf04      	itt	eq
 8009570:	0080      	lsleq	r0, r0, #2
 8009572:	3302      	addeq	r3, #2
 8009574:	2800      	cmp	r0, #0
 8009576:	db05      	blt.n	8009584 <__hi0bits+0x38>
 8009578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800957c:	f103 0301 	add.w	r3, r3, #1
 8009580:	bf08      	it	eq
 8009582:	2320      	moveq	r3, #32
 8009584:	4618      	mov	r0, r3
 8009586:	4770      	bx	lr
 8009588:	2300      	movs	r3, #0
 800958a:	e7e4      	b.n	8009556 <__hi0bits+0xa>

0800958c <__lo0bits>:
 800958c:	6803      	ldr	r3, [r0, #0]
 800958e:	f013 0207 	ands.w	r2, r3, #7
 8009592:	4601      	mov	r1, r0
 8009594:	d00b      	beq.n	80095ae <__lo0bits+0x22>
 8009596:	07da      	lsls	r2, r3, #31
 8009598:	d423      	bmi.n	80095e2 <__lo0bits+0x56>
 800959a:	0798      	lsls	r0, r3, #30
 800959c:	bf49      	itett	mi
 800959e:	085b      	lsrmi	r3, r3, #1
 80095a0:	089b      	lsrpl	r3, r3, #2
 80095a2:	2001      	movmi	r0, #1
 80095a4:	600b      	strmi	r3, [r1, #0]
 80095a6:	bf5c      	itt	pl
 80095a8:	600b      	strpl	r3, [r1, #0]
 80095aa:	2002      	movpl	r0, #2
 80095ac:	4770      	bx	lr
 80095ae:	b298      	uxth	r0, r3
 80095b0:	b9a8      	cbnz	r0, 80095de <__lo0bits+0x52>
 80095b2:	0c1b      	lsrs	r3, r3, #16
 80095b4:	2010      	movs	r0, #16
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	b90a      	cbnz	r2, 80095be <__lo0bits+0x32>
 80095ba:	3008      	adds	r0, #8
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	071a      	lsls	r2, r3, #28
 80095c0:	bf04      	itt	eq
 80095c2:	091b      	lsreq	r3, r3, #4
 80095c4:	3004      	addeq	r0, #4
 80095c6:	079a      	lsls	r2, r3, #30
 80095c8:	bf04      	itt	eq
 80095ca:	089b      	lsreq	r3, r3, #2
 80095cc:	3002      	addeq	r0, #2
 80095ce:	07da      	lsls	r2, r3, #31
 80095d0:	d403      	bmi.n	80095da <__lo0bits+0x4e>
 80095d2:	085b      	lsrs	r3, r3, #1
 80095d4:	f100 0001 	add.w	r0, r0, #1
 80095d8:	d005      	beq.n	80095e6 <__lo0bits+0x5a>
 80095da:	600b      	str	r3, [r1, #0]
 80095dc:	4770      	bx	lr
 80095de:	4610      	mov	r0, r2
 80095e0:	e7e9      	b.n	80095b6 <__lo0bits+0x2a>
 80095e2:	2000      	movs	r0, #0
 80095e4:	4770      	bx	lr
 80095e6:	2020      	movs	r0, #32
 80095e8:	4770      	bx	lr
	...

080095ec <__i2b>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	460c      	mov	r4, r1
 80095f0:	2101      	movs	r1, #1
 80095f2:	f7ff ff37 	bl	8009464 <_Balloc>
 80095f6:	4602      	mov	r2, r0
 80095f8:	b928      	cbnz	r0, 8009606 <__i2b+0x1a>
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <__i2b+0x24>)
 80095fc:	4805      	ldr	r0, [pc, #20]	; (8009614 <__i2b+0x28>)
 80095fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009602:	f000 fb8b 	bl	8009d1c <__assert_func>
 8009606:	2301      	movs	r3, #1
 8009608:	6144      	str	r4, [r0, #20]
 800960a:	6103      	str	r3, [r0, #16]
 800960c:	bd10      	pop	{r4, pc}
 800960e:	bf00      	nop
 8009610:	0800b785 	.word	0x0800b785
 8009614:	0800b7f1 	.word	0x0800b7f1

08009618 <__multiply>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	4691      	mov	r9, r2
 800961e:	690a      	ldr	r2, [r1, #16]
 8009620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009624:	429a      	cmp	r2, r3
 8009626:	bfb8      	it	lt
 8009628:	460b      	movlt	r3, r1
 800962a:	460c      	mov	r4, r1
 800962c:	bfbc      	itt	lt
 800962e:	464c      	movlt	r4, r9
 8009630:	4699      	movlt	r9, r3
 8009632:	6927      	ldr	r7, [r4, #16]
 8009634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009638:	68a3      	ldr	r3, [r4, #8]
 800963a:	6861      	ldr	r1, [r4, #4]
 800963c:	eb07 060a 	add.w	r6, r7, sl
 8009640:	42b3      	cmp	r3, r6
 8009642:	b085      	sub	sp, #20
 8009644:	bfb8      	it	lt
 8009646:	3101      	addlt	r1, #1
 8009648:	f7ff ff0c 	bl	8009464 <_Balloc>
 800964c:	b930      	cbnz	r0, 800965c <__multiply+0x44>
 800964e:	4602      	mov	r2, r0
 8009650:	4b44      	ldr	r3, [pc, #272]	; (8009764 <__multiply+0x14c>)
 8009652:	4845      	ldr	r0, [pc, #276]	; (8009768 <__multiply+0x150>)
 8009654:	f240 115d 	movw	r1, #349	; 0x15d
 8009658:	f000 fb60 	bl	8009d1c <__assert_func>
 800965c:	f100 0514 	add.w	r5, r0, #20
 8009660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009664:	462b      	mov	r3, r5
 8009666:	2200      	movs	r2, #0
 8009668:	4543      	cmp	r3, r8
 800966a:	d321      	bcc.n	80096b0 <__multiply+0x98>
 800966c:	f104 0314 	add.w	r3, r4, #20
 8009670:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009674:	f109 0314 	add.w	r3, r9, #20
 8009678:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800967c:	9202      	str	r2, [sp, #8]
 800967e:	1b3a      	subs	r2, r7, r4
 8009680:	3a15      	subs	r2, #21
 8009682:	f022 0203 	bic.w	r2, r2, #3
 8009686:	3204      	adds	r2, #4
 8009688:	f104 0115 	add.w	r1, r4, #21
 800968c:	428f      	cmp	r7, r1
 800968e:	bf38      	it	cc
 8009690:	2204      	movcc	r2, #4
 8009692:	9201      	str	r2, [sp, #4]
 8009694:	9a02      	ldr	r2, [sp, #8]
 8009696:	9303      	str	r3, [sp, #12]
 8009698:	429a      	cmp	r2, r3
 800969a:	d80c      	bhi.n	80096b6 <__multiply+0x9e>
 800969c:	2e00      	cmp	r6, #0
 800969e:	dd03      	ble.n	80096a8 <__multiply+0x90>
 80096a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d05a      	beq.n	800975e <__multiply+0x146>
 80096a8:	6106      	str	r6, [r0, #16]
 80096aa:	b005      	add	sp, #20
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b0:	f843 2b04 	str.w	r2, [r3], #4
 80096b4:	e7d8      	b.n	8009668 <__multiply+0x50>
 80096b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80096ba:	f1ba 0f00 	cmp.w	sl, #0
 80096be:	d024      	beq.n	800970a <__multiply+0xf2>
 80096c0:	f104 0e14 	add.w	lr, r4, #20
 80096c4:	46a9      	mov	r9, r5
 80096c6:	f04f 0c00 	mov.w	ip, #0
 80096ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096ce:	f8d9 1000 	ldr.w	r1, [r9]
 80096d2:	fa1f fb82 	uxth.w	fp, r2
 80096d6:	b289      	uxth	r1, r1
 80096d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80096dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096e0:	f8d9 2000 	ldr.w	r2, [r9]
 80096e4:	4461      	add	r1, ip
 80096e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80096ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096f2:	b289      	uxth	r1, r1
 80096f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096f8:	4577      	cmp	r7, lr
 80096fa:	f849 1b04 	str.w	r1, [r9], #4
 80096fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009702:	d8e2      	bhi.n	80096ca <__multiply+0xb2>
 8009704:	9a01      	ldr	r2, [sp, #4]
 8009706:	f845 c002 	str.w	ip, [r5, r2]
 800970a:	9a03      	ldr	r2, [sp, #12]
 800970c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009710:	3304      	adds	r3, #4
 8009712:	f1b9 0f00 	cmp.w	r9, #0
 8009716:	d020      	beq.n	800975a <__multiply+0x142>
 8009718:	6829      	ldr	r1, [r5, #0]
 800971a:	f104 0c14 	add.w	ip, r4, #20
 800971e:	46ae      	mov	lr, r5
 8009720:	f04f 0a00 	mov.w	sl, #0
 8009724:	f8bc b000 	ldrh.w	fp, [ip]
 8009728:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800972c:	fb09 220b 	mla	r2, r9, fp, r2
 8009730:	4492      	add	sl, r2
 8009732:	b289      	uxth	r1, r1
 8009734:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009738:	f84e 1b04 	str.w	r1, [lr], #4
 800973c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009740:	f8be 1000 	ldrh.w	r1, [lr]
 8009744:	0c12      	lsrs	r2, r2, #16
 8009746:	fb09 1102 	mla	r1, r9, r2, r1
 800974a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800974e:	4567      	cmp	r7, ip
 8009750:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009754:	d8e6      	bhi.n	8009724 <__multiply+0x10c>
 8009756:	9a01      	ldr	r2, [sp, #4]
 8009758:	50a9      	str	r1, [r5, r2]
 800975a:	3504      	adds	r5, #4
 800975c:	e79a      	b.n	8009694 <__multiply+0x7c>
 800975e:	3e01      	subs	r6, #1
 8009760:	e79c      	b.n	800969c <__multiply+0x84>
 8009762:	bf00      	nop
 8009764:	0800b785 	.word	0x0800b785
 8009768:	0800b7f1 	.word	0x0800b7f1

0800976c <__pow5mult>:
 800976c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009770:	4615      	mov	r5, r2
 8009772:	f012 0203 	ands.w	r2, r2, #3
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	d007      	beq.n	800978c <__pow5mult+0x20>
 800977c:	4c1a      	ldr	r4, [pc, #104]	; (80097e8 <__pow5mult+0x7c>)
 800977e:	3a01      	subs	r2, #1
 8009780:	2300      	movs	r3, #0
 8009782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009786:	f7ff fe9b 	bl	80094c0 <__multadd>
 800978a:	4607      	mov	r7, r0
 800978c:	10ad      	asrs	r5, r5, #2
 800978e:	d027      	beq.n	80097e0 <__pow5mult+0x74>
 8009790:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8009792:	b944      	cbnz	r4, 80097a6 <__pow5mult+0x3a>
 8009794:	f240 2171 	movw	r1, #625	; 0x271
 8009798:	4630      	mov	r0, r6
 800979a:	f7ff ff27 	bl	80095ec <__i2b>
 800979e:	2300      	movs	r3, #0
 80097a0:	64b0      	str	r0, [r6, #72]	; 0x48
 80097a2:	4604      	mov	r4, r0
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	f04f 0900 	mov.w	r9, #0
 80097aa:	07eb      	lsls	r3, r5, #31
 80097ac:	d50a      	bpl.n	80097c4 <__pow5mult+0x58>
 80097ae:	4639      	mov	r1, r7
 80097b0:	4622      	mov	r2, r4
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff ff30 	bl	8009618 <__multiply>
 80097b8:	4639      	mov	r1, r7
 80097ba:	4680      	mov	r8, r0
 80097bc:	4630      	mov	r0, r6
 80097be:	f7ff fe76 	bl	80094ae <_Bfree>
 80097c2:	4647      	mov	r7, r8
 80097c4:	106d      	asrs	r5, r5, #1
 80097c6:	d00b      	beq.n	80097e0 <__pow5mult+0x74>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	b938      	cbnz	r0, 80097dc <__pow5mult+0x70>
 80097cc:	4622      	mov	r2, r4
 80097ce:	4621      	mov	r1, r4
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7ff ff21 	bl	8009618 <__multiply>
 80097d6:	6020      	str	r0, [r4, #0]
 80097d8:	f8c0 9000 	str.w	r9, [r0]
 80097dc:	4604      	mov	r4, r0
 80097de:	e7e4      	b.n	80097aa <__pow5mult+0x3e>
 80097e0:	4638      	mov	r0, r7
 80097e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097e6:	bf00      	nop
 80097e8:	0800b940 	.word	0x0800b940

080097ec <__lshift>:
 80097ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f0:	460c      	mov	r4, r1
 80097f2:	6849      	ldr	r1, [r1, #4]
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	4607      	mov	r7, r0
 80097fe:	4691      	mov	r9, r2
 8009800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009804:	f108 0601 	add.w	r6, r8, #1
 8009808:	42b3      	cmp	r3, r6
 800980a:	db0b      	blt.n	8009824 <__lshift+0x38>
 800980c:	4638      	mov	r0, r7
 800980e:	f7ff fe29 	bl	8009464 <_Balloc>
 8009812:	4605      	mov	r5, r0
 8009814:	b948      	cbnz	r0, 800982a <__lshift+0x3e>
 8009816:	4602      	mov	r2, r0
 8009818:	4b2a      	ldr	r3, [pc, #168]	; (80098c4 <__lshift+0xd8>)
 800981a:	482b      	ldr	r0, [pc, #172]	; (80098c8 <__lshift+0xdc>)
 800981c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009820:	f000 fa7c 	bl	8009d1c <__assert_func>
 8009824:	3101      	adds	r1, #1
 8009826:	005b      	lsls	r3, r3, #1
 8009828:	e7ee      	b.n	8009808 <__lshift+0x1c>
 800982a:	2300      	movs	r3, #0
 800982c:	f100 0114 	add.w	r1, r0, #20
 8009830:	f100 0210 	add.w	r2, r0, #16
 8009834:	4618      	mov	r0, r3
 8009836:	4553      	cmp	r3, sl
 8009838:	db37      	blt.n	80098aa <__lshift+0xbe>
 800983a:	6920      	ldr	r0, [r4, #16]
 800983c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009840:	f104 0314 	add.w	r3, r4, #20
 8009844:	f019 091f 	ands.w	r9, r9, #31
 8009848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800984c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009850:	d02f      	beq.n	80098b2 <__lshift+0xc6>
 8009852:	f1c9 0e20 	rsb	lr, r9, #32
 8009856:	468a      	mov	sl, r1
 8009858:	f04f 0c00 	mov.w	ip, #0
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	fa02 f209 	lsl.w	r2, r2, r9
 8009862:	ea42 020c 	orr.w	r2, r2, ip
 8009866:	f84a 2b04 	str.w	r2, [sl], #4
 800986a:	f853 2b04 	ldr.w	r2, [r3], #4
 800986e:	4298      	cmp	r0, r3
 8009870:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009874:	d8f2      	bhi.n	800985c <__lshift+0x70>
 8009876:	1b03      	subs	r3, r0, r4
 8009878:	3b15      	subs	r3, #21
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	3304      	adds	r3, #4
 8009880:	f104 0215 	add.w	r2, r4, #21
 8009884:	4290      	cmp	r0, r2
 8009886:	bf38      	it	cc
 8009888:	2304      	movcc	r3, #4
 800988a:	f841 c003 	str.w	ip, [r1, r3]
 800988e:	f1bc 0f00 	cmp.w	ip, #0
 8009892:	d001      	beq.n	8009898 <__lshift+0xac>
 8009894:	f108 0602 	add.w	r6, r8, #2
 8009898:	3e01      	subs	r6, #1
 800989a:	4638      	mov	r0, r7
 800989c:	612e      	str	r6, [r5, #16]
 800989e:	4621      	mov	r1, r4
 80098a0:	f7ff fe05 	bl	80094ae <_Bfree>
 80098a4:	4628      	mov	r0, r5
 80098a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ae:	3301      	adds	r3, #1
 80098b0:	e7c1      	b.n	8009836 <__lshift+0x4a>
 80098b2:	3904      	subs	r1, #4
 80098b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098bc:	4298      	cmp	r0, r3
 80098be:	d8f9      	bhi.n	80098b4 <__lshift+0xc8>
 80098c0:	e7ea      	b.n	8009898 <__lshift+0xac>
 80098c2:	bf00      	nop
 80098c4:	0800b785 	.word	0x0800b785
 80098c8:	0800b7f1 	.word	0x0800b7f1

080098cc <__mcmp>:
 80098cc:	b530      	push	{r4, r5, lr}
 80098ce:	6902      	ldr	r2, [r0, #16]
 80098d0:	690c      	ldr	r4, [r1, #16]
 80098d2:	1b12      	subs	r2, r2, r4
 80098d4:	d10e      	bne.n	80098f4 <__mcmp+0x28>
 80098d6:	f100 0314 	add.w	r3, r0, #20
 80098da:	3114      	adds	r1, #20
 80098dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098ec:	42a5      	cmp	r5, r4
 80098ee:	d003      	beq.n	80098f8 <__mcmp+0x2c>
 80098f0:	d305      	bcc.n	80098fe <__mcmp+0x32>
 80098f2:	2201      	movs	r2, #1
 80098f4:	4610      	mov	r0, r2
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	4283      	cmp	r3, r0
 80098fa:	d3f3      	bcc.n	80098e4 <__mcmp+0x18>
 80098fc:	e7fa      	b.n	80098f4 <__mcmp+0x28>
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	e7f7      	b.n	80098f4 <__mcmp+0x28>

08009904 <__mdiff>:
 8009904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	460c      	mov	r4, r1
 800990a:	4606      	mov	r6, r0
 800990c:	4611      	mov	r1, r2
 800990e:	4620      	mov	r0, r4
 8009910:	4690      	mov	r8, r2
 8009912:	f7ff ffdb 	bl	80098cc <__mcmp>
 8009916:	1e05      	subs	r5, r0, #0
 8009918:	d110      	bne.n	800993c <__mdiff+0x38>
 800991a:	4629      	mov	r1, r5
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff fda1 	bl	8009464 <_Balloc>
 8009922:	b930      	cbnz	r0, 8009932 <__mdiff+0x2e>
 8009924:	4b3a      	ldr	r3, [pc, #232]	; (8009a10 <__mdiff+0x10c>)
 8009926:	4602      	mov	r2, r0
 8009928:	f240 2132 	movw	r1, #562	; 0x232
 800992c:	4839      	ldr	r0, [pc, #228]	; (8009a14 <__mdiff+0x110>)
 800992e:	f000 f9f5 	bl	8009d1c <__assert_func>
 8009932:	2301      	movs	r3, #1
 8009934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	bfa4      	itt	ge
 800993e:	4643      	movge	r3, r8
 8009940:	46a0      	movge	r8, r4
 8009942:	4630      	mov	r0, r6
 8009944:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009948:	bfa6      	itte	ge
 800994a:	461c      	movge	r4, r3
 800994c:	2500      	movge	r5, #0
 800994e:	2501      	movlt	r5, #1
 8009950:	f7ff fd88 	bl	8009464 <_Balloc>
 8009954:	b920      	cbnz	r0, 8009960 <__mdiff+0x5c>
 8009956:	4b2e      	ldr	r3, [pc, #184]	; (8009a10 <__mdiff+0x10c>)
 8009958:	4602      	mov	r2, r0
 800995a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800995e:	e7e5      	b.n	800992c <__mdiff+0x28>
 8009960:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009964:	6926      	ldr	r6, [r4, #16]
 8009966:	60c5      	str	r5, [r0, #12]
 8009968:	f104 0914 	add.w	r9, r4, #20
 800996c:	f108 0514 	add.w	r5, r8, #20
 8009970:	f100 0e14 	add.w	lr, r0, #20
 8009974:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009978:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800997c:	f108 0210 	add.w	r2, r8, #16
 8009980:	46f2      	mov	sl, lr
 8009982:	2100      	movs	r1, #0
 8009984:	f859 3b04 	ldr.w	r3, [r9], #4
 8009988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800998c:	fa1f f883 	uxth.w	r8, r3
 8009990:	fa11 f18b 	uxtah	r1, r1, fp
 8009994:	0c1b      	lsrs	r3, r3, #16
 8009996:	eba1 0808 	sub.w	r8, r1, r8
 800999a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800999e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099a2:	fa1f f888 	uxth.w	r8, r8
 80099a6:	1419      	asrs	r1, r3, #16
 80099a8:	454e      	cmp	r6, r9
 80099aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099ae:	f84a 3b04 	str.w	r3, [sl], #4
 80099b2:	d8e7      	bhi.n	8009984 <__mdiff+0x80>
 80099b4:	1b33      	subs	r3, r6, r4
 80099b6:	3b15      	subs	r3, #21
 80099b8:	f023 0303 	bic.w	r3, r3, #3
 80099bc:	3304      	adds	r3, #4
 80099be:	3415      	adds	r4, #21
 80099c0:	42a6      	cmp	r6, r4
 80099c2:	bf38      	it	cc
 80099c4:	2304      	movcc	r3, #4
 80099c6:	441d      	add	r5, r3
 80099c8:	4473      	add	r3, lr
 80099ca:	469e      	mov	lr, r3
 80099cc:	462e      	mov	r6, r5
 80099ce:	4566      	cmp	r6, ip
 80099d0:	d30e      	bcc.n	80099f0 <__mdiff+0xec>
 80099d2:	f10c 0203 	add.w	r2, ip, #3
 80099d6:	1b52      	subs	r2, r2, r5
 80099d8:	f022 0203 	bic.w	r2, r2, #3
 80099dc:	3d03      	subs	r5, #3
 80099de:	45ac      	cmp	ip, r5
 80099e0:	bf38      	it	cc
 80099e2:	2200      	movcc	r2, #0
 80099e4:	441a      	add	r2, r3
 80099e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099ea:	b17b      	cbz	r3, 8009a0c <__mdiff+0x108>
 80099ec:	6107      	str	r7, [r0, #16]
 80099ee:	e7a3      	b.n	8009938 <__mdiff+0x34>
 80099f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80099f4:	fa11 f288 	uxtah	r2, r1, r8
 80099f8:	1414      	asrs	r4, r2, #16
 80099fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099fe:	b292      	uxth	r2, r2
 8009a00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a04:	f84e 2b04 	str.w	r2, [lr], #4
 8009a08:	1421      	asrs	r1, r4, #16
 8009a0a:	e7e0      	b.n	80099ce <__mdiff+0xca>
 8009a0c:	3f01      	subs	r7, #1
 8009a0e:	e7ea      	b.n	80099e6 <__mdiff+0xe2>
 8009a10:	0800b785 	.word	0x0800b785
 8009a14:	0800b7f1 	.word	0x0800b7f1

08009a18 <__d2b>:
 8009a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	4689      	mov	r9, r1
 8009a1e:	2101      	movs	r1, #1
 8009a20:	ec57 6b10 	vmov	r6, r7, d0
 8009a24:	4690      	mov	r8, r2
 8009a26:	f7ff fd1d 	bl	8009464 <_Balloc>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	b930      	cbnz	r0, 8009a3c <__d2b+0x24>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <__d2b+0xb0>)
 8009a32:	4826      	ldr	r0, [pc, #152]	; (8009acc <__d2b+0xb4>)
 8009a34:	f240 310a 	movw	r1, #778	; 0x30a
 8009a38:	f000 f970 	bl	8009d1c <__assert_func>
 8009a3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a44:	bb35      	cbnz	r5, 8009a94 <__d2b+0x7c>
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	d028      	beq.n	8009a9e <__d2b+0x86>
 8009a4c:	4668      	mov	r0, sp
 8009a4e:	9600      	str	r6, [sp, #0]
 8009a50:	f7ff fd9c 	bl	800958c <__lo0bits>
 8009a54:	9900      	ldr	r1, [sp, #0]
 8009a56:	b300      	cbz	r0, 8009a9a <__d2b+0x82>
 8009a58:	9a01      	ldr	r2, [sp, #4]
 8009a5a:	f1c0 0320 	rsb	r3, r0, #32
 8009a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a62:	430b      	orrs	r3, r1
 8009a64:	40c2      	lsrs	r2, r0
 8009a66:	6163      	str	r3, [r4, #20]
 8009a68:	9201      	str	r2, [sp, #4]
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	61a3      	str	r3, [r4, #24]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bf14      	ite	ne
 8009a72:	2202      	movne	r2, #2
 8009a74:	2201      	moveq	r2, #1
 8009a76:	6122      	str	r2, [r4, #16]
 8009a78:	b1d5      	cbz	r5, 8009ab0 <__d2b+0x98>
 8009a7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a7e:	4405      	add	r5, r0
 8009a80:	f8c9 5000 	str.w	r5, [r9]
 8009a84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a88:	f8c8 0000 	str.w	r0, [r8]
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	b003      	add	sp, #12
 8009a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a98:	e7d5      	b.n	8009a46 <__d2b+0x2e>
 8009a9a:	6161      	str	r1, [r4, #20]
 8009a9c:	e7e5      	b.n	8009a6a <__d2b+0x52>
 8009a9e:	a801      	add	r0, sp, #4
 8009aa0:	f7ff fd74 	bl	800958c <__lo0bits>
 8009aa4:	9b01      	ldr	r3, [sp, #4]
 8009aa6:	6163      	str	r3, [r4, #20]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	6122      	str	r2, [r4, #16]
 8009aac:	3020      	adds	r0, #32
 8009aae:	e7e3      	b.n	8009a78 <__d2b+0x60>
 8009ab0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ab4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ab8:	f8c9 0000 	str.w	r0, [r9]
 8009abc:	6918      	ldr	r0, [r3, #16]
 8009abe:	f7ff fd45 	bl	800954c <__hi0bits>
 8009ac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ac6:	e7df      	b.n	8009a88 <__d2b+0x70>
 8009ac8:	0800b785 	.word	0x0800b785
 8009acc:	0800b7f1 	.word	0x0800b7f1

08009ad0 <frexp>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	ec55 4b10 	vmov	r4, r5, d0
 8009ad8:	6001      	str	r1, [r0, #0]
 8009ada:	4916      	ldr	r1, [pc, #88]	; (8009b34 <frexp+0x64>)
 8009adc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8009ae0:	428a      	cmp	r2, r1
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	dc22      	bgt.n	8009b2e <frexp+0x5e>
 8009ae8:	ee10 1a10 	vmov	r1, s0
 8009aec:	4311      	orrs	r1, r2
 8009aee:	d01e      	beq.n	8009b2e <frexp+0x5e>
 8009af0:	4911      	ldr	r1, [pc, #68]	; (8009b38 <frexp+0x68>)
 8009af2:	4029      	ands	r1, r5
 8009af4:	b969      	cbnz	r1, 8009b12 <frexp+0x42>
 8009af6:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <frexp+0x6c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	ee10 0a10 	vmov	r0, s0
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f6 fd7a 	bl	80005f8 <__aeabi_dmul>
 8009b04:	460b      	mov	r3, r1
 8009b06:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009b0a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8009b0e:	4604      	mov	r4, r0
 8009b10:	6031      	str	r1, [r6, #0]
 8009b12:	6831      	ldr	r1, [r6, #0]
 8009b14:	1512      	asrs	r2, r2, #20
 8009b16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b1a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8009b1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b22:	440a      	add	r2, r1
 8009b24:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8009b28:	6032      	str	r2, [r6, #0]
 8009b2a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8009b2e:	ec45 4b10 	vmov	d0, r4, r5
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	7fefffff 	.word	0x7fefffff
 8009b38:	7ff00000 	.word	0x7ff00000
 8009b3c:	43500000 	.word	0x43500000

08009b40 <_sbrk_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d06      	ldr	r5, [pc, #24]	; (8009b5c <_sbrk_r+0x1c>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	602b      	str	r3, [r5, #0]
 8009b4c:	f7fc fb4c 	bl	80061e8 <_sbrk>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_sbrk_r+0x1a>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_sbrk_r+0x1a>
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	20000ed8 	.word	0x20000ed8

08009b60 <strncpy>:
 8009b60:	b510      	push	{r4, lr}
 8009b62:	3901      	subs	r1, #1
 8009b64:	4603      	mov	r3, r0
 8009b66:	b132      	cbz	r2, 8009b76 <strncpy+0x16>
 8009b68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009b6c:	f803 4b01 	strb.w	r4, [r3], #1
 8009b70:	3a01      	subs	r2, #1
 8009b72:	2c00      	cmp	r4, #0
 8009b74:	d1f7      	bne.n	8009b66 <strncpy+0x6>
 8009b76:	441a      	add	r2, r3
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d100      	bne.n	8009b80 <strncpy+0x20>
 8009b7e:	bd10      	pop	{r4, pc}
 8009b80:	f803 1b01 	strb.w	r1, [r3], #1
 8009b84:	e7f9      	b.n	8009b7a <strncpy+0x1a>

08009b86 <__ssprint_r>:
 8009b86:	6893      	ldr	r3, [r2, #8]
 8009b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	4617      	mov	r7, r2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d061      	beq.n	8009c5a <__ssprint_r+0xd4>
 8009b96:	2300      	movs	r3, #0
 8009b98:	f8d2 a000 	ldr.w	sl, [r2]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	469b      	mov	fp, r3
 8009ba0:	f1bb 0f00 	cmp.w	fp, #0
 8009ba4:	d02b      	beq.n	8009bfe <__ssprint_r+0x78>
 8009ba6:	68a6      	ldr	r6, [r4, #8]
 8009ba8:	455e      	cmp	r6, fp
 8009baa:	d844      	bhi.n	8009c36 <__ssprint_r+0xb0>
 8009bac:	89a2      	ldrh	r2, [r4, #12]
 8009bae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bb2:	d03e      	beq.n	8009c32 <__ssprint_r+0xac>
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	6921      	ldr	r1, [r4, #16]
 8009bb8:	6965      	ldr	r5, [r4, #20]
 8009bba:	eba0 0901 	sub.w	r9, r0, r1
 8009bbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bc6:	f109 0001 	add.w	r0, r9, #1
 8009bca:	106d      	asrs	r5, r5, #1
 8009bcc:	4458      	add	r0, fp
 8009bce:	4285      	cmp	r5, r0
 8009bd0:	bf38      	it	cc
 8009bd2:	4605      	movcc	r5, r0
 8009bd4:	0553      	lsls	r3, r2, #21
 8009bd6:	d545      	bpl.n	8009c64 <__ssprint_r+0xde>
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4640      	mov	r0, r8
 8009bdc:	f7ff f9fa 	bl	8008fd4 <_malloc_r>
 8009be0:	4606      	mov	r6, r0
 8009be2:	b9a0      	cbnz	r0, 8009c0e <__ssprint_r+0x88>
 8009be4:	230c      	movs	r3, #12
 8009be6:	f8c8 3000 	str.w	r3, [r8]
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e02f      	b.n	8009c5e <__ssprint_r+0xd8>
 8009bfe:	f8da 3000 	ldr.w	r3, [sl]
 8009c02:	f8da b004 	ldr.w	fp, [sl, #4]
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	f10a 0a08 	add.w	sl, sl, #8
 8009c0c:	e7c8      	b.n	8009ba0 <__ssprint_r+0x1a>
 8009c0e:	464a      	mov	r2, r9
 8009c10:	6921      	ldr	r1, [r4, #16]
 8009c12:	f7fd f821 	bl	8006c58 <memcpy>
 8009c16:	89a2      	ldrh	r2, [r4, #12]
 8009c18:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c20:	81a2      	strh	r2, [r4, #12]
 8009c22:	6126      	str	r6, [r4, #16]
 8009c24:	6165      	str	r5, [r4, #20]
 8009c26:	444e      	add	r6, r9
 8009c28:	eba5 0509 	sub.w	r5, r5, r9
 8009c2c:	6026      	str	r6, [r4, #0]
 8009c2e:	60a5      	str	r5, [r4, #8]
 8009c30:	465e      	mov	r6, fp
 8009c32:	455e      	cmp	r6, fp
 8009c34:	d900      	bls.n	8009c38 <__ssprint_r+0xb2>
 8009c36:	465e      	mov	r6, fp
 8009c38:	4632      	mov	r2, r6
 8009c3a:	9901      	ldr	r1, [sp, #4]
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	f000 f8eb 	bl	8009e18 <memmove>
 8009c42:	68a2      	ldr	r2, [r4, #8]
 8009c44:	1b92      	subs	r2, r2, r6
 8009c46:	60a2      	str	r2, [r4, #8]
 8009c48:	6822      	ldr	r2, [r4, #0]
 8009c4a:	4432      	add	r2, r6
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	eba2 030b 	sub.w	r3, r2, fp
 8009c54:	60bb      	str	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1d1      	bne.n	8009bfe <__ssprint_r+0x78>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	b003      	add	sp, #12
 8009c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	462a      	mov	r2, r5
 8009c66:	4640      	mov	r0, r8
 8009c68:	f000 f8f0 	bl	8009e4c <_realloc_r>
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d1d7      	bne.n	8009c22 <__ssprint_r+0x9c>
 8009c72:	6921      	ldr	r1, [r4, #16]
 8009c74:	4640      	mov	r0, r8
 8009c76:	f7ff f8e5 	bl	8008e44 <_free_r>
 8009c7a:	e7b3      	b.n	8009be4 <__ssprint_r+0x5e>

08009c7c <sysconf>:
 8009c7c:	2808      	cmp	r0, #8
 8009c7e:	b508      	push	{r3, lr}
 8009c80:	d006      	beq.n	8009c90 <sysconf+0x14>
 8009c82:	f7fc ffbf 	bl	8006c04 <__errno>
 8009c86:	2316      	movs	r3, #22
 8009c88:	6003      	str	r3, [r0, #0]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8e:	bd08      	pop	{r3, pc}
 8009c90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009c94:	e7fb      	b.n	8009c8e <sysconf+0x12>
	...

08009c98 <__register_exitproc>:
 8009c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	f8df a078 	ldr.w	sl, [pc, #120]	; 8009d18 <__register_exitproc+0x80>
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	f8da 0000 	ldr.w	r0, [sl]
 8009ca6:	4698      	mov	r8, r3
 8009ca8:	460f      	mov	r7, r1
 8009caa:	4691      	mov	r9, r2
 8009cac:	f7ff f990 	bl	8008fd0 <__retarget_lock_acquire_recursive>
 8009cb0:	4b18      	ldr	r3, [pc, #96]	; (8009d14 <__register_exitproc+0x7c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8009cb8:	b91c      	cbnz	r4, 8009cc2 <__register_exitproc+0x2a>
 8009cba:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8009cbe:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8009cc2:	6865      	ldr	r5, [r4, #4]
 8009cc4:	f8da 0000 	ldr.w	r0, [sl]
 8009cc8:	2d1f      	cmp	r5, #31
 8009cca:	dd05      	ble.n	8009cd8 <__register_exitproc+0x40>
 8009ccc:	f7ff f981 	bl	8008fd2 <__retarget_lock_release_recursive>
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd8:	b19e      	cbz	r6, 8009d02 <__register_exitproc+0x6a>
 8009cda:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009ce4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8009ce8:	40aa      	lsls	r2, r5
 8009cea:	4313      	orrs	r3, r2
 8009cec:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009cf0:	2e02      	cmp	r6, #2
 8009cf2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8009cf6:	bf02      	ittt	eq
 8009cf8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009cfc:	4313      	orreq	r3, r2
 8009cfe:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8009d02:	1c6b      	adds	r3, r5, #1
 8009d04:	3502      	adds	r5, #2
 8009d06:	6063      	str	r3, [r4, #4]
 8009d08:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009d0c:	f7ff f961 	bl	8008fd2 <__retarget_lock_release_recursive>
 8009d10:	2000      	movs	r0, #0
 8009d12:	e7df      	b.n	8009cd4 <__register_exitproc+0x3c>
 8009d14:	0800b720 	.word	0x0800b720
 8009d18:	20000450 	.word	0x20000450

08009d1c <__assert_func>:
 8009d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d1e:	4614      	mov	r4, r2
 8009d20:	461a      	mov	r2, r3
 8009d22:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <__assert_func+0x2c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4605      	mov	r5, r0
 8009d28:	68d8      	ldr	r0, [r3, #12]
 8009d2a:	b14c      	cbz	r4, 8009d40 <__assert_func+0x24>
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <__assert_func+0x30>)
 8009d2e:	9100      	str	r1, [sp, #0]
 8009d30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d34:	4906      	ldr	r1, [pc, #24]	; (8009d50 <__assert_func+0x34>)
 8009d36:	462b      	mov	r3, r5
 8009d38:	f000 f844 	bl	8009dc4 <fiprintf>
 8009d3c:	f000 ff98 	bl	800ac70 <abort>
 8009d40:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <__assert_func+0x38>)
 8009d42:	461c      	mov	r4, r3
 8009d44:	e7f3      	b.n	8009d2e <__assert_func+0x12>
 8009d46:	bf00      	nop
 8009d48:	20000024 	.word	0x20000024
 8009d4c:	0800b94c 	.word	0x0800b94c
 8009d50:	0800b959 	.word	0x0800b959
 8009d54:	0800b987 	.word	0x0800b987

08009d58 <_calloc_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	fba1 1502 	umull	r1, r5, r1, r2
 8009d5e:	b92d      	cbnz	r5, 8009d6c <_calloc_r+0x14>
 8009d60:	f7ff f938 	bl	8008fd4 <_malloc_r>
 8009d64:	4604      	mov	r4, r0
 8009d66:	b938      	cbnz	r0, 8009d78 <_calloc_r+0x20>
 8009d68:	4620      	mov	r0, r4
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	f7fc ff4a 	bl	8006c04 <__errno>
 8009d70:	230c      	movs	r3, #12
 8009d72:	6003      	str	r3, [r0, #0]
 8009d74:	2400      	movs	r4, #0
 8009d76:	e7f7      	b.n	8009d68 <_calloc_r+0x10>
 8009d78:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009d7c:	f022 0203 	bic.w	r2, r2, #3
 8009d80:	3a04      	subs	r2, #4
 8009d82:	2a24      	cmp	r2, #36	; 0x24
 8009d84:	d819      	bhi.n	8009dba <_calloc_r+0x62>
 8009d86:	2a13      	cmp	r2, #19
 8009d88:	d915      	bls.n	8009db6 <_calloc_r+0x5e>
 8009d8a:	2a1b      	cmp	r2, #27
 8009d8c:	e9c0 5500 	strd	r5, r5, [r0]
 8009d90:	d806      	bhi.n	8009da0 <_calloc_r+0x48>
 8009d92:	f100 0308 	add.w	r3, r0, #8
 8009d96:	2200      	movs	r2, #0
 8009d98:	e9c3 2200 	strd	r2, r2, [r3]
 8009d9c:	609a      	str	r2, [r3, #8]
 8009d9e:	e7e3      	b.n	8009d68 <_calloc_r+0x10>
 8009da0:	2a24      	cmp	r2, #36	; 0x24
 8009da2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8009da6:	bf11      	iteee	ne
 8009da8:	f100 0310 	addne.w	r3, r0, #16
 8009dac:	6105      	streq	r5, [r0, #16]
 8009dae:	f100 0318 	addeq.w	r3, r0, #24
 8009db2:	6145      	streq	r5, [r0, #20]
 8009db4:	e7ef      	b.n	8009d96 <_calloc_r+0x3e>
 8009db6:	4603      	mov	r3, r0
 8009db8:	e7ed      	b.n	8009d96 <_calloc_r+0x3e>
 8009dba:	4629      	mov	r1, r5
 8009dbc:	f7fc ff5a 	bl	8006c74 <memset>
 8009dc0:	e7d2      	b.n	8009d68 <_calloc_r+0x10>
	...

08009dc4 <fiprintf>:
 8009dc4:	b40e      	push	{r1, r2, r3}
 8009dc6:	b503      	push	{r0, r1, lr}
 8009dc8:	4601      	mov	r1, r0
 8009dca:	ab03      	add	r3, sp, #12
 8009dcc:	4805      	ldr	r0, [pc, #20]	; (8009de4 <fiprintf+0x20>)
 8009dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd2:	6800      	ldr	r0, [r0, #0]
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	f000 fa0f 	bl	800a1f8 <_vfiprintf_r>
 8009dda:	b002      	add	sp, #8
 8009ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009de0:	b003      	add	sp, #12
 8009de2:	4770      	bx	lr
 8009de4:	20000024 	.word	0x20000024

08009de8 <__locale_mb_cur_max>:
 8009de8:	4b01      	ldr	r3, [pc, #4]	; (8009df0 <__locale_mb_cur_max+0x8>)
 8009dea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009dee:	4770      	bx	lr
 8009df0:	20000864 	.word	0x20000864

08009df4 <__ascii_mbtowc>:
 8009df4:	b082      	sub	sp, #8
 8009df6:	b901      	cbnz	r1, 8009dfa <__ascii_mbtowc+0x6>
 8009df8:	a901      	add	r1, sp, #4
 8009dfa:	b142      	cbz	r2, 8009e0e <__ascii_mbtowc+0x1a>
 8009dfc:	b14b      	cbz	r3, 8009e12 <__ascii_mbtowc+0x1e>
 8009dfe:	7813      	ldrb	r3, [r2, #0]
 8009e00:	600b      	str	r3, [r1, #0]
 8009e02:	7812      	ldrb	r2, [r2, #0]
 8009e04:	1e10      	subs	r0, r2, #0
 8009e06:	bf18      	it	ne
 8009e08:	2001      	movne	r0, #1
 8009e0a:	b002      	add	sp, #8
 8009e0c:	4770      	bx	lr
 8009e0e:	4610      	mov	r0, r2
 8009e10:	e7fb      	b.n	8009e0a <__ascii_mbtowc+0x16>
 8009e12:	f06f 0001 	mvn.w	r0, #1
 8009e16:	e7f8      	b.n	8009e0a <__ascii_mbtowc+0x16>

08009e18 <memmove>:
 8009e18:	4288      	cmp	r0, r1
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	eb01 0402 	add.w	r4, r1, r2
 8009e20:	d902      	bls.n	8009e28 <memmove+0x10>
 8009e22:	4284      	cmp	r4, r0
 8009e24:	4623      	mov	r3, r4
 8009e26:	d807      	bhi.n	8009e38 <memmove+0x20>
 8009e28:	1e43      	subs	r3, r0, #1
 8009e2a:	42a1      	cmp	r1, r4
 8009e2c:	d008      	beq.n	8009e40 <memmove+0x28>
 8009e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e36:	e7f8      	b.n	8009e2a <memmove+0x12>
 8009e38:	4402      	add	r2, r0
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	428a      	cmp	r2, r1
 8009e3e:	d100      	bne.n	8009e42 <memmove+0x2a>
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e4a:	e7f7      	b.n	8009e3c <memmove+0x24>

08009e4c <_realloc_r>:
 8009e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e50:	4681      	mov	r9, r0
 8009e52:	460c      	mov	r4, r1
 8009e54:	b929      	cbnz	r1, 8009e62 <_realloc_r+0x16>
 8009e56:	4611      	mov	r1, r2
 8009e58:	b003      	add	sp, #12
 8009e5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5e:	f7ff b8b9 	b.w	8008fd4 <_malloc_r>
 8009e62:	9201      	str	r2, [sp, #4]
 8009e64:	f7ff faf2 	bl	800944c <__malloc_lock>
 8009e68:	9a01      	ldr	r2, [sp, #4]
 8009e6a:	f102 080b 	add.w	r8, r2, #11
 8009e6e:	f1b8 0f16 	cmp.w	r8, #22
 8009e72:	d90b      	bls.n	8009e8c <_realloc_r+0x40>
 8009e74:	f038 0807 	bics.w	r8, r8, #7
 8009e78:	d50a      	bpl.n	8009e90 <_realloc_r+0x44>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	f8c9 3000 	str.w	r3, [r9]
 8009e80:	f04f 0b00 	mov.w	fp, #0
 8009e84:	4658      	mov	r0, fp
 8009e86:	b003      	add	sp, #12
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	f04f 0810 	mov.w	r8, #16
 8009e90:	4590      	cmp	r8, r2
 8009e92:	d3f2      	bcc.n	8009e7a <_realloc_r+0x2e>
 8009e94:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009e98:	f025 0603 	bic.w	r6, r5, #3
 8009e9c:	45b0      	cmp	r8, r6
 8009e9e:	f1a4 0a08 	sub.w	sl, r4, #8
 8009ea2:	f340 816e 	ble.w	800a182 <_realloc_r+0x336>
 8009ea6:	499b      	ldr	r1, [pc, #620]	; (800a114 <_realloc_r+0x2c8>)
 8009ea8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009eac:	eb0a 0306 	add.w	r3, sl, r6
 8009eb0:	459c      	cmp	ip, r3
 8009eb2:	6859      	ldr	r1, [r3, #4]
 8009eb4:	d005      	beq.n	8009ec2 <_realloc_r+0x76>
 8009eb6:	f021 0001 	bic.w	r0, r1, #1
 8009eba:	4418      	add	r0, r3
 8009ebc:	6840      	ldr	r0, [r0, #4]
 8009ebe:	07c7      	lsls	r7, r0, #31
 8009ec0:	d427      	bmi.n	8009f12 <_realloc_r+0xc6>
 8009ec2:	f021 0103 	bic.w	r1, r1, #3
 8009ec6:	459c      	cmp	ip, r3
 8009ec8:	eb06 0701 	add.w	r7, r6, r1
 8009ecc:	d119      	bne.n	8009f02 <_realloc_r+0xb6>
 8009ece:	f108 0010 	add.w	r0, r8, #16
 8009ed2:	42b8      	cmp	r0, r7
 8009ed4:	dc1f      	bgt.n	8009f16 <_realloc_r+0xca>
 8009ed6:	eb0a 0308 	add.w	r3, sl, r8
 8009eda:	4a8e      	ldr	r2, [pc, #568]	; (800a114 <_realloc_r+0x2c8>)
 8009edc:	eba7 0708 	sub.w	r7, r7, r8
 8009ee0:	f047 0701 	orr.w	r7, r7, #1
 8009ee4:	6093      	str	r3, [r2, #8]
 8009ee6:	605f      	str	r7, [r3, #4]
 8009ee8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	ea43 0308 	orr.w	r3, r3, r8
 8009ef4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f7ff faad 	bl	8009458 <__malloc_unlock>
 8009efe:	46a3      	mov	fp, r4
 8009f00:	e7c0      	b.n	8009e84 <_realloc_r+0x38>
 8009f02:	45b8      	cmp	r8, r7
 8009f04:	dc07      	bgt.n	8009f16 <_realloc_r+0xca>
 8009f06:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009f0a:	60da      	str	r2, [r3, #12]
 8009f0c:	6093      	str	r3, [r2, #8]
 8009f0e:	4655      	mov	r5, sl
 8009f10:	e07f      	b.n	800a012 <_realloc_r+0x1c6>
 8009f12:	2100      	movs	r1, #0
 8009f14:	460b      	mov	r3, r1
 8009f16:	07e8      	lsls	r0, r5, #31
 8009f18:	f100 80e5 	bmi.w	800a0e6 <_realloc_r+0x29a>
 8009f1c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009f20:	ebaa 0505 	sub.w	r5, sl, r5
 8009f24:	6868      	ldr	r0, [r5, #4]
 8009f26:	f020 0003 	bic.w	r0, r0, #3
 8009f2a:	eb00 0b06 	add.w	fp, r0, r6
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 80a5 	beq.w	800a07e <_realloc_r+0x232>
 8009f34:	459c      	cmp	ip, r3
 8009f36:	eb01 070b 	add.w	r7, r1, fp
 8009f3a:	d14a      	bne.n	8009fd2 <_realloc_r+0x186>
 8009f3c:	f108 0310 	add.w	r3, r8, #16
 8009f40:	42bb      	cmp	r3, r7
 8009f42:	f300 809c 	bgt.w	800a07e <_realloc_r+0x232>
 8009f46:	46ab      	mov	fp, r5
 8009f48:	68eb      	ldr	r3, [r5, #12]
 8009f4a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8009f4e:	60d3      	str	r3, [r2, #12]
 8009f50:	609a      	str	r2, [r3, #8]
 8009f52:	1f32      	subs	r2, r6, #4
 8009f54:	2a24      	cmp	r2, #36	; 0x24
 8009f56:	d837      	bhi.n	8009fc8 <_realloc_r+0x17c>
 8009f58:	2a13      	cmp	r2, #19
 8009f5a:	d933      	bls.n	8009fc4 <_realloc_r+0x178>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	60ab      	str	r3, [r5, #8]
 8009f60:	6863      	ldr	r3, [r4, #4]
 8009f62:	60eb      	str	r3, [r5, #12]
 8009f64:	2a1b      	cmp	r2, #27
 8009f66:	d81b      	bhi.n	8009fa0 <_realloc_r+0x154>
 8009f68:	3408      	adds	r4, #8
 8009f6a:	f105 0310 	add.w	r3, r5, #16
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	6862      	ldr	r2, [r4, #4]
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	68a2      	ldr	r2, [r4, #8]
 8009f78:	609a      	str	r2, [r3, #8]
 8009f7a:	eb05 0308 	add.w	r3, r5, r8
 8009f7e:	4a65      	ldr	r2, [pc, #404]	; (800a114 <_realloc_r+0x2c8>)
 8009f80:	eba7 0708 	sub.w	r7, r7, r8
 8009f84:	f047 0701 	orr.w	r7, r7, #1
 8009f88:	6093      	str	r3, [r2, #8]
 8009f8a:	605f      	str	r7, [r3, #4]
 8009f8c:	686b      	ldr	r3, [r5, #4]
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	ea43 0308 	orr.w	r3, r3, r8
 8009f96:	606b      	str	r3, [r5, #4]
 8009f98:	4648      	mov	r0, r9
 8009f9a:	f7ff fa5d 	bl	8009458 <__malloc_unlock>
 8009f9e:	e771      	b.n	8009e84 <_realloc_r+0x38>
 8009fa0:	68a3      	ldr	r3, [r4, #8]
 8009fa2:	612b      	str	r3, [r5, #16]
 8009fa4:	68e3      	ldr	r3, [r4, #12]
 8009fa6:	616b      	str	r3, [r5, #20]
 8009fa8:	2a24      	cmp	r2, #36	; 0x24
 8009faa:	bf01      	itttt	eq
 8009fac:	6923      	ldreq	r3, [r4, #16]
 8009fae:	61ab      	streq	r3, [r5, #24]
 8009fb0:	6962      	ldreq	r2, [r4, #20]
 8009fb2:	61ea      	streq	r2, [r5, #28]
 8009fb4:	bf19      	ittee	ne
 8009fb6:	3410      	addne	r4, #16
 8009fb8:	f105 0318 	addne.w	r3, r5, #24
 8009fbc:	f105 0320 	addeq.w	r3, r5, #32
 8009fc0:	3418      	addeq	r4, #24
 8009fc2:	e7d4      	b.n	8009f6e <_realloc_r+0x122>
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	e7d2      	b.n	8009f6e <_realloc_r+0x122>
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4658      	mov	r0, fp
 8009fcc:	f7ff ff24 	bl	8009e18 <memmove>
 8009fd0:	e7d3      	b.n	8009f7a <_realloc_r+0x12e>
 8009fd2:	45b8      	cmp	r8, r7
 8009fd4:	dc53      	bgt.n	800a07e <_realloc_r+0x232>
 8009fd6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009fda:	4628      	mov	r0, r5
 8009fdc:	60da      	str	r2, [r3, #12]
 8009fde:	6093      	str	r3, [r2, #8]
 8009fe0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009fe4:	68eb      	ldr	r3, [r5, #12]
 8009fe6:	60d3      	str	r3, [r2, #12]
 8009fe8:	609a      	str	r2, [r3, #8]
 8009fea:	1f32      	subs	r2, r6, #4
 8009fec:	2a24      	cmp	r2, #36	; 0x24
 8009fee:	d842      	bhi.n	800a076 <_realloc_r+0x22a>
 8009ff0:	2a13      	cmp	r2, #19
 8009ff2:	d908      	bls.n	800a006 <_realloc_r+0x1ba>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	60ab      	str	r3, [r5, #8]
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	60eb      	str	r3, [r5, #12]
 8009ffc:	2a1b      	cmp	r2, #27
 8009ffe:	d828      	bhi.n	800a052 <_realloc_r+0x206>
 800a000:	3408      	adds	r4, #8
 800a002:	f105 0010 	add.w	r0, r5, #16
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	6003      	str	r3, [r0, #0]
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	6043      	str	r3, [r0, #4]
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	6083      	str	r3, [r0, #8]
 800a012:	686b      	ldr	r3, [r5, #4]
 800a014:	eba7 0008 	sub.w	r0, r7, r8
 800a018:	280f      	cmp	r0, #15
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	eb05 0207 	add.w	r2, r5, r7
 800a022:	f240 80b0 	bls.w	800a186 <_realloc_r+0x33a>
 800a026:	eb05 0108 	add.w	r1, r5, r8
 800a02a:	ea48 0303 	orr.w	r3, r8, r3
 800a02e:	f040 0001 	orr.w	r0, r0, #1
 800a032:	606b      	str	r3, [r5, #4]
 800a034:	6048      	str	r0, [r1, #4]
 800a036:	6853      	ldr	r3, [r2, #4]
 800a038:	f043 0301 	orr.w	r3, r3, #1
 800a03c:	6053      	str	r3, [r2, #4]
 800a03e:	3108      	adds	r1, #8
 800a040:	4648      	mov	r0, r9
 800a042:	f7fe feff 	bl	8008e44 <_free_r>
 800a046:	4648      	mov	r0, r9
 800a048:	f7ff fa06 	bl	8009458 <__malloc_unlock>
 800a04c:	f105 0b08 	add.w	fp, r5, #8
 800a050:	e718      	b.n	8009e84 <_realloc_r+0x38>
 800a052:	68a3      	ldr	r3, [r4, #8]
 800a054:	612b      	str	r3, [r5, #16]
 800a056:	68e3      	ldr	r3, [r4, #12]
 800a058:	616b      	str	r3, [r5, #20]
 800a05a:	2a24      	cmp	r2, #36	; 0x24
 800a05c:	bf01      	itttt	eq
 800a05e:	6923      	ldreq	r3, [r4, #16]
 800a060:	61ab      	streq	r3, [r5, #24]
 800a062:	6963      	ldreq	r3, [r4, #20]
 800a064:	61eb      	streq	r3, [r5, #28]
 800a066:	bf19      	ittee	ne
 800a068:	3410      	addne	r4, #16
 800a06a:	f105 0018 	addne.w	r0, r5, #24
 800a06e:	f105 0020 	addeq.w	r0, r5, #32
 800a072:	3418      	addeq	r4, #24
 800a074:	e7c7      	b.n	800a006 <_realloc_r+0x1ba>
 800a076:	4621      	mov	r1, r4
 800a078:	f7ff fece 	bl	8009e18 <memmove>
 800a07c:	e7c9      	b.n	800a012 <_realloc_r+0x1c6>
 800a07e:	45d8      	cmp	r8, fp
 800a080:	dc31      	bgt.n	800a0e6 <_realloc_r+0x29a>
 800a082:	4628      	mov	r0, r5
 800a084:	68eb      	ldr	r3, [r5, #12]
 800a086:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a08a:	60d3      	str	r3, [r2, #12]
 800a08c:	609a      	str	r2, [r3, #8]
 800a08e:	1f32      	subs	r2, r6, #4
 800a090:	2a24      	cmp	r2, #36	; 0x24
 800a092:	d824      	bhi.n	800a0de <_realloc_r+0x292>
 800a094:	2a13      	cmp	r2, #19
 800a096:	d908      	bls.n	800a0aa <_realloc_r+0x25e>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	60ab      	str	r3, [r5, #8]
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	60eb      	str	r3, [r5, #12]
 800a0a0:	2a1b      	cmp	r2, #27
 800a0a2:	d80a      	bhi.n	800a0ba <_realloc_r+0x26e>
 800a0a4:	3408      	adds	r4, #8
 800a0a6:	f105 0010 	add.w	r0, r5, #16
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	6043      	str	r3, [r0, #4]
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	6083      	str	r3, [r0, #8]
 800a0b6:	465f      	mov	r7, fp
 800a0b8:	e7ab      	b.n	800a012 <_realloc_r+0x1c6>
 800a0ba:	68a3      	ldr	r3, [r4, #8]
 800a0bc:	612b      	str	r3, [r5, #16]
 800a0be:	68e3      	ldr	r3, [r4, #12]
 800a0c0:	616b      	str	r3, [r5, #20]
 800a0c2:	2a24      	cmp	r2, #36	; 0x24
 800a0c4:	bf01      	itttt	eq
 800a0c6:	6923      	ldreq	r3, [r4, #16]
 800a0c8:	61ab      	streq	r3, [r5, #24]
 800a0ca:	6963      	ldreq	r3, [r4, #20]
 800a0cc:	61eb      	streq	r3, [r5, #28]
 800a0ce:	bf19      	ittee	ne
 800a0d0:	3410      	addne	r4, #16
 800a0d2:	f105 0018 	addne.w	r0, r5, #24
 800a0d6:	f105 0020 	addeq.w	r0, r5, #32
 800a0da:	3418      	addeq	r4, #24
 800a0dc:	e7e5      	b.n	800a0aa <_realloc_r+0x25e>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	f7ff fe9a 	bl	8009e18 <memmove>
 800a0e4:	e7e7      	b.n	800a0b6 <_realloc_r+0x26a>
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4648      	mov	r0, r9
 800a0ea:	f7fe ff73 	bl	8008fd4 <_malloc_r>
 800a0ee:	4683      	mov	fp, r0
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	f43f af51 	beq.w	8009f98 <_realloc_r+0x14c>
 800a0f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0fa:	f023 0301 	bic.w	r3, r3, #1
 800a0fe:	4453      	add	r3, sl
 800a100:	f1a0 0208 	sub.w	r2, r0, #8
 800a104:	4293      	cmp	r3, r2
 800a106:	d107      	bne.n	800a118 <_realloc_r+0x2cc>
 800a108:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a10c:	f027 0703 	bic.w	r7, r7, #3
 800a110:	4437      	add	r7, r6
 800a112:	e6fc      	b.n	8009f0e <_realloc_r+0xc2>
 800a114:	20000454 	.word	0x20000454
 800a118:	1f32      	subs	r2, r6, #4
 800a11a:	2a24      	cmp	r2, #36	; 0x24
 800a11c:	d82d      	bhi.n	800a17a <_realloc_r+0x32e>
 800a11e:	2a13      	cmp	r2, #19
 800a120:	d928      	bls.n	800a174 <_realloc_r+0x328>
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	6863      	ldr	r3, [r4, #4]
 800a128:	6043      	str	r3, [r0, #4]
 800a12a:	2a1b      	cmp	r2, #27
 800a12c:	d80e      	bhi.n	800a14c <_realloc_r+0x300>
 800a12e:	f104 0208 	add.w	r2, r4, #8
 800a132:	f100 0308 	add.w	r3, r0, #8
 800a136:	6811      	ldr	r1, [r2, #0]
 800a138:	6019      	str	r1, [r3, #0]
 800a13a:	6851      	ldr	r1, [r2, #4]
 800a13c:	6059      	str	r1, [r3, #4]
 800a13e:	6892      	ldr	r2, [r2, #8]
 800a140:	609a      	str	r2, [r3, #8]
 800a142:	4621      	mov	r1, r4
 800a144:	4648      	mov	r0, r9
 800a146:	f7fe fe7d 	bl	8008e44 <_free_r>
 800a14a:	e725      	b.n	8009f98 <_realloc_r+0x14c>
 800a14c:	68a3      	ldr	r3, [r4, #8]
 800a14e:	6083      	str	r3, [r0, #8]
 800a150:	68e3      	ldr	r3, [r4, #12]
 800a152:	60c3      	str	r3, [r0, #12]
 800a154:	2a24      	cmp	r2, #36	; 0x24
 800a156:	bf01      	itttt	eq
 800a158:	6923      	ldreq	r3, [r4, #16]
 800a15a:	6103      	streq	r3, [r0, #16]
 800a15c:	6961      	ldreq	r1, [r4, #20]
 800a15e:	6141      	streq	r1, [r0, #20]
 800a160:	bf19      	ittee	ne
 800a162:	f104 0210 	addne.w	r2, r4, #16
 800a166:	f100 0310 	addne.w	r3, r0, #16
 800a16a:	f104 0218 	addeq.w	r2, r4, #24
 800a16e:	f100 0318 	addeq.w	r3, r0, #24
 800a172:	e7e0      	b.n	800a136 <_realloc_r+0x2ea>
 800a174:	4603      	mov	r3, r0
 800a176:	4622      	mov	r2, r4
 800a178:	e7dd      	b.n	800a136 <_realloc_r+0x2ea>
 800a17a:	4621      	mov	r1, r4
 800a17c:	f7ff fe4c 	bl	8009e18 <memmove>
 800a180:	e7df      	b.n	800a142 <_realloc_r+0x2f6>
 800a182:	4637      	mov	r7, r6
 800a184:	e6c3      	b.n	8009f0e <_realloc_r+0xc2>
 800a186:	431f      	orrs	r7, r3
 800a188:	606f      	str	r7, [r5, #4]
 800a18a:	6853      	ldr	r3, [r2, #4]
 800a18c:	f043 0301 	orr.w	r3, r3, #1
 800a190:	6053      	str	r3, [r2, #4]
 800a192:	e758      	b.n	800a046 <_realloc_r+0x1fa>

0800a194 <__sprint_r>:
 800a194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	6893      	ldr	r3, [r2, #8]
 800a19a:	4680      	mov	r8, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	4614      	mov	r4, r2
 800a1a0:	b91b      	cbnz	r3, 800a1aa <__sprint_r+0x16>
 800a1a2:	6053      	str	r3, [r2, #4]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a1ac:	049d      	lsls	r5, r3, #18
 800a1ae:	d520      	bpl.n	800a1f2 <__sprint_r+0x5e>
 800a1b0:	6815      	ldr	r5, [r2, #0]
 800a1b2:	3508      	adds	r5, #8
 800a1b4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800a1b8:	f04f 0900 	mov.w	r9, #0
 800a1bc:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800a1c0:	45ca      	cmp	sl, r9
 800a1c2:	dc0b      	bgt.n	800a1dc <__sprint_r+0x48>
 800a1c4:	68a3      	ldr	r3, [r4, #8]
 800a1c6:	f026 0003 	bic.w	r0, r6, #3
 800a1ca:	1a18      	subs	r0, r3, r0
 800a1cc:	60a0      	str	r0, [r4, #8]
 800a1ce:	3508      	adds	r5, #8
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d1ef      	bne.n	800a1b4 <__sprint_r+0x20>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a1da:	e7e4      	b.n	800a1a6 <__sprint_r+0x12>
 800a1dc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	f000 feaf 	bl	800af46 <_fputwc_r>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d0f3      	beq.n	800a1d4 <__sprint_r+0x40>
 800a1ec:	f109 0901 	add.w	r9, r9, #1
 800a1f0:	e7e6      	b.n	800a1c0 <__sprint_r+0x2c>
 800a1f2:	f000 fed3 	bl	800af9c <__sfvwrite_r>
 800a1f6:	e7ed      	b.n	800a1d4 <__sprint_r+0x40>

0800a1f8 <_vfiprintf_r>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	ed2d 8b02 	vpush	{d8}
 800a200:	b0b9      	sub	sp, #228	; 0xe4
 800a202:	460f      	mov	r7, r1
 800a204:	9201      	str	r2, [sp, #4]
 800a206:	461d      	mov	r5, r3
 800a208:	461c      	mov	r4, r3
 800a20a:	4681      	mov	r9, r0
 800a20c:	b118      	cbz	r0, 800a216 <_vfiprintf_r+0x1e>
 800a20e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a210:	b90b      	cbnz	r3, 800a216 <_vfiprintf_r+0x1e>
 800a212:	f000 fe2f 	bl	800ae74 <__sinit>
 800a216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a218:	07d8      	lsls	r0, r3, #31
 800a21a:	d405      	bmi.n	800a228 <_vfiprintf_r+0x30>
 800a21c:	89bb      	ldrh	r3, [r7, #12]
 800a21e:	0599      	lsls	r1, r3, #22
 800a220:	d402      	bmi.n	800a228 <_vfiprintf_r+0x30>
 800a222:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a224:	f7fe fed4 	bl	8008fd0 <__retarget_lock_acquire_recursive>
 800a228:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a22c:	049a      	lsls	r2, r3, #18
 800a22e:	d406      	bmi.n	800a23e <_vfiprintf_r+0x46>
 800a230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a234:	81bb      	strh	r3, [r7, #12]
 800a236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a23c:	667b      	str	r3, [r7, #100]	; 0x64
 800a23e:	89bb      	ldrh	r3, [r7, #12]
 800a240:	071e      	lsls	r6, r3, #28
 800a242:	d501      	bpl.n	800a248 <_vfiprintf_r+0x50>
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	b9bb      	cbnz	r3, 800a278 <_vfiprintf_r+0x80>
 800a248:	4639      	mov	r1, r7
 800a24a:	4648      	mov	r0, r9
 800a24c:	f000 fcb8 	bl	800abc0 <__swsetup_r>
 800a250:	b190      	cbz	r0, 800a278 <_vfiprintf_r+0x80>
 800a252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a254:	07d8      	lsls	r0, r3, #31
 800a256:	d508      	bpl.n	800a26a <_vfiprintf_r+0x72>
 800a258:	f04f 33ff 	mov.w	r3, #4294967295
 800a25c:	9302      	str	r3, [sp, #8]
 800a25e:	9802      	ldr	r0, [sp, #8]
 800a260:	b039      	add	sp, #228	; 0xe4
 800a262:	ecbd 8b02 	vpop	{d8}
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	89bb      	ldrh	r3, [r7, #12]
 800a26c:	0599      	lsls	r1, r3, #22
 800a26e:	d4f3      	bmi.n	800a258 <_vfiprintf_r+0x60>
 800a270:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a272:	f7fe feae 	bl	8008fd2 <__retarget_lock_release_recursive>
 800a276:	e7ef      	b.n	800a258 <_vfiprintf_r+0x60>
 800a278:	89bb      	ldrh	r3, [r7, #12]
 800a27a:	f003 021a 	and.w	r2, r3, #26
 800a27e:	2a0a      	cmp	r2, #10
 800a280:	d116      	bne.n	800a2b0 <_vfiprintf_r+0xb8>
 800a282:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a286:	2a00      	cmp	r2, #0
 800a288:	db12      	blt.n	800a2b0 <_vfiprintf_r+0xb8>
 800a28a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a28c:	07d2      	lsls	r2, r2, #31
 800a28e:	d404      	bmi.n	800a29a <_vfiprintf_r+0xa2>
 800a290:	059e      	lsls	r6, r3, #22
 800a292:	d402      	bmi.n	800a29a <_vfiprintf_r+0xa2>
 800a294:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a296:	f7fe fe9c 	bl	8008fd2 <__retarget_lock_release_recursive>
 800a29a:	9a01      	ldr	r2, [sp, #4]
 800a29c:	462b      	mov	r3, r5
 800a29e:	4639      	mov	r1, r7
 800a2a0:	4648      	mov	r0, r9
 800a2a2:	b039      	add	sp, #228	; 0xe4
 800a2a4:	ecbd 8b02 	vpop	{d8}
 800a2a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	f000 bc3a 	b.w	800ab24 <__sbprintf>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800a2b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a2ba:	ae0f      	add	r6, sp, #60	; 0x3c
 800a2bc:	ee08 3a10 	vmov	s16, r3
 800a2c0:	960c      	str	r6, [sp, #48]	; 0x30
 800a2c2:	9307      	str	r3, [sp, #28]
 800a2c4:	9302      	str	r3, [sp, #8]
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	461d      	mov	r5, r3
 800a2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ce:	b10a      	cbz	r2, 800a2d4 <_vfiprintf_r+0xdc>
 800a2d0:	2a25      	cmp	r2, #37	; 0x25
 800a2d2:	d1f9      	bne.n	800a2c8 <_vfiprintf_r+0xd0>
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	ebb5 0803 	subs.w	r8, r5, r3
 800a2da:	d00d      	beq.n	800a2f8 <_vfiprintf_r+0x100>
 800a2dc:	e9c6 3800 	strd	r3, r8, [r6]
 800a2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e2:	4443      	add	r3, r8
 800a2e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	2b07      	cmp	r3, #7
 800a2ec:	930d      	str	r3, [sp, #52]	; 0x34
 800a2ee:	dc75      	bgt.n	800a3dc <_vfiprintf_r+0x1e4>
 800a2f0:	3608      	adds	r6, #8
 800a2f2:	9b02      	ldr	r3, [sp, #8]
 800a2f4:	4443      	add	r3, r8
 800a2f6:	9302      	str	r3, [sp, #8]
 800a2f8:	782b      	ldrb	r3, [r5, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 83d6 	beq.w	800aaac <_vfiprintf_r+0x8b4>
 800a300:	2300      	movs	r3, #0
 800a302:	f04f 31ff 	mov.w	r1, #4294967295
 800a306:	1c6a      	adds	r2, r5, #1
 800a308:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a30c:	9100      	str	r1, [sp, #0]
 800a30e:	9303      	str	r3, [sp, #12]
 800a310:	469a      	mov	sl, r3
 800a312:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a316:	9201      	str	r2, [sp, #4]
 800a318:	f1a3 0220 	sub.w	r2, r3, #32
 800a31c:	2a5a      	cmp	r2, #90	; 0x5a
 800a31e:	f200 831f 	bhi.w	800a960 <_vfiprintf_r+0x768>
 800a322:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a326:	009b      	.short	0x009b
 800a328:	031d031d 	.word	0x031d031d
 800a32c:	031d00a3 	.word	0x031d00a3
 800a330:	031d031d 	.word	0x031d031d
 800a334:	031d0082 	.word	0x031d0082
 800a338:	00a6031d 	.word	0x00a6031d
 800a33c:	031d00b0 	.word	0x031d00b0
 800a340:	00b200ad 	.word	0x00b200ad
 800a344:	00cd031d 	.word	0x00cd031d
 800a348:	00d000d0 	.word	0x00d000d0
 800a34c:	00d000d0 	.word	0x00d000d0
 800a350:	00d000d0 	.word	0x00d000d0
 800a354:	00d000d0 	.word	0x00d000d0
 800a358:	031d00d0 	.word	0x031d00d0
 800a35c:	031d031d 	.word	0x031d031d
 800a360:	031d031d 	.word	0x031d031d
 800a364:	031d031d 	.word	0x031d031d
 800a368:	031d031d 	.word	0x031d031d
 800a36c:	010800fa 	.word	0x010800fa
 800a370:	031d031d 	.word	0x031d031d
 800a374:	031d031d 	.word	0x031d031d
 800a378:	031d031d 	.word	0x031d031d
 800a37c:	031d031d 	.word	0x031d031d
 800a380:	031d031d 	.word	0x031d031d
 800a384:	031d0158 	.word	0x031d0158
 800a388:	031d031d 	.word	0x031d031d
 800a38c:	031d01a1 	.word	0x031d01a1
 800a390:	031d027e 	.word	0x031d027e
 800a394:	029e031d 	.word	0x029e031d
 800a398:	031d031d 	.word	0x031d031d
 800a39c:	031d031d 	.word	0x031d031d
 800a3a0:	031d031d 	.word	0x031d031d
 800a3a4:	031d031d 	.word	0x031d031d
 800a3a8:	031d031d 	.word	0x031d031d
 800a3ac:	010a00fa 	.word	0x010a00fa
 800a3b0:	031d031d 	.word	0x031d031d
 800a3b4:	00e0031d 	.word	0x00e0031d
 800a3b8:	00f4010a 	.word	0x00f4010a
 800a3bc:	00ed031d 	.word	0x00ed031d
 800a3c0:	0136031d 	.word	0x0136031d
 800a3c4:	018f015a 	.word	0x018f015a
 800a3c8:	031d00f4 	.word	0x031d00f4
 800a3cc:	009901a1 	.word	0x009901a1
 800a3d0:	031d0280 	.word	0x031d0280
 800a3d4:	0065031d 	.word	0x0065031d
 800a3d8:	0099031d 	.word	0x0099031d
 800a3dc:	aa0c      	add	r2, sp, #48	; 0x30
 800a3de:	4639      	mov	r1, r7
 800a3e0:	4648      	mov	r0, r9
 800a3e2:	f7ff fed7 	bl	800a194 <__sprint_r>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f040 833f 	bne.w	800aa6a <_vfiprintf_r+0x872>
 800a3ec:	ae0f      	add	r6, sp, #60	; 0x3c
 800a3ee:	e780      	b.n	800a2f2 <_vfiprintf_r+0xfa>
 800a3f0:	4a9c      	ldr	r2, [pc, #624]	; (800a664 <_vfiprintf_r+0x46c>)
 800a3f2:	9205      	str	r2, [sp, #20]
 800a3f4:	f01a 0220 	ands.w	r2, sl, #32
 800a3f8:	f000 8235 	beq.w	800a866 <_vfiprintf_r+0x66e>
 800a3fc:	3407      	adds	r4, #7
 800a3fe:	f024 0207 	bic.w	r2, r4, #7
 800a402:	4693      	mov	fp, r2
 800a404:	6855      	ldr	r5, [r2, #4]
 800a406:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a40a:	f01a 0f01 	tst.w	sl, #1
 800a40e:	d009      	beq.n	800a424 <_vfiprintf_r+0x22c>
 800a410:	ea54 0205 	orrs.w	r2, r4, r5
 800a414:	bf1f      	itttt	ne
 800a416:	2230      	movne	r2, #48	; 0x30
 800a418:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800a41c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800a420:	f04a 0a02 	orrne.w	sl, sl, #2
 800a424:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800a428:	e11a      	b.n	800a660 <_vfiprintf_r+0x468>
 800a42a:	4648      	mov	r0, r9
 800a42c:	f7fe fdca 	bl	8008fc4 <_localeconv_r>
 800a430:	6843      	ldr	r3, [r0, #4]
 800a432:	4618      	mov	r0, r3
 800a434:	ee08 3a10 	vmov	s16, r3
 800a438:	f7f5 feca 	bl	80001d0 <strlen>
 800a43c:	9007      	str	r0, [sp, #28]
 800a43e:	4648      	mov	r0, r9
 800a440:	f7fe fdc0 	bl	8008fc4 <_localeconv_r>
 800a444:	6883      	ldr	r3, [r0, #8]
 800a446:	9306      	str	r3, [sp, #24]
 800a448:	9b07      	ldr	r3, [sp, #28]
 800a44a:	b12b      	cbz	r3, 800a458 <_vfiprintf_r+0x260>
 800a44c:	9b06      	ldr	r3, [sp, #24]
 800a44e:	b11b      	cbz	r3, 800a458 <_vfiprintf_r+0x260>
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	b10b      	cbz	r3, 800a458 <_vfiprintf_r+0x260>
 800a454:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800a458:	9a01      	ldr	r2, [sp, #4]
 800a45a:	e75a      	b.n	800a312 <_vfiprintf_r+0x11a>
 800a45c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1f9      	bne.n	800a458 <_vfiprintf_r+0x260>
 800a464:	2320      	movs	r3, #32
 800a466:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a46a:	e7f5      	b.n	800a458 <_vfiprintf_r+0x260>
 800a46c:	f04a 0a01 	orr.w	sl, sl, #1
 800a470:	e7f2      	b.n	800a458 <_vfiprintf_r+0x260>
 800a472:	f854 3b04 	ldr.w	r3, [r4], #4
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	daed      	bge.n	800a458 <_vfiprintf_r+0x260>
 800a47c:	425b      	negs	r3, r3
 800a47e:	9303      	str	r3, [sp, #12]
 800a480:	f04a 0a04 	orr.w	sl, sl, #4
 800a484:	e7e8      	b.n	800a458 <_vfiprintf_r+0x260>
 800a486:	232b      	movs	r3, #43	; 0x2b
 800a488:	e7ed      	b.n	800a466 <_vfiprintf_r+0x26e>
 800a48a:	9a01      	ldr	r2, [sp, #4]
 800a48c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a490:	2b2a      	cmp	r3, #42	; 0x2a
 800a492:	d112      	bne.n	800a4ba <_vfiprintf_r+0x2c2>
 800a494:	f854 0b04 	ldr.w	r0, [r4], #4
 800a498:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800a49c:	e9cd 3200 	strd	r3, r2, [sp]
 800a4a0:	e7da      	b.n	800a458 <_vfiprintf_r+0x260>
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	200a      	movs	r0, #10
 800a4a6:	fb00 1303 	mla	r3, r0, r3, r1
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a4b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a4b4:	2909      	cmp	r1, #9
 800a4b6:	d9f4      	bls.n	800a4a2 <_vfiprintf_r+0x2aa>
 800a4b8:	e72d      	b.n	800a316 <_vfiprintf_r+0x11e>
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	9100      	str	r1, [sp, #0]
 800a4be:	e7f7      	b.n	800a4b0 <_vfiprintf_r+0x2b8>
 800a4c0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a4c4:	e7c8      	b.n	800a458 <_vfiprintf_r+0x260>
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	9a01      	ldr	r2, [sp, #4]
 800a4ca:	9103      	str	r1, [sp, #12]
 800a4cc:	9903      	ldr	r1, [sp, #12]
 800a4ce:	3b30      	subs	r3, #48	; 0x30
 800a4d0:	200a      	movs	r0, #10
 800a4d2:	fb00 3301 	mla	r3, r0, r1, r3
 800a4d6:	9303      	str	r3, [sp, #12]
 800a4d8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a4dc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a4e0:	2909      	cmp	r1, #9
 800a4e2:	d9f3      	bls.n	800a4cc <_vfiprintf_r+0x2d4>
 800a4e4:	e717      	b.n	800a316 <_vfiprintf_r+0x11e>
 800a4e6:	9b01      	ldr	r3, [sp, #4]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b68      	cmp	r3, #104	; 0x68
 800a4ec:	bf01      	itttt	eq
 800a4ee:	9b01      	ldreq	r3, [sp, #4]
 800a4f0:	3301      	addeq	r3, #1
 800a4f2:	9301      	streq	r3, [sp, #4]
 800a4f4:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800a4f8:	bf18      	it	ne
 800a4fa:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800a4fe:	e7ab      	b.n	800a458 <_vfiprintf_r+0x260>
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b6c      	cmp	r3, #108	; 0x6c
 800a506:	d105      	bne.n	800a514 <_vfiprintf_r+0x31c>
 800a508:	9b01      	ldr	r3, [sp, #4]
 800a50a:	3301      	adds	r3, #1
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	f04a 0a20 	orr.w	sl, sl, #32
 800a512:	e7a1      	b.n	800a458 <_vfiprintf_r+0x260>
 800a514:	f04a 0a10 	orr.w	sl, sl, #16
 800a518:	e79e      	b.n	800a458 <_vfiprintf_r+0x260>
 800a51a:	46a3      	mov	fp, r4
 800a51c:	2100      	movs	r1, #0
 800a51e:	f85b 3b04 	ldr.w	r3, [fp], #4
 800a522:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800a526:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800a52a:	2301      	movs	r3, #1
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	460d      	mov	r5, r1
 800a530:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800a534:	e0ad      	b.n	800a692 <_vfiprintf_r+0x49a>
 800a536:	f04a 0a10 	orr.w	sl, sl, #16
 800a53a:	f01a 0f20 	tst.w	sl, #32
 800a53e:	d011      	beq.n	800a564 <_vfiprintf_r+0x36c>
 800a540:	3407      	adds	r4, #7
 800a542:	f024 0307 	bic.w	r3, r4, #7
 800a546:	469b      	mov	fp, r3
 800a548:	685d      	ldr	r5, [r3, #4]
 800a54a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a54e:	2d00      	cmp	r5, #0
 800a550:	da06      	bge.n	800a560 <_vfiprintf_r+0x368>
 800a552:	4264      	negs	r4, r4
 800a554:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a558:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800a55c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a560:	2301      	movs	r3, #1
 800a562:	e04a      	b.n	800a5fa <_vfiprintf_r+0x402>
 800a564:	46a3      	mov	fp, r4
 800a566:	f01a 0f10 	tst.w	sl, #16
 800a56a:	f85b 5b04 	ldr.w	r5, [fp], #4
 800a56e:	d002      	beq.n	800a576 <_vfiprintf_r+0x37e>
 800a570:	462c      	mov	r4, r5
 800a572:	17ed      	asrs	r5, r5, #31
 800a574:	e7eb      	b.n	800a54e <_vfiprintf_r+0x356>
 800a576:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a57a:	d003      	beq.n	800a584 <_vfiprintf_r+0x38c>
 800a57c:	b22c      	sxth	r4, r5
 800a57e:	f345 35c0 	sbfx	r5, r5, #15, #1
 800a582:	e7e4      	b.n	800a54e <_vfiprintf_r+0x356>
 800a584:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800a588:	d0f2      	beq.n	800a570 <_vfiprintf_r+0x378>
 800a58a:	b26c      	sxtb	r4, r5
 800a58c:	f345 15c0 	sbfx	r5, r5, #7, #1
 800a590:	e7dd      	b.n	800a54e <_vfiprintf_r+0x356>
 800a592:	f01a 0f20 	tst.w	sl, #32
 800a596:	f104 0b04 	add.w	fp, r4, #4
 800a59a:	d007      	beq.n	800a5ac <_vfiprintf_r+0x3b4>
 800a59c:	9a02      	ldr	r2, [sp, #8]
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	9902      	ldr	r1, [sp, #8]
 800a5a2:	17d2      	asrs	r2, r2, #31
 800a5a4:	e9c3 1200 	strd	r1, r2, [r3]
 800a5a8:	465c      	mov	r4, fp
 800a5aa:	e68c      	b.n	800a2c6 <_vfiprintf_r+0xce>
 800a5ac:	f01a 0f10 	tst.w	sl, #16
 800a5b0:	d003      	beq.n	800a5ba <_vfiprintf_r+0x3c2>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	9a02      	ldr	r2, [sp, #8]
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e7f6      	b.n	800a5a8 <_vfiprintf_r+0x3b0>
 800a5ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a5be:	d003      	beq.n	800a5c8 <_vfiprintf_r+0x3d0>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	9a02      	ldr	r2, [sp, #8]
 800a5c4:	801a      	strh	r2, [r3, #0]
 800a5c6:	e7ef      	b.n	800a5a8 <_vfiprintf_r+0x3b0>
 800a5c8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800a5cc:	d0f1      	beq.n	800a5b2 <_vfiprintf_r+0x3ba>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	9a02      	ldr	r2, [sp, #8]
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	e7e8      	b.n	800a5a8 <_vfiprintf_r+0x3b0>
 800a5d6:	f04a 0a10 	orr.w	sl, sl, #16
 800a5da:	f01a 0320 	ands.w	r3, sl, #32
 800a5de:	d01f      	beq.n	800a620 <_vfiprintf_r+0x428>
 800a5e0:	3407      	adds	r4, #7
 800a5e2:	f024 0307 	bic.w	r3, r4, #7
 800a5e6:	469b      	mov	fp, r3
 800a5e8:	685d      	ldr	r5, [r3, #4]
 800a5ea:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a5ee:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800a5fa:	9a00      	ldr	r2, [sp, #0]
 800a5fc:	3201      	adds	r2, #1
 800a5fe:	f000 8262 	beq.w	800aac6 <_vfiprintf_r+0x8ce>
 800a602:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800a606:	9204      	str	r2, [sp, #16]
 800a608:	ea54 0205 	orrs.w	r2, r4, r5
 800a60c:	f040 8261 	bne.w	800aad2 <_vfiprintf_r+0x8da>
 800a610:	9a00      	ldr	r2, [sp, #0]
 800a612:	2a00      	cmp	r2, #0
 800a614:	f000 8199 	beq.w	800a94a <_vfiprintf_r+0x752>
 800a618:	2b01      	cmp	r3, #1
 800a61a:	f040 825d 	bne.w	800aad8 <_vfiprintf_r+0x8e0>
 800a61e:	e139      	b.n	800a894 <_vfiprintf_r+0x69c>
 800a620:	46a3      	mov	fp, r4
 800a622:	f01a 0510 	ands.w	r5, sl, #16
 800a626:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a62a:	d001      	beq.n	800a630 <_vfiprintf_r+0x438>
 800a62c:	461d      	mov	r5, r3
 800a62e:	e7de      	b.n	800a5ee <_vfiprintf_r+0x3f6>
 800a630:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800a634:	d001      	beq.n	800a63a <_vfiprintf_r+0x442>
 800a636:	b2a4      	uxth	r4, r4
 800a638:	e7d9      	b.n	800a5ee <_vfiprintf_r+0x3f6>
 800a63a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800a63e:	d0d6      	beq.n	800a5ee <_vfiprintf_r+0x3f6>
 800a640:	b2e4      	uxtb	r4, r4
 800a642:	e7f3      	b.n	800a62c <_vfiprintf_r+0x434>
 800a644:	2330      	movs	r3, #48	; 0x30
 800a646:	46a3      	mov	fp, r4
 800a648:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a64c:	2378      	movs	r3, #120	; 0x78
 800a64e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800a652:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a656:	4b03      	ldr	r3, [pc, #12]	; (800a664 <_vfiprintf_r+0x46c>)
 800a658:	9305      	str	r3, [sp, #20]
 800a65a:	2500      	movs	r5, #0
 800a65c:	f04a 0a02 	orr.w	sl, sl, #2
 800a660:	2302      	movs	r3, #2
 800a662:	e7c7      	b.n	800a5f4 <_vfiprintf_r+0x3fc>
 800a664:	0800b734 	.word	0x0800b734
 800a668:	9b00      	ldr	r3, [sp, #0]
 800a66a:	46a3      	mov	fp, r4
 800a66c:	2500      	movs	r5, #0
 800a66e:	1c5c      	adds	r4, r3, #1
 800a670:	f85b 8b04 	ldr.w	r8, [fp], #4
 800a674:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800a678:	f000 80ce 	beq.w	800a818 <_vfiprintf_r+0x620>
 800a67c:	461a      	mov	r2, r3
 800a67e:	4629      	mov	r1, r5
 800a680:	4640      	mov	r0, r8
 800a682:	f7f5 fdad 	bl	80001e0 <memchr>
 800a686:	2800      	cmp	r0, #0
 800a688:	f000 8174 	beq.w	800a974 <_vfiprintf_r+0x77c>
 800a68c:	eba0 0308 	sub.w	r3, r0, r8
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	9b00      	ldr	r3, [sp, #0]
 800a694:	42ab      	cmp	r3, r5
 800a696:	bfb8      	it	lt
 800a698:	462b      	movlt	r3, r5
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800a6a0:	b113      	cbz	r3, 800a6a8 <_vfiprintf_r+0x4b0>
 800a6a2:	9b04      	ldr	r3, [sp, #16]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	9304      	str	r3, [sp, #16]
 800a6a8:	f01a 0302 	ands.w	r3, sl, #2
 800a6ac:	9308      	str	r3, [sp, #32]
 800a6ae:	bf1e      	ittt	ne
 800a6b0:	9b04      	ldrne	r3, [sp, #16]
 800a6b2:	3302      	addne	r3, #2
 800a6b4:	9304      	strne	r3, [sp, #16]
 800a6b6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800a6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a6bc:	d11f      	bne.n	800a6fe <_vfiprintf_r+0x506>
 800a6be:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a6c2:	1a9c      	subs	r4, r3, r2
 800a6c4:	2c00      	cmp	r4, #0
 800a6c6:	dd1a      	ble.n	800a6fe <_vfiprintf_r+0x506>
 800a6c8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a6cc:	48aa      	ldr	r0, [pc, #680]	; (800a978 <_vfiprintf_r+0x780>)
 800a6ce:	6030      	str	r0, [r6, #0]
 800a6d0:	2c10      	cmp	r4, #16
 800a6d2:	f103 0301 	add.w	r3, r3, #1
 800a6d6:	f106 0108 	add.w	r1, r6, #8
 800a6da:	f300 8153 	bgt.w	800a984 <_vfiprintf_r+0x78c>
 800a6de:	6074      	str	r4, [r6, #4]
 800a6e0:	2b07      	cmp	r3, #7
 800a6e2:	4414      	add	r4, r2
 800a6e4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800a6e8:	f340 815e 	ble.w	800a9a8 <_vfiprintf_r+0x7b0>
 800a6ec:	aa0c      	add	r2, sp, #48	; 0x30
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	4648      	mov	r0, r9
 800a6f2:	f7ff fd4f 	bl	800a194 <__sprint_r>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f040 81b7 	bne.w	800aa6a <_vfiprintf_r+0x872>
 800a6fc:	ae0f      	add	r6, sp, #60	; 0x3c
 800a6fe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800a702:	b173      	cbz	r3, 800a722 <_vfiprintf_r+0x52a>
 800a704:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800a708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a70a:	6032      	str	r2, [r6, #0]
 800a70c:	2201      	movs	r2, #1
 800a70e:	6072      	str	r2, [r6, #4]
 800a710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a712:	3301      	adds	r3, #1
 800a714:	3201      	adds	r2, #1
 800a716:	2b07      	cmp	r3, #7
 800a718:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800a71c:	f300 8146 	bgt.w	800a9ac <_vfiprintf_r+0x7b4>
 800a720:	3608      	adds	r6, #8
 800a722:	9b08      	ldr	r3, [sp, #32]
 800a724:	b16b      	cbz	r3, 800a742 <_vfiprintf_r+0x54a>
 800a726:	aa0b      	add	r2, sp, #44	; 0x2c
 800a728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a72a:	6032      	str	r2, [r6, #0]
 800a72c:	2202      	movs	r2, #2
 800a72e:	6072      	str	r2, [r6, #4]
 800a730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a732:	3301      	adds	r3, #1
 800a734:	3202      	adds	r2, #2
 800a736:	2b07      	cmp	r3, #7
 800a738:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800a73c:	f300 813f 	bgt.w	800a9be <_vfiprintf_r+0x7c6>
 800a740:	3608      	adds	r6, #8
 800a742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a744:	2b80      	cmp	r3, #128	; 0x80
 800a746:	d11f      	bne.n	800a788 <_vfiprintf_r+0x590>
 800a748:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a74c:	1a9c      	subs	r4, r3, r2
 800a74e:	2c00      	cmp	r4, #0
 800a750:	dd1a      	ble.n	800a788 <_vfiprintf_r+0x590>
 800a752:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a756:	4889      	ldr	r0, [pc, #548]	; (800a97c <_vfiprintf_r+0x784>)
 800a758:	6030      	str	r0, [r6, #0]
 800a75a:	2c10      	cmp	r4, #16
 800a75c:	f103 0301 	add.w	r3, r3, #1
 800a760:	f106 0108 	add.w	r1, r6, #8
 800a764:	f300 8134 	bgt.w	800a9d0 <_vfiprintf_r+0x7d8>
 800a768:	6074      	str	r4, [r6, #4]
 800a76a:	2b07      	cmp	r3, #7
 800a76c:	4414      	add	r4, r2
 800a76e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800a772:	f340 813f 	ble.w	800a9f4 <_vfiprintf_r+0x7fc>
 800a776:	aa0c      	add	r2, sp, #48	; 0x30
 800a778:	4639      	mov	r1, r7
 800a77a:	4648      	mov	r0, r9
 800a77c:	f7ff fd0a 	bl	800a194 <__sprint_r>
 800a780:	2800      	cmp	r0, #0
 800a782:	f040 8172 	bne.w	800aa6a <_vfiprintf_r+0x872>
 800a786:	ae0f      	add	r6, sp, #60	; 0x3c
 800a788:	9b00      	ldr	r3, [sp, #0]
 800a78a:	1aec      	subs	r4, r5, r3
 800a78c:	2c00      	cmp	r4, #0
 800a78e:	dd1a      	ble.n	800a7c6 <_vfiprintf_r+0x5ce>
 800a790:	4d7a      	ldr	r5, [pc, #488]	; (800a97c <_vfiprintf_r+0x784>)
 800a792:	6035      	str	r5, [r6, #0]
 800a794:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800a798:	2c10      	cmp	r4, #16
 800a79a:	f103 0301 	add.w	r3, r3, #1
 800a79e:	f106 0208 	add.w	r2, r6, #8
 800a7a2:	f300 8129 	bgt.w	800a9f8 <_vfiprintf_r+0x800>
 800a7a6:	6074      	str	r4, [r6, #4]
 800a7a8:	2b07      	cmp	r3, #7
 800a7aa:	440c      	add	r4, r1
 800a7ac:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800a7b0:	f340 8133 	ble.w	800aa1a <_vfiprintf_r+0x822>
 800a7b4:	aa0c      	add	r2, sp, #48	; 0x30
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	4648      	mov	r0, r9
 800a7ba:	f7ff fceb 	bl	800a194 <__sprint_r>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f040 8153 	bne.w	800aa6a <_vfiprintf_r+0x872>
 800a7c4:	ae0f      	add	r6, sp, #60	; 0x3c
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a7ca:	6073      	str	r3, [r6, #4]
 800a7cc:	4418      	add	r0, r3
 800a7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7d0:	f8c6 8000 	str.w	r8, [r6]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	2b07      	cmp	r3, #7
 800a7d8:	900e      	str	r0, [sp, #56]	; 0x38
 800a7da:	930d      	str	r3, [sp, #52]	; 0x34
 800a7dc:	f300 811f 	bgt.w	800aa1e <_vfiprintf_r+0x826>
 800a7e0:	f106 0308 	add.w	r3, r6, #8
 800a7e4:	f01a 0f04 	tst.w	sl, #4
 800a7e8:	f040 8121 	bne.w	800aa2e <_vfiprintf_r+0x836>
 800a7ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a7f0:	9904      	ldr	r1, [sp, #16]
 800a7f2:	428a      	cmp	r2, r1
 800a7f4:	bfac      	ite	ge
 800a7f6:	189b      	addge	r3, r3, r2
 800a7f8:	185b      	addlt	r3, r3, r1
 800a7fa:	9302      	str	r3, [sp, #8]
 800a7fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7fe:	b13b      	cbz	r3, 800a810 <_vfiprintf_r+0x618>
 800a800:	aa0c      	add	r2, sp, #48	; 0x30
 800a802:	4639      	mov	r1, r7
 800a804:	4648      	mov	r0, r9
 800a806:	f7ff fcc5 	bl	800a194 <__sprint_r>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f040 812d 	bne.w	800aa6a <_vfiprintf_r+0x872>
 800a810:	2300      	movs	r3, #0
 800a812:	930d      	str	r3, [sp, #52]	; 0x34
 800a814:	ae0f      	add	r6, sp, #60	; 0x3c
 800a816:	e6c7      	b.n	800a5a8 <_vfiprintf_r+0x3b0>
 800a818:	4640      	mov	r0, r8
 800a81a:	f7f5 fcd9 	bl	80001d0 <strlen>
 800a81e:	9000      	str	r0, [sp, #0]
 800a820:	e737      	b.n	800a692 <_vfiprintf_r+0x49a>
 800a822:	f04a 0a10 	orr.w	sl, sl, #16
 800a826:	f01a 0320 	ands.w	r3, sl, #32
 800a82a:	d008      	beq.n	800a83e <_vfiprintf_r+0x646>
 800a82c:	3407      	adds	r4, #7
 800a82e:	f024 0307 	bic.w	r3, r4, #7
 800a832:	469b      	mov	fp, r3
 800a834:	685d      	ldr	r5, [r3, #4]
 800a836:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a83a:	2301      	movs	r3, #1
 800a83c:	e6da      	b.n	800a5f4 <_vfiprintf_r+0x3fc>
 800a83e:	46a3      	mov	fp, r4
 800a840:	f01a 0510 	ands.w	r5, sl, #16
 800a844:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a848:	d001      	beq.n	800a84e <_vfiprintf_r+0x656>
 800a84a:	461d      	mov	r5, r3
 800a84c:	e7f5      	b.n	800a83a <_vfiprintf_r+0x642>
 800a84e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800a852:	d001      	beq.n	800a858 <_vfiprintf_r+0x660>
 800a854:	b2a4      	uxth	r4, r4
 800a856:	e7f0      	b.n	800a83a <_vfiprintf_r+0x642>
 800a858:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800a85c:	d0ed      	beq.n	800a83a <_vfiprintf_r+0x642>
 800a85e:	b2e4      	uxtb	r4, r4
 800a860:	e7f3      	b.n	800a84a <_vfiprintf_r+0x652>
 800a862:	4a47      	ldr	r2, [pc, #284]	; (800a980 <_vfiprintf_r+0x788>)
 800a864:	e5c5      	b.n	800a3f2 <_vfiprintf_r+0x1fa>
 800a866:	46a3      	mov	fp, r4
 800a868:	f01a 0510 	ands.w	r5, sl, #16
 800a86c:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a870:	d001      	beq.n	800a876 <_vfiprintf_r+0x67e>
 800a872:	4615      	mov	r5, r2
 800a874:	e5c9      	b.n	800a40a <_vfiprintf_r+0x212>
 800a876:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800a87a:	d001      	beq.n	800a880 <_vfiprintf_r+0x688>
 800a87c:	b2a4      	uxth	r4, r4
 800a87e:	e5c4      	b.n	800a40a <_vfiprintf_r+0x212>
 800a880:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800a884:	f43f adc1 	beq.w	800a40a <_vfiprintf_r+0x212>
 800a888:	b2e4      	uxtb	r4, r4
 800a88a:	e7f2      	b.n	800a872 <_vfiprintf_r+0x67a>
 800a88c:	2c0a      	cmp	r4, #10
 800a88e:	f175 0300 	sbcs.w	r3, r5, #0
 800a892:	d205      	bcs.n	800a8a0 <_vfiprintf_r+0x6a8>
 800a894:	3430      	adds	r4, #48	; 0x30
 800a896:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800a89a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800a89e:	e137      	b.n	800ab10 <_vfiprintf_r+0x918>
 800a8a0:	ab38      	add	r3, sp, #224	; 0xe0
 800a8a2:	9308      	str	r3, [sp, #32]
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8aa:	f04f 0a00 	mov.w	sl, #0
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	220a      	movs	r2, #10
 800a8b4:	f103 38ff 	add.w	r8, r3, #4294967295
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7f6 f9c3 	bl	8000c48 <__aeabi_uldivmod>
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	3230      	adds	r2, #48	; 0x30
 800a8c6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8cc:	f10a 0a01 	add.w	sl, sl, #1
 800a8d0:	b1db      	cbz	r3, 800a90a <_vfiprintf_r+0x712>
 800a8d2:	9b06      	ldr	r3, [sp, #24]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	4553      	cmp	r3, sl
 800a8d8:	d117      	bne.n	800a90a <_vfiprintf_r+0x712>
 800a8da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800a8de:	d014      	beq.n	800a90a <_vfiprintf_r+0x712>
 800a8e0:	2c0a      	cmp	r4, #10
 800a8e2:	f175 0300 	sbcs.w	r3, r5, #0
 800a8e6:	d310      	bcc.n	800a90a <_vfiprintf_r+0x712>
 800a8e8:	9b07      	ldr	r3, [sp, #28]
 800a8ea:	eba8 0803 	sub.w	r8, r8, r3
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	ee18 1a10 	vmov	r1, s16
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	f7ff f933 	bl	8009b60 <strncpy>
 800a8fa:	9b06      	ldr	r3, [sp, #24]
 800a8fc:	785b      	ldrb	r3, [r3, #1]
 800a8fe:	b1a3      	cbz	r3, 800a92a <_vfiprintf_r+0x732>
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	3301      	adds	r3, #1
 800a904:	9306      	str	r3, [sp, #24]
 800a906:	f04f 0a00 	mov.w	sl, #0
 800a90a:	2300      	movs	r3, #0
 800a90c:	220a      	movs	r2, #10
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f6 f999 	bl	8000c48 <__aeabi_uldivmod>
 800a916:	2c0a      	cmp	r4, #10
 800a918:	f175 0300 	sbcs.w	r3, r5, #0
 800a91c:	f0c0 80f8 	bcc.w	800ab10 <_vfiprintf_r+0x918>
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	f8cd 8020 	str.w	r8, [sp, #32]
 800a928:	e7c2      	b.n	800a8b0 <_vfiprintf_r+0x6b8>
 800a92a:	469a      	mov	sl, r3
 800a92c:	e7ed      	b.n	800a90a <_vfiprintf_r+0x712>
 800a92e:	f004 030f 	and.w	r3, r4, #15
 800a932:	9a05      	ldr	r2, [sp, #20]
 800a934:	0924      	lsrs	r4, r4, #4
 800a936:	5cd3      	ldrb	r3, [r2, r3]
 800a938:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800a93c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800a940:	092d      	lsrs	r5, r5, #4
 800a942:	ea54 0305 	orrs.w	r3, r4, r5
 800a946:	d1f2      	bne.n	800a92e <_vfiprintf_r+0x736>
 800a948:	e0e2      	b.n	800ab10 <_vfiprintf_r+0x918>
 800a94a:	b933      	cbnz	r3, 800a95a <_vfiprintf_r+0x762>
 800a94c:	f01a 0f01 	tst.w	sl, #1
 800a950:	d003      	beq.n	800a95a <_vfiprintf_r+0x762>
 800a952:	2330      	movs	r3, #48	; 0x30
 800a954:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800a958:	e79f      	b.n	800a89a <_vfiprintf_r+0x6a2>
 800a95a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800a95e:	e0d7      	b.n	800ab10 <_vfiprintf_r+0x918>
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 80a3 	beq.w	800aaac <_vfiprintf_r+0x8b4>
 800a966:	2100      	movs	r1, #0
 800a968:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800a96c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800a970:	46a3      	mov	fp, r4
 800a972:	e5da      	b.n	800a52a <_vfiprintf_r+0x332>
 800a974:	4605      	mov	r5, r0
 800a976:	e68c      	b.n	800a692 <_vfiprintf_r+0x49a>
 800a978:	0800b992 	.word	0x0800b992
 800a97c:	0800b9a2 	.word	0x0800b9a2
 800a980:	0800b745 	.word	0x0800b745
 800a984:	2010      	movs	r0, #16
 800a986:	4402      	add	r2, r0
 800a988:	2b07      	cmp	r3, #7
 800a98a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800a98e:	6070      	str	r0, [r6, #4]
 800a990:	dd07      	ble.n	800a9a2 <_vfiprintf_r+0x7aa>
 800a992:	aa0c      	add	r2, sp, #48	; 0x30
 800a994:	4639      	mov	r1, r7
 800a996:	4648      	mov	r0, r9
 800a998:	f7ff fbfc 	bl	800a194 <__sprint_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d164      	bne.n	800aa6a <_vfiprintf_r+0x872>
 800a9a0:	a90f      	add	r1, sp, #60	; 0x3c
 800a9a2:	3c10      	subs	r4, #16
 800a9a4:	460e      	mov	r6, r1
 800a9a6:	e68f      	b.n	800a6c8 <_vfiprintf_r+0x4d0>
 800a9a8:	460e      	mov	r6, r1
 800a9aa:	e6a8      	b.n	800a6fe <_vfiprintf_r+0x506>
 800a9ac:	aa0c      	add	r2, sp, #48	; 0x30
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	4648      	mov	r0, r9
 800a9b2:	f7ff fbef 	bl	800a194 <__sprint_r>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d157      	bne.n	800aa6a <_vfiprintf_r+0x872>
 800a9ba:	ae0f      	add	r6, sp, #60	; 0x3c
 800a9bc:	e6b1      	b.n	800a722 <_vfiprintf_r+0x52a>
 800a9be:	aa0c      	add	r2, sp, #48	; 0x30
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	4648      	mov	r0, r9
 800a9c4:	f7ff fbe6 	bl	800a194 <__sprint_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d14e      	bne.n	800aa6a <_vfiprintf_r+0x872>
 800a9cc:	ae0f      	add	r6, sp, #60	; 0x3c
 800a9ce:	e6b8      	b.n	800a742 <_vfiprintf_r+0x54a>
 800a9d0:	2010      	movs	r0, #16
 800a9d2:	4402      	add	r2, r0
 800a9d4:	2b07      	cmp	r3, #7
 800a9d6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800a9da:	6070      	str	r0, [r6, #4]
 800a9dc:	dd07      	ble.n	800a9ee <_vfiprintf_r+0x7f6>
 800a9de:	aa0c      	add	r2, sp, #48	; 0x30
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	4648      	mov	r0, r9
 800a9e4:	f7ff fbd6 	bl	800a194 <__sprint_r>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d13e      	bne.n	800aa6a <_vfiprintf_r+0x872>
 800a9ec:	a90f      	add	r1, sp, #60	; 0x3c
 800a9ee:	3c10      	subs	r4, #16
 800a9f0:	460e      	mov	r6, r1
 800a9f2:	e6ae      	b.n	800a752 <_vfiprintf_r+0x55a>
 800a9f4:	460e      	mov	r6, r1
 800a9f6:	e6c7      	b.n	800a788 <_vfiprintf_r+0x590>
 800a9f8:	2010      	movs	r0, #16
 800a9fa:	4401      	add	r1, r0
 800a9fc:	2b07      	cmp	r3, #7
 800a9fe:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800aa02:	6070      	str	r0, [r6, #4]
 800aa04:	dd06      	ble.n	800aa14 <_vfiprintf_r+0x81c>
 800aa06:	aa0c      	add	r2, sp, #48	; 0x30
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4648      	mov	r0, r9
 800aa0c:	f7ff fbc2 	bl	800a194 <__sprint_r>
 800aa10:	bb58      	cbnz	r0, 800aa6a <_vfiprintf_r+0x872>
 800aa12:	aa0f      	add	r2, sp, #60	; 0x3c
 800aa14:	3c10      	subs	r4, #16
 800aa16:	4616      	mov	r6, r2
 800aa18:	e6bb      	b.n	800a792 <_vfiprintf_r+0x59a>
 800aa1a:	4616      	mov	r6, r2
 800aa1c:	e6d3      	b.n	800a7c6 <_vfiprintf_r+0x5ce>
 800aa1e:	aa0c      	add	r2, sp, #48	; 0x30
 800aa20:	4639      	mov	r1, r7
 800aa22:	4648      	mov	r0, r9
 800aa24:	f7ff fbb6 	bl	800a194 <__sprint_r>
 800aa28:	b9f8      	cbnz	r0, 800aa6a <_vfiprintf_r+0x872>
 800aa2a:	ab0f      	add	r3, sp, #60	; 0x3c
 800aa2c:	e6da      	b.n	800a7e4 <_vfiprintf_r+0x5ec>
 800aa2e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800aa32:	1a54      	subs	r4, r2, r1
 800aa34:	2c00      	cmp	r4, #0
 800aa36:	f77f aed9 	ble.w	800a7ec <_vfiprintf_r+0x5f4>
 800aa3a:	4d39      	ldr	r5, [pc, #228]	; (800ab20 <_vfiprintf_r+0x928>)
 800aa3c:	2610      	movs	r6, #16
 800aa3e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800aa42:	2c10      	cmp	r4, #16
 800aa44:	f102 0201 	add.w	r2, r2, #1
 800aa48:	601d      	str	r5, [r3, #0]
 800aa4a:	dc1d      	bgt.n	800aa88 <_vfiprintf_r+0x890>
 800aa4c:	605c      	str	r4, [r3, #4]
 800aa4e:	2a07      	cmp	r2, #7
 800aa50:	440c      	add	r4, r1
 800aa52:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800aa56:	f77f aec9 	ble.w	800a7ec <_vfiprintf_r+0x5f4>
 800aa5a:	aa0c      	add	r2, sp, #48	; 0x30
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	4648      	mov	r0, r9
 800aa60:	f7ff fb98 	bl	800a194 <__sprint_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f43f aec1 	beq.w	800a7ec <_vfiprintf_r+0x5f4>
 800aa6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa6c:	07d9      	lsls	r1, r3, #31
 800aa6e:	d405      	bmi.n	800aa7c <_vfiprintf_r+0x884>
 800aa70:	89bb      	ldrh	r3, [r7, #12]
 800aa72:	059a      	lsls	r2, r3, #22
 800aa74:	d402      	bmi.n	800aa7c <_vfiprintf_r+0x884>
 800aa76:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aa78:	f7fe faab 	bl	8008fd2 <__retarget_lock_release_recursive>
 800aa7c:	89bb      	ldrh	r3, [r7, #12]
 800aa7e:	065b      	lsls	r3, r3, #25
 800aa80:	f57f abed 	bpl.w	800a25e <_vfiprintf_r+0x66>
 800aa84:	f7ff bbe8 	b.w	800a258 <_vfiprintf_r+0x60>
 800aa88:	3110      	adds	r1, #16
 800aa8a:	2a07      	cmp	r2, #7
 800aa8c:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800aa90:	605e      	str	r6, [r3, #4]
 800aa92:	dc02      	bgt.n	800aa9a <_vfiprintf_r+0x8a2>
 800aa94:	3308      	adds	r3, #8
 800aa96:	3c10      	subs	r4, #16
 800aa98:	e7d1      	b.n	800aa3e <_vfiprintf_r+0x846>
 800aa9a:	aa0c      	add	r2, sp, #48	; 0x30
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4648      	mov	r0, r9
 800aaa0:	f7ff fb78 	bl	800a194 <__sprint_r>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d1e0      	bne.n	800aa6a <_vfiprintf_r+0x872>
 800aaa8:	ab0f      	add	r3, sp, #60	; 0x3c
 800aaaa:	e7f4      	b.n	800aa96 <_vfiprintf_r+0x89e>
 800aaac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaae:	b913      	cbnz	r3, 800aab6 <_vfiprintf_r+0x8be>
 800aab0:	2300      	movs	r3, #0
 800aab2:	930d      	str	r3, [sp, #52]	; 0x34
 800aab4:	e7d9      	b.n	800aa6a <_vfiprintf_r+0x872>
 800aab6:	aa0c      	add	r2, sp, #48	; 0x30
 800aab8:	4639      	mov	r1, r7
 800aaba:	4648      	mov	r0, r9
 800aabc:	f7ff fb6a 	bl	800a194 <__sprint_r>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0f5      	beq.n	800aab0 <_vfiprintf_r+0x8b8>
 800aac4:	e7d1      	b.n	800aa6a <_vfiprintf_r+0x872>
 800aac6:	ea54 0205 	orrs.w	r2, r4, r5
 800aaca:	f8cd a010 	str.w	sl, [sp, #16]
 800aace:	f43f ada3 	beq.w	800a618 <_vfiprintf_r+0x420>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	f43f aeda 	beq.w	800a88c <_vfiprintf_r+0x694>
 800aad8:	2b02      	cmp	r3, #2
 800aada:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800aade:	f43f af26 	beq.w	800a92e <_vfiprintf_r+0x736>
 800aae2:	f004 0307 	and.w	r3, r4, #7
 800aae6:	08e4      	lsrs	r4, r4, #3
 800aae8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800aaec:	08ed      	lsrs	r5, r5, #3
 800aaee:	3330      	adds	r3, #48	; 0x30
 800aaf0:	ea54 0105 	orrs.w	r1, r4, r5
 800aaf4:	4642      	mov	r2, r8
 800aaf6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800aafa:	d1f2      	bne.n	800aae2 <_vfiprintf_r+0x8ea>
 800aafc:	9904      	ldr	r1, [sp, #16]
 800aafe:	07c8      	lsls	r0, r1, #31
 800ab00:	d506      	bpl.n	800ab10 <_vfiprintf_r+0x918>
 800ab02:	2b30      	cmp	r3, #48	; 0x30
 800ab04:	d004      	beq.n	800ab10 <_vfiprintf_r+0x918>
 800ab06:	2330      	movs	r3, #48	; 0x30
 800ab08:	f808 3c01 	strb.w	r3, [r8, #-1]
 800ab0c:	f1a2 0802 	sub.w	r8, r2, #2
 800ab10:	ab38      	add	r3, sp, #224	; 0xe0
 800ab12:	eba3 0308 	sub.w	r3, r3, r8
 800ab16:	9d00      	ldr	r5, [sp, #0]
 800ab18:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	e5b8      	b.n	800a692 <_vfiprintf_r+0x49a>
 800ab20:	0800b992 	.word	0x0800b992

0800ab24 <__sbprintf>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	460c      	mov	r4, r1
 800ab28:	8989      	ldrh	r1, [r1, #12]
 800ab2a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800ab2e:	f021 0102 	bic.w	r1, r1, #2
 800ab32:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ab36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ab38:	911b      	str	r1, [sp, #108]	; 0x6c
 800ab3a:	89e1      	ldrh	r1, [r4, #14]
 800ab3c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ab40:	69e1      	ldr	r1, [r4, #28]
 800ab42:	9109      	str	r1, [sp, #36]	; 0x24
 800ab44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab46:	910b      	str	r1, [sp, #44]	; 0x2c
 800ab48:	a91c      	add	r1, sp, #112	; 0x70
 800ab4a:	9102      	str	r1, [sp, #8]
 800ab4c:	9106      	str	r1, [sp, #24]
 800ab4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab52:	4606      	mov	r6, r0
 800ab54:	9104      	str	r1, [sp, #16]
 800ab56:	9107      	str	r1, [sp, #28]
 800ab58:	a818      	add	r0, sp, #96	; 0x60
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	e9cd 3200 	strd	r3, r2, [sp]
 800ab60:	9108      	str	r1, [sp, #32]
 800ab62:	f7fe fa33 	bl	8008fcc <__retarget_lock_init_recursive>
 800ab66:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab6a:	a902      	add	r1, sp, #8
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff fb43 	bl	800a1f8 <_vfiprintf_r>
 800ab72:	1e05      	subs	r5, r0, #0
 800ab74:	db07      	blt.n	800ab86 <__sbprintf+0x62>
 800ab76:	a902      	add	r1, sp, #8
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f000 f90f 	bl	800ad9c <_fflush_r>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	bf18      	it	ne
 800ab82:	f04f 35ff 	movne.w	r5, #4294967295
 800ab86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ab8a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ab8c:	065b      	lsls	r3, r3, #25
 800ab8e:	bf42      	ittt	mi
 800ab90:	89a3      	ldrhmi	r3, [r4, #12]
 800ab92:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800ab96:	81a3      	strhmi	r3, [r4, #12]
 800ab98:	f7fe fa19 	bl	8008fce <__retarget_lock_close_recursive>
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800aba2:	bd70      	pop	{r4, r5, r6, pc}

0800aba4 <__ascii_wctomb>:
 800aba4:	b149      	cbz	r1, 800abba <__ascii_wctomb+0x16>
 800aba6:	2aff      	cmp	r2, #255	; 0xff
 800aba8:	bf85      	ittet	hi
 800abaa:	238a      	movhi	r3, #138	; 0x8a
 800abac:	6003      	strhi	r3, [r0, #0]
 800abae:	700a      	strbls	r2, [r1, #0]
 800abb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800abb4:	bf98      	it	ls
 800abb6:	2001      	movls	r0, #1
 800abb8:	4770      	bx	lr
 800abba:	4608      	mov	r0, r1
 800abbc:	4770      	bx	lr
	...

0800abc0 <__swsetup_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4b2a      	ldr	r3, [pc, #168]	; (800ac6c <__swsetup_r+0xac>)
 800abc4:	4605      	mov	r5, r0
 800abc6:	6818      	ldr	r0, [r3, #0]
 800abc8:	460c      	mov	r4, r1
 800abca:	b118      	cbz	r0, 800abd4 <__swsetup_r+0x14>
 800abcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800abce:	b90b      	cbnz	r3, 800abd4 <__swsetup_r+0x14>
 800abd0:	f000 f950 	bl	800ae74 <__sinit>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abda:	0718      	lsls	r0, r3, #28
 800abdc:	d422      	bmi.n	800ac24 <__swsetup_r+0x64>
 800abde:	06d9      	lsls	r1, r3, #27
 800abe0:	d407      	bmi.n	800abf2 <__swsetup_r+0x32>
 800abe2:	2309      	movs	r3, #9
 800abe4:	602b      	str	r3, [r5, #0]
 800abe6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	f04f 30ff 	mov.w	r0, #4294967295
 800abf0:	e034      	b.n	800ac5c <__swsetup_r+0x9c>
 800abf2:	0758      	lsls	r0, r3, #29
 800abf4:	d512      	bpl.n	800ac1c <__swsetup_r+0x5c>
 800abf6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800abf8:	b141      	cbz	r1, 800ac0c <__swsetup_r+0x4c>
 800abfa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800abfe:	4299      	cmp	r1, r3
 800ac00:	d002      	beq.n	800ac08 <__swsetup_r+0x48>
 800ac02:	4628      	mov	r0, r5
 800ac04:	f7fe f91e 	bl	8008e44 <_free_r>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac12:	81a3      	strh	r3, [r4, #12]
 800ac14:	2300      	movs	r3, #0
 800ac16:	6063      	str	r3, [r4, #4]
 800ac18:	6923      	ldr	r3, [r4, #16]
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	f043 0308 	orr.w	r3, r3, #8
 800ac22:	81a3      	strh	r3, [r4, #12]
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	b94b      	cbnz	r3, 800ac3c <__swsetup_r+0x7c>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac32:	d003      	beq.n	800ac3c <__swsetup_r+0x7c>
 800ac34:	4621      	mov	r1, r4
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 fb46 	bl	800b2c8 <__smakebuf_r>
 800ac3c:	89a0      	ldrh	r0, [r4, #12]
 800ac3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac42:	f010 0301 	ands.w	r3, r0, #1
 800ac46:	d00a      	beq.n	800ac5e <__swsetup_r+0x9e>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60a3      	str	r3, [r4, #8]
 800ac4c:	6963      	ldr	r3, [r4, #20]
 800ac4e:	425b      	negs	r3, r3
 800ac50:	61a3      	str	r3, [r4, #24]
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	b943      	cbnz	r3, 800ac68 <__swsetup_r+0xa8>
 800ac56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac5a:	d1c4      	bne.n	800abe6 <__swsetup_r+0x26>
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
 800ac5e:	0781      	lsls	r1, r0, #30
 800ac60:	bf58      	it	pl
 800ac62:	6963      	ldrpl	r3, [r4, #20]
 800ac64:	60a3      	str	r3, [r4, #8]
 800ac66:	e7f4      	b.n	800ac52 <__swsetup_r+0x92>
 800ac68:	2000      	movs	r0, #0
 800ac6a:	e7f7      	b.n	800ac5c <__swsetup_r+0x9c>
 800ac6c:	20000024 	.word	0x20000024

0800ac70 <abort>:
 800ac70:	b508      	push	{r3, lr}
 800ac72:	2006      	movs	r0, #6
 800ac74:	f000 fb92 	bl	800b39c <raise>
 800ac78:	2001      	movs	r0, #1
 800ac7a:	f7fb fa3d 	bl	80060f8 <_exit>
	...

0800ac80 <__sflush_r>:
 800ac80:	898b      	ldrh	r3, [r1, #12]
 800ac82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	0718      	lsls	r0, r3, #28
 800ac8e:	460c      	mov	r4, r1
 800ac90:	d45f      	bmi.n	800ad52 <__sflush_r+0xd2>
 800ac92:	684b      	ldr	r3, [r1, #4]
 800ac94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	818a      	strh	r2, [r1, #12]
 800ac9c:	dc05      	bgt.n	800acaa <__sflush_r+0x2a>
 800ac9e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dc02      	bgt.n	800acaa <__sflush_r+0x2a>
 800aca4:	2000      	movs	r0, #0
 800aca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acac:	2e00      	cmp	r6, #0
 800acae:	d0f9      	beq.n	800aca4 <__sflush_r+0x24>
 800acb0:	2300      	movs	r3, #0
 800acb2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb6:	682f      	ldr	r7, [r5, #0]
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	d036      	beq.n	800ad2a <__sflush_r+0xaa>
 800acbc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	075a      	lsls	r2, r3, #29
 800acc2:	d505      	bpl.n	800acd0 <__sflush_r+0x50>
 800acc4:	6863      	ldr	r3, [r4, #4]
 800acc6:	1ac0      	subs	r0, r0, r3
 800acc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800acca:	b10b      	cbz	r3, 800acd0 <__sflush_r+0x50>
 800accc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800acce:	1ac0      	subs	r0, r0, r3
 800acd0:	2300      	movs	r3, #0
 800acd2:	4602      	mov	r2, r0
 800acd4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acd6:	69e1      	ldr	r1, [r4, #28]
 800acd8:	4628      	mov	r0, r5
 800acda:	47b0      	blx	r6
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	d106      	bne.n	800acf0 <__sflush_r+0x70>
 800ace2:	6829      	ldr	r1, [r5, #0]
 800ace4:	291d      	cmp	r1, #29
 800ace6:	d830      	bhi.n	800ad4a <__sflush_r+0xca>
 800ace8:	4a2b      	ldr	r2, [pc, #172]	; (800ad98 <__sflush_r+0x118>)
 800acea:	40ca      	lsrs	r2, r1
 800acec:	07d6      	lsls	r6, r2, #31
 800acee:	d52c      	bpl.n	800ad4a <__sflush_r+0xca>
 800acf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acf4:	b21b      	sxth	r3, r3
 800acf6:	2200      	movs	r2, #0
 800acf8:	6062      	str	r2, [r4, #4]
 800acfa:	04d9      	lsls	r1, r3, #19
 800acfc:	6922      	ldr	r2, [r4, #16]
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	6022      	str	r2, [r4, #0]
 800ad02:	d504      	bpl.n	800ad0e <__sflush_r+0x8e>
 800ad04:	1c42      	adds	r2, r0, #1
 800ad06:	d101      	bne.n	800ad0c <__sflush_r+0x8c>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b903      	cbnz	r3, 800ad0e <__sflush_r+0x8e>
 800ad0c:	6520      	str	r0, [r4, #80]	; 0x50
 800ad0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ad10:	602f      	str	r7, [r5, #0]
 800ad12:	2900      	cmp	r1, #0
 800ad14:	d0c6      	beq.n	800aca4 <__sflush_r+0x24>
 800ad16:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ad1a:	4299      	cmp	r1, r3
 800ad1c:	d002      	beq.n	800ad24 <__sflush_r+0xa4>
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f7fe f890 	bl	8008e44 <_free_r>
 800ad24:	2000      	movs	r0, #0
 800ad26:	6320      	str	r0, [r4, #48]	; 0x30
 800ad28:	e7bd      	b.n	800aca6 <__sflush_r+0x26>
 800ad2a:	69e1      	ldr	r1, [r4, #28]
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	4628      	mov	r0, r5
 800ad30:	47b0      	blx	r6
 800ad32:	1c41      	adds	r1, r0, #1
 800ad34:	d1c3      	bne.n	800acbe <__sflush_r+0x3e>
 800ad36:	682b      	ldr	r3, [r5, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d0c0      	beq.n	800acbe <__sflush_r+0x3e>
 800ad3c:	2b1d      	cmp	r3, #29
 800ad3e:	d001      	beq.n	800ad44 <__sflush_r+0xc4>
 800ad40:	2b16      	cmp	r3, #22
 800ad42:	d101      	bne.n	800ad48 <__sflush_r+0xc8>
 800ad44:	602f      	str	r7, [r5, #0]
 800ad46:	e7ad      	b.n	800aca4 <__sflush_r+0x24>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	e7a9      	b.n	800aca6 <__sflush_r+0x26>
 800ad52:	690f      	ldr	r7, [r1, #16]
 800ad54:	2f00      	cmp	r7, #0
 800ad56:	d0a5      	beq.n	800aca4 <__sflush_r+0x24>
 800ad58:	079b      	lsls	r3, r3, #30
 800ad5a:	680e      	ldr	r6, [r1, #0]
 800ad5c:	bf08      	it	eq
 800ad5e:	694b      	ldreq	r3, [r1, #20]
 800ad60:	600f      	str	r7, [r1, #0]
 800ad62:	bf18      	it	ne
 800ad64:	2300      	movne	r3, #0
 800ad66:	eba6 0807 	sub.w	r8, r6, r7
 800ad6a:	608b      	str	r3, [r1, #8]
 800ad6c:	f1b8 0f00 	cmp.w	r8, #0
 800ad70:	dd98      	ble.n	800aca4 <__sflush_r+0x24>
 800ad72:	69e1      	ldr	r1, [r4, #28]
 800ad74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad76:	4643      	mov	r3, r8
 800ad78:	463a      	mov	r2, r7
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	47b0      	blx	r6
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	dc06      	bgt.n	800ad90 <__sflush_r+0x110>
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8e:	e78a      	b.n	800aca6 <__sflush_r+0x26>
 800ad90:	4407      	add	r7, r0
 800ad92:	eba8 0800 	sub.w	r8, r8, r0
 800ad96:	e7e9      	b.n	800ad6c <__sflush_r+0xec>
 800ad98:	20400001 	.word	0x20400001

0800ad9c <_fflush_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	460c      	mov	r4, r1
 800ada0:	4605      	mov	r5, r0
 800ada2:	b118      	cbz	r0, 800adac <_fflush_r+0x10>
 800ada4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ada6:	b90b      	cbnz	r3, 800adac <_fflush_r+0x10>
 800ada8:	f000 f864 	bl	800ae74 <__sinit>
 800adac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb0:	b1bb      	cbz	r3, 800ade2 <_fflush_r+0x46>
 800adb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adb4:	07d0      	lsls	r0, r2, #31
 800adb6:	d404      	bmi.n	800adc2 <_fflush_r+0x26>
 800adb8:	0599      	lsls	r1, r3, #22
 800adba:	d402      	bmi.n	800adc2 <_fflush_r+0x26>
 800adbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adbe:	f7fe f907 	bl	8008fd0 <__retarget_lock_acquire_recursive>
 800adc2:	4628      	mov	r0, r5
 800adc4:	4621      	mov	r1, r4
 800adc6:	f7ff ff5b 	bl	800ac80 <__sflush_r>
 800adca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adcc:	07da      	lsls	r2, r3, #31
 800adce:	4605      	mov	r5, r0
 800add0:	d405      	bmi.n	800adde <_fflush_r+0x42>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	059b      	lsls	r3, r3, #22
 800add6:	d402      	bmi.n	800adde <_fflush_r+0x42>
 800add8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adda:	f7fe f8fa 	bl	8008fd2 <__retarget_lock_release_recursive>
 800adde:	4628      	mov	r0, r5
 800ade0:	bd38      	pop	{r3, r4, r5, pc}
 800ade2:	461d      	mov	r5, r3
 800ade4:	e7fb      	b.n	800adde <_fflush_r+0x42>
	...

0800ade8 <std>:
 800ade8:	2300      	movs	r3, #0
 800adea:	b510      	push	{r4, lr}
 800adec:	4604      	mov	r4, r0
 800adee:	e9c0 3300 	strd	r3, r3, [r0]
 800adf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adf6:	6083      	str	r3, [r0, #8]
 800adf8:	8181      	strh	r1, [r0, #12]
 800adfa:	6643      	str	r3, [r0, #100]	; 0x64
 800adfc:	81c2      	strh	r2, [r0, #14]
 800adfe:	6183      	str	r3, [r0, #24]
 800ae00:	4619      	mov	r1, r3
 800ae02:	2208      	movs	r2, #8
 800ae04:	305c      	adds	r0, #92	; 0x5c
 800ae06:	f7fb ff35 	bl	8006c74 <memset>
 800ae0a:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <std+0x40>)
 800ae0c:	6223      	str	r3, [r4, #32]
 800ae0e:	4b07      	ldr	r3, [pc, #28]	; (800ae2c <std+0x44>)
 800ae10:	6263      	str	r3, [r4, #36]	; 0x24
 800ae12:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <std+0x48>)
 800ae14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae16:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <std+0x4c>)
 800ae18:	61e4      	str	r4, [r4, #28]
 800ae1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae24:	f7fe b8d2 	b.w	8008fcc <__retarget_lock_init_recursive>
 800ae28:	0800b3d5 	.word	0x0800b3d5
 800ae2c:	0800b3f7 	.word	0x0800b3f7
 800ae30:	0800b42f 	.word	0x0800b42f
 800ae34:	0800b453 	.word	0x0800b453

0800ae38 <_cleanup_r>:
 800ae38:	4901      	ldr	r1, [pc, #4]	; (800ae40 <_cleanup_r+0x8>)
 800ae3a:	f000 b9f9 	b.w	800b230 <_fwalk_reent>
 800ae3e:	bf00      	nop
 800ae40:	0800b55d 	.word	0x0800b55d

0800ae44 <__sfp_lock_acquire>:
 800ae44:	4801      	ldr	r0, [pc, #4]	; (800ae4c <__sfp_lock_acquire+0x8>)
 800ae46:	f7fe b8c3 	b.w	8008fd0 <__retarget_lock_acquire_recursive>
 800ae4a:	bf00      	nop
 800ae4c:	20000ea2 	.word	0x20000ea2

0800ae50 <__sfp_lock_release>:
 800ae50:	4801      	ldr	r0, [pc, #4]	; (800ae58 <__sfp_lock_release+0x8>)
 800ae52:	f7fe b8be 	b.w	8008fd2 <__retarget_lock_release_recursive>
 800ae56:	bf00      	nop
 800ae58:	20000ea2 	.word	0x20000ea2

0800ae5c <__sinit_lock_acquire>:
 800ae5c:	4801      	ldr	r0, [pc, #4]	; (800ae64 <__sinit_lock_acquire+0x8>)
 800ae5e:	f7fe b8b7 	b.w	8008fd0 <__retarget_lock_acquire_recursive>
 800ae62:	bf00      	nop
 800ae64:	20000ea3 	.word	0x20000ea3

0800ae68 <__sinit_lock_release>:
 800ae68:	4801      	ldr	r0, [pc, #4]	; (800ae70 <__sinit_lock_release+0x8>)
 800ae6a:	f7fe b8b2 	b.w	8008fd2 <__retarget_lock_release_recursive>
 800ae6e:	bf00      	nop
 800ae70:	20000ea3 	.word	0x20000ea3

0800ae74 <__sinit>:
 800ae74:	b510      	push	{r4, lr}
 800ae76:	4604      	mov	r4, r0
 800ae78:	f7ff fff0 	bl	800ae5c <__sinit_lock_acquire>
 800ae7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ae7e:	b11a      	cbz	r2, 800ae88 <__sinit+0x14>
 800ae80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae84:	f7ff bff0 	b.w	800ae68 <__sinit_lock_release>
 800ae88:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <__sinit+0x4c>)
 800ae8a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800ae92:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800ae96:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800ae9a:	6860      	ldr	r0, [r4, #4]
 800ae9c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800aea0:	2104      	movs	r1, #4
 800aea2:	f7ff ffa1 	bl	800ade8 <std>
 800aea6:	68a0      	ldr	r0, [r4, #8]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	2109      	movs	r1, #9
 800aeac:	f7ff ff9c 	bl	800ade8 <std>
 800aeb0:	68e0      	ldr	r0, [r4, #12]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	2112      	movs	r1, #18
 800aeb6:	f7ff ff97 	bl	800ade8 <std>
 800aeba:	2301      	movs	r3, #1
 800aebc:	63a3      	str	r3, [r4, #56]	; 0x38
 800aebe:	e7df      	b.n	800ae80 <__sinit+0xc>
 800aec0:	0800ae39 	.word	0x0800ae39

0800aec4 <__fputwc>:
 800aec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aec8:	4680      	mov	r8, r0
 800aeca:	460e      	mov	r6, r1
 800aecc:	4615      	mov	r5, r2
 800aece:	f7fe ff8b 	bl	8009de8 <__locale_mb_cur_max>
 800aed2:	2801      	cmp	r0, #1
 800aed4:	d11c      	bne.n	800af10 <__fputwc+0x4c>
 800aed6:	1e73      	subs	r3, r6, #1
 800aed8:	2bfe      	cmp	r3, #254	; 0xfe
 800aeda:	d819      	bhi.n	800af10 <__fputwc+0x4c>
 800aedc:	f88d 6004 	strb.w	r6, [sp, #4]
 800aee0:	4604      	mov	r4, r0
 800aee2:	2700      	movs	r7, #0
 800aee4:	f10d 0904 	add.w	r9, sp, #4
 800aee8:	42a7      	cmp	r7, r4
 800aeea:	d020      	beq.n	800af2e <__fputwc+0x6a>
 800aeec:	68ab      	ldr	r3, [r5, #8]
 800aeee:	f817 1009 	ldrb.w	r1, [r7, r9]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	60ab      	str	r3, [r5, #8]
 800aef8:	da04      	bge.n	800af04 <__fputwc+0x40>
 800aefa:	69aa      	ldr	r2, [r5, #24]
 800aefc:	4293      	cmp	r3, r2
 800aefe:	db1a      	blt.n	800af36 <__fputwc+0x72>
 800af00:	290a      	cmp	r1, #10
 800af02:	d018      	beq.n	800af36 <__fputwc+0x72>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	602a      	str	r2, [r5, #0]
 800af0a:	7019      	strb	r1, [r3, #0]
 800af0c:	3701      	adds	r7, #1
 800af0e:	e7eb      	b.n	800aee8 <__fputwc+0x24>
 800af10:	a901      	add	r1, sp, #4
 800af12:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800af16:	4632      	mov	r2, r6
 800af18:	4640      	mov	r0, r8
 800af1a:	f000 fae7 	bl	800b4ec <_wcrtomb_r>
 800af1e:	1c41      	adds	r1, r0, #1
 800af20:	4604      	mov	r4, r0
 800af22:	d1de      	bne.n	800aee2 <__fputwc+0x1e>
 800af24:	89ab      	ldrh	r3, [r5, #12]
 800af26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af2a:	81ab      	strh	r3, [r5, #12]
 800af2c:	4606      	mov	r6, r0
 800af2e:	4630      	mov	r0, r6
 800af30:	b003      	add	sp, #12
 800af32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af36:	462a      	mov	r2, r5
 800af38:	4640      	mov	r0, r8
 800af3a:	f000 fa8e 	bl	800b45a <__swbuf_r>
 800af3e:	1c42      	adds	r2, r0, #1
 800af40:	d1e4      	bne.n	800af0c <__fputwc+0x48>
 800af42:	4606      	mov	r6, r0
 800af44:	e7f3      	b.n	800af2e <__fputwc+0x6a>

0800af46 <_fputwc_r>:
 800af46:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800af48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af4a:	4614      	mov	r4, r2
 800af4c:	07da      	lsls	r2, r3, #31
 800af4e:	4605      	mov	r5, r0
 800af50:	d407      	bmi.n	800af62 <_fputwc_r+0x1c>
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	059b      	lsls	r3, r3, #22
 800af56:	d404      	bmi.n	800af62 <_fputwc_r+0x1c>
 800af58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af5a:	9101      	str	r1, [sp, #4]
 800af5c:	f7fe f838 	bl	8008fd0 <__retarget_lock_acquire_recursive>
 800af60:	9901      	ldr	r1, [sp, #4]
 800af62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af66:	0498      	lsls	r0, r3, #18
 800af68:	d406      	bmi.n	800af78 <_fputwc_r+0x32>
 800af6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800af6e:	81a3      	strh	r3, [r4, #12]
 800af70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800af76:	6663      	str	r3, [r4, #100]	; 0x64
 800af78:	4622      	mov	r2, r4
 800af7a:	4628      	mov	r0, r5
 800af7c:	f7ff ffa2 	bl	800aec4 <__fputwc>
 800af80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af82:	07da      	lsls	r2, r3, #31
 800af84:	4605      	mov	r5, r0
 800af86:	d405      	bmi.n	800af94 <_fputwc_r+0x4e>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	059b      	lsls	r3, r3, #22
 800af8c:	d402      	bmi.n	800af94 <_fputwc_r+0x4e>
 800af8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af90:	f7fe f81f 	bl	8008fd2 <__retarget_lock_release_recursive>
 800af94:	4628      	mov	r0, r5
 800af96:	b003      	add	sp, #12
 800af98:	bd30      	pop	{r4, r5, pc}
	...

0800af9c <__sfvwrite_r>:
 800af9c:	6893      	ldr	r3, [r2, #8]
 800af9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa2:	4606      	mov	r6, r0
 800afa4:	460c      	mov	r4, r1
 800afa6:	4690      	mov	r8, r2
 800afa8:	b91b      	cbnz	r3, 800afb2 <__sfvwrite_r+0x16>
 800afaa:	2000      	movs	r0, #0
 800afac:	b003      	add	sp, #12
 800afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb2:	898b      	ldrh	r3, [r1, #12]
 800afb4:	0718      	lsls	r0, r3, #28
 800afb6:	d550      	bpl.n	800b05a <__sfvwrite_r+0xbe>
 800afb8:	690b      	ldr	r3, [r1, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d04d      	beq.n	800b05a <__sfvwrite_r+0xbe>
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	f8d8 7000 	ldr.w	r7, [r8]
 800afc4:	f013 0902 	ands.w	r9, r3, #2
 800afc8:	d16c      	bne.n	800b0a4 <__sfvwrite_r+0x108>
 800afca:	f013 0301 	ands.w	r3, r3, #1
 800afce:	f000 809c 	beq.w	800b10a <__sfvwrite_r+0x16e>
 800afd2:	4648      	mov	r0, r9
 800afd4:	46ca      	mov	sl, r9
 800afd6:	46cb      	mov	fp, r9
 800afd8:	f1bb 0f00 	cmp.w	fp, #0
 800afdc:	f000 8103 	beq.w	800b1e6 <__sfvwrite_r+0x24a>
 800afe0:	b950      	cbnz	r0, 800aff8 <__sfvwrite_r+0x5c>
 800afe2:	465a      	mov	r2, fp
 800afe4:	210a      	movs	r1, #10
 800afe6:	4650      	mov	r0, sl
 800afe8:	f7f5 f8fa 	bl	80001e0 <memchr>
 800afec:	2800      	cmp	r0, #0
 800afee:	f000 80ff 	beq.w	800b1f0 <__sfvwrite_r+0x254>
 800aff2:	3001      	adds	r0, #1
 800aff4:	eba0 090a 	sub.w	r9, r0, sl
 800aff8:	6820      	ldr	r0, [r4, #0]
 800affa:	6921      	ldr	r1, [r4, #16]
 800affc:	6963      	ldr	r3, [r4, #20]
 800affe:	45d9      	cmp	r9, fp
 800b000:	464a      	mov	r2, r9
 800b002:	bf28      	it	cs
 800b004:	465a      	movcs	r2, fp
 800b006:	4288      	cmp	r0, r1
 800b008:	f240 80f5 	bls.w	800b1f6 <__sfvwrite_r+0x25a>
 800b00c:	68a5      	ldr	r5, [r4, #8]
 800b00e:	441d      	add	r5, r3
 800b010:	42aa      	cmp	r2, r5
 800b012:	f340 80f0 	ble.w	800b1f6 <__sfvwrite_r+0x25a>
 800b016:	4651      	mov	r1, sl
 800b018:	462a      	mov	r2, r5
 800b01a:	f7fe fefd 	bl	8009e18 <memmove>
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	442b      	add	r3, r5
 800b022:	6023      	str	r3, [r4, #0]
 800b024:	4621      	mov	r1, r4
 800b026:	4630      	mov	r0, r6
 800b028:	f7ff feb8 	bl	800ad9c <_fflush_r>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d167      	bne.n	800b100 <__sfvwrite_r+0x164>
 800b030:	ebb9 0905 	subs.w	r9, r9, r5
 800b034:	f040 80f7 	bne.w	800b226 <__sfvwrite_r+0x28a>
 800b038:	4621      	mov	r1, r4
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7ff feae 	bl	800ad9c <_fflush_r>
 800b040:	2800      	cmp	r0, #0
 800b042:	d15d      	bne.n	800b100 <__sfvwrite_r+0x164>
 800b044:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b048:	44aa      	add	sl, r5
 800b04a:	ebab 0b05 	sub.w	fp, fp, r5
 800b04e:	1b55      	subs	r5, r2, r5
 800b050:	f8c8 5008 	str.w	r5, [r8, #8]
 800b054:	2d00      	cmp	r5, #0
 800b056:	d1bf      	bne.n	800afd8 <__sfvwrite_r+0x3c>
 800b058:	e7a7      	b.n	800afaa <__sfvwrite_r+0xe>
 800b05a:	4621      	mov	r1, r4
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7ff fdaf 	bl	800abc0 <__swsetup_r>
 800b062:	2800      	cmp	r0, #0
 800b064:	d0ab      	beq.n	800afbe <__sfvwrite_r+0x22>
 800b066:	f04f 30ff 	mov.w	r0, #4294967295
 800b06a:	e79f      	b.n	800afac <__sfvwrite_r+0x10>
 800b06c:	e9d7 b900 	ldrd	fp, r9, [r7]
 800b070:	3708      	adds	r7, #8
 800b072:	f1b9 0f00 	cmp.w	r9, #0
 800b076:	d0f9      	beq.n	800b06c <__sfvwrite_r+0xd0>
 800b078:	45d1      	cmp	r9, sl
 800b07a:	464b      	mov	r3, r9
 800b07c:	69e1      	ldr	r1, [r4, #28]
 800b07e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b080:	bf28      	it	cs
 800b082:	4653      	movcs	r3, sl
 800b084:	465a      	mov	r2, fp
 800b086:	4630      	mov	r0, r6
 800b088:	47a8      	blx	r5
 800b08a:	2800      	cmp	r0, #0
 800b08c:	dd38      	ble.n	800b100 <__sfvwrite_r+0x164>
 800b08e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b092:	4483      	add	fp, r0
 800b094:	eba9 0900 	sub.w	r9, r9, r0
 800b098:	1a18      	subs	r0, r3, r0
 800b09a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d1e7      	bne.n	800b072 <__sfvwrite_r+0xd6>
 800b0a2:	e782      	b.n	800afaa <__sfvwrite_r+0xe>
 800b0a4:	f04f 0b00 	mov.w	fp, #0
 800b0a8:	f8df a180 	ldr.w	sl, [pc, #384]	; 800b22c <__sfvwrite_r+0x290>
 800b0ac:	46d9      	mov	r9, fp
 800b0ae:	e7e0      	b.n	800b072 <__sfvwrite_r+0xd6>
 800b0b0:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	f1ba 0f00 	cmp.w	sl, #0
 800b0ba:	d0f9      	beq.n	800b0b0 <__sfvwrite_r+0x114>
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	6820      	ldr	r0, [r4, #0]
 800b0c0:	68a2      	ldr	r2, [r4, #8]
 800b0c2:	0599      	lsls	r1, r3, #22
 800b0c4:	d563      	bpl.n	800b18e <__sfvwrite_r+0x1f2>
 800b0c6:	4552      	cmp	r2, sl
 800b0c8:	d836      	bhi.n	800b138 <__sfvwrite_r+0x19c>
 800b0ca:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b0ce:	d033      	beq.n	800b138 <__sfvwrite_r+0x19c>
 800b0d0:	6921      	ldr	r1, [r4, #16]
 800b0d2:	6965      	ldr	r5, [r4, #20]
 800b0d4:	eba0 0b01 	sub.w	fp, r0, r1
 800b0d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0e0:	f10b 0201 	add.w	r2, fp, #1
 800b0e4:	106d      	asrs	r5, r5, #1
 800b0e6:	4452      	add	r2, sl
 800b0e8:	4295      	cmp	r5, r2
 800b0ea:	bf38      	it	cc
 800b0ec:	4615      	movcc	r5, r2
 800b0ee:	055b      	lsls	r3, r3, #21
 800b0f0:	d53d      	bpl.n	800b16e <__sfvwrite_r+0x1d2>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7fd ff6d 	bl	8008fd4 <_malloc_r>
 800b0fa:	b948      	cbnz	r0, 800b110 <__sfvwrite_r+0x174>
 800b0fc:	230c      	movs	r3, #12
 800b0fe:	6033      	str	r3, [r6, #0]
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b106:	81a3      	strh	r3, [r4, #12]
 800b108:	e7ad      	b.n	800b066 <__sfvwrite_r+0xca>
 800b10a:	4699      	mov	r9, r3
 800b10c:	469a      	mov	sl, r3
 800b10e:	e7d2      	b.n	800b0b6 <__sfvwrite_r+0x11a>
 800b110:	465a      	mov	r2, fp
 800b112:	6921      	ldr	r1, [r4, #16]
 800b114:	9001      	str	r0, [sp, #4]
 800b116:	f7fb fd9f 	bl	8006c58 <memcpy>
 800b11a:	89a2      	ldrh	r2, [r4, #12]
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b126:	81a2      	strh	r2, [r4, #12]
 800b128:	6123      	str	r3, [r4, #16]
 800b12a:	6165      	str	r5, [r4, #20]
 800b12c:	445b      	add	r3, fp
 800b12e:	eba5 050b 	sub.w	r5, r5, fp
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	4652      	mov	r2, sl
 800b136:	60a5      	str	r5, [r4, #8]
 800b138:	4552      	cmp	r2, sl
 800b13a:	bf28      	it	cs
 800b13c:	4652      	movcs	r2, sl
 800b13e:	6820      	ldr	r0, [r4, #0]
 800b140:	9201      	str	r2, [sp, #4]
 800b142:	4649      	mov	r1, r9
 800b144:	f7fe fe68 	bl	8009e18 <memmove>
 800b148:	68a3      	ldr	r3, [r4, #8]
 800b14a:	9a01      	ldr	r2, [sp, #4]
 800b14c:	1a9b      	subs	r3, r3, r2
 800b14e:	60a3      	str	r3, [r4, #8]
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	441a      	add	r2, r3
 800b154:	4655      	mov	r5, sl
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800b15c:	44a9      	add	r9, r5
 800b15e:	ebaa 0a05 	sub.w	sl, sl, r5
 800b162:	1b45      	subs	r5, r0, r5
 800b164:	f8c8 5008 	str.w	r5, [r8, #8]
 800b168:	2d00      	cmp	r5, #0
 800b16a:	d1a4      	bne.n	800b0b6 <__sfvwrite_r+0x11a>
 800b16c:	e71d      	b.n	800afaa <__sfvwrite_r+0xe>
 800b16e:	462a      	mov	r2, r5
 800b170:	4630      	mov	r0, r6
 800b172:	f7fe fe6b 	bl	8009e4c <_realloc_r>
 800b176:	4603      	mov	r3, r0
 800b178:	2800      	cmp	r0, #0
 800b17a:	d1d5      	bne.n	800b128 <__sfvwrite_r+0x18c>
 800b17c:	6921      	ldr	r1, [r4, #16]
 800b17e:	4630      	mov	r0, r6
 800b180:	f7fd fe60 	bl	8008e44 <_free_r>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	e7b6      	b.n	800b0fc <__sfvwrite_r+0x160>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	4283      	cmp	r3, r0
 800b192:	d302      	bcc.n	800b19a <__sfvwrite_r+0x1fe>
 800b194:	6961      	ldr	r1, [r4, #20]
 800b196:	4551      	cmp	r1, sl
 800b198:	d915      	bls.n	800b1c6 <__sfvwrite_r+0x22a>
 800b19a:	4552      	cmp	r2, sl
 800b19c:	bf28      	it	cs
 800b19e:	4652      	movcs	r2, sl
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	4615      	mov	r5, r2
 800b1a4:	f7fe fe38 	bl	8009e18 <memmove>
 800b1a8:	68a3      	ldr	r3, [r4, #8]
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	1b5b      	subs	r3, r3, r5
 800b1ae:	442a      	add	r2, r5
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6022      	str	r2, [r4, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1cf      	bne.n	800b158 <__sfvwrite_r+0x1bc>
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7ff fdee 	bl	800ad9c <_fflush_r>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d0c9      	beq.n	800b158 <__sfvwrite_r+0x1bc>
 800b1c4:	e79c      	b.n	800b100 <__sfvwrite_r+0x164>
 800b1c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b1ca:	459a      	cmp	sl, r3
 800b1cc:	bf38      	it	cc
 800b1ce:	4653      	movcc	r3, sl
 800b1d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b1d2:	fb93 f3f1 	sdiv	r3, r3, r1
 800b1d6:	464a      	mov	r2, r9
 800b1d8:	434b      	muls	r3, r1
 800b1da:	4630      	mov	r0, r6
 800b1dc:	69e1      	ldr	r1, [r4, #28]
 800b1de:	47a8      	blx	r5
 800b1e0:	1e05      	subs	r5, r0, #0
 800b1e2:	dcb9      	bgt.n	800b158 <__sfvwrite_r+0x1bc>
 800b1e4:	e78c      	b.n	800b100 <__sfvwrite_r+0x164>
 800b1e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	e6f3      	b.n	800afd8 <__sfvwrite_r+0x3c>
 800b1f0:	f10b 0901 	add.w	r9, fp, #1
 800b1f4:	e700      	b.n	800aff8 <__sfvwrite_r+0x5c>
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	dc08      	bgt.n	800b20c <__sfvwrite_r+0x270>
 800b1fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b1fc:	69e1      	ldr	r1, [r4, #28]
 800b1fe:	4652      	mov	r2, sl
 800b200:	4630      	mov	r0, r6
 800b202:	47a8      	blx	r5
 800b204:	1e05      	subs	r5, r0, #0
 800b206:	f73f af13 	bgt.w	800b030 <__sfvwrite_r+0x94>
 800b20a:	e779      	b.n	800b100 <__sfvwrite_r+0x164>
 800b20c:	4651      	mov	r1, sl
 800b20e:	9201      	str	r2, [sp, #4]
 800b210:	f7fe fe02 	bl	8009e18 <memmove>
 800b214:	9a01      	ldr	r2, [sp, #4]
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	1a9b      	subs	r3, r3, r2
 800b21a:	60a3      	str	r3, [r4, #8]
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	4413      	add	r3, r2
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	4615      	mov	r5, r2
 800b224:	e704      	b.n	800b030 <__sfvwrite_r+0x94>
 800b226:	2001      	movs	r0, #1
 800b228:	e70c      	b.n	800b044 <__sfvwrite_r+0xa8>
 800b22a:	bf00      	nop
 800b22c:	7ffffc00 	.word	0x7ffffc00

0800b230 <_fwalk_reent>:
 800b230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b234:	4606      	mov	r6, r0
 800b236:	4688      	mov	r8, r1
 800b238:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800b23c:	2700      	movs	r7, #0
 800b23e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b242:	f1b9 0901 	subs.w	r9, r9, #1
 800b246:	d505      	bpl.n	800b254 <_fwalk_reent+0x24>
 800b248:	6824      	ldr	r4, [r4, #0]
 800b24a:	2c00      	cmp	r4, #0
 800b24c:	d1f7      	bne.n	800b23e <_fwalk_reent+0xe>
 800b24e:	4638      	mov	r0, r7
 800b250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b254:	89ab      	ldrh	r3, [r5, #12]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d907      	bls.n	800b26a <_fwalk_reent+0x3a>
 800b25a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b25e:	3301      	adds	r3, #1
 800b260:	d003      	beq.n	800b26a <_fwalk_reent+0x3a>
 800b262:	4629      	mov	r1, r5
 800b264:	4630      	mov	r0, r6
 800b266:	47c0      	blx	r8
 800b268:	4307      	orrs	r7, r0
 800b26a:	3568      	adds	r5, #104	; 0x68
 800b26c:	e7e9      	b.n	800b242 <_fwalk_reent+0x12>

0800b26e <__swhatbuf_r>:
 800b26e:	b570      	push	{r4, r5, r6, lr}
 800b270:	460e      	mov	r6, r1
 800b272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b276:	2900      	cmp	r1, #0
 800b278:	b096      	sub	sp, #88	; 0x58
 800b27a:	4614      	mov	r4, r2
 800b27c:	461d      	mov	r5, r3
 800b27e:	da0a      	bge.n	800b296 <__swhatbuf_r+0x28>
 800b280:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800b284:	2300      	movs	r3, #0
 800b286:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800b28a:	602b      	str	r3, [r5, #0]
 800b28c:	d116      	bne.n	800b2bc <__swhatbuf_r+0x4e>
 800b28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	e015      	b.n	800b2c2 <__swhatbuf_r+0x54>
 800b296:	466a      	mov	r2, sp
 800b298:	f000 f9b8 	bl	800b60c <_fstat_r>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	dbef      	blt.n	800b280 <__swhatbuf_r+0x12>
 800b2a0:	9a01      	ldr	r2, [sp, #4]
 800b2a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2aa:	425a      	negs	r2, r3
 800b2ac:	415a      	adcs	r2, r3
 800b2ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2b2:	602a      	str	r2, [r5, #0]
 800b2b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	e002      	b.n	800b2c2 <__swhatbuf_r+0x54>
 800b2bc:	2240      	movs	r2, #64	; 0x40
 800b2be:	6022      	str	r2, [r4, #0]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	b016      	add	sp, #88	; 0x58
 800b2c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2c8 <__smakebuf_r>:
 800b2c8:	898b      	ldrh	r3, [r1, #12]
 800b2ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2cc:	079d      	lsls	r5, r3, #30
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	d507      	bpl.n	800b2e4 <__smakebuf_r+0x1c>
 800b2d4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	6123      	str	r3, [r4, #16]
 800b2dc:	2301      	movs	r3, #1
 800b2de:	6163      	str	r3, [r4, #20]
 800b2e0:	b002      	add	sp, #8
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	ab01      	add	r3, sp, #4
 800b2e6:	466a      	mov	r2, sp
 800b2e8:	f7ff ffc1 	bl	800b26e <__swhatbuf_r>
 800b2ec:	9900      	ldr	r1, [sp, #0]
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f7fd fe6f 	bl	8008fd4 <_malloc_r>
 800b2f6:	b948      	cbnz	r0, 800b30c <__smakebuf_r+0x44>
 800b2f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2fc:	059a      	lsls	r2, r3, #22
 800b2fe:	d4ef      	bmi.n	800b2e0 <__smakebuf_r+0x18>
 800b300:	f023 0303 	bic.w	r3, r3, #3
 800b304:	f043 0302 	orr.w	r3, r3, #2
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	e7e3      	b.n	800b2d4 <__smakebuf_r+0xc>
 800b30c:	4b0d      	ldr	r3, [pc, #52]	; (800b344 <__smakebuf_r+0x7c>)
 800b30e:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	6020      	str	r0, [r4, #0]
 800b314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b318:	81a3      	strh	r3, [r4, #12]
 800b31a:	9b00      	ldr	r3, [sp, #0]
 800b31c:	6163      	str	r3, [r4, #20]
 800b31e:	9b01      	ldr	r3, [sp, #4]
 800b320:	6120      	str	r0, [r4, #16]
 800b322:	b15b      	cbz	r3, 800b33c <__smakebuf_r+0x74>
 800b324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b328:	4630      	mov	r0, r6
 800b32a:	f000 f981 	bl	800b630 <_isatty_r>
 800b32e:	b128      	cbz	r0, 800b33c <__smakebuf_r+0x74>
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	f043 0301 	orr.w	r3, r3, #1
 800b33a:	81a3      	strh	r3, [r4, #12]
 800b33c:	89a0      	ldrh	r0, [r4, #12]
 800b33e:	4305      	orrs	r5, r0
 800b340:	81a5      	strh	r5, [r4, #12]
 800b342:	e7cd      	b.n	800b2e0 <__smakebuf_r+0x18>
 800b344:	0800ae39 	.word	0x0800ae39

0800b348 <_raise_r>:
 800b348:	291f      	cmp	r1, #31
 800b34a:	b538      	push	{r3, r4, r5, lr}
 800b34c:	4604      	mov	r4, r0
 800b34e:	460d      	mov	r5, r1
 800b350:	d904      	bls.n	800b35c <_raise_r+0x14>
 800b352:	2316      	movs	r3, #22
 800b354:	6003      	str	r3, [r0, #0]
 800b356:	f04f 30ff 	mov.w	r0, #4294967295
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800b360:	b112      	cbz	r2, 800b368 <_raise_r+0x20>
 800b362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b366:	b94b      	cbnz	r3, 800b37c <_raise_r+0x34>
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 f831 	bl	800b3d0 <_getpid_r>
 800b36e:	462a      	mov	r2, r5
 800b370:	4601      	mov	r1, r0
 800b372:	4620      	mov	r0, r4
 800b374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b378:	f000 b818 	b.w	800b3ac <_kill_r>
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d00a      	beq.n	800b396 <_raise_r+0x4e>
 800b380:	1c59      	adds	r1, r3, #1
 800b382:	d103      	bne.n	800b38c <_raise_r+0x44>
 800b384:	2316      	movs	r3, #22
 800b386:	6003      	str	r3, [r0, #0]
 800b388:	2001      	movs	r0, #1
 800b38a:	e7e6      	b.n	800b35a <_raise_r+0x12>
 800b38c:	2400      	movs	r4, #0
 800b38e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b392:	4628      	mov	r0, r5
 800b394:	4798      	blx	r3
 800b396:	2000      	movs	r0, #0
 800b398:	e7df      	b.n	800b35a <_raise_r+0x12>
	...

0800b39c <raise>:
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <raise+0xc>)
 800b39e:	4601      	mov	r1, r0
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	f7ff bfd1 	b.w	800b348 <_raise_r>
 800b3a6:	bf00      	nop
 800b3a8:	20000024 	.word	0x20000024

0800b3ac <_kill_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d07      	ldr	r5, [pc, #28]	; (800b3cc <_kill_r+0x20>)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	f7fa fe8d 	bl	80060d8 <_kill>
 800b3be:	1c43      	adds	r3, r0, #1
 800b3c0:	d102      	bne.n	800b3c8 <_kill_r+0x1c>
 800b3c2:	682b      	ldr	r3, [r5, #0]
 800b3c4:	b103      	cbz	r3, 800b3c8 <_kill_r+0x1c>
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20000ed8 	.word	0x20000ed8

0800b3d0 <_getpid_r>:
 800b3d0:	f7fa be7a 	b.w	80060c8 <_getpid>

0800b3d4 <__sread>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3dc:	f000 f94a 	bl	800b674 <_read_r>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	bfab      	itete	ge
 800b3e4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b3e6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3e8:	181b      	addge	r3, r3, r0
 800b3ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3ee:	bfac      	ite	ge
 800b3f0:	6523      	strge	r3, [r4, #80]	; 0x50
 800b3f2:	81a3      	strhlt	r3, [r4, #12]
 800b3f4:	bd10      	pop	{r4, pc}

0800b3f6 <__swrite>:
 800b3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fa:	461f      	mov	r7, r3
 800b3fc:	898b      	ldrh	r3, [r1, #12]
 800b3fe:	05db      	lsls	r3, r3, #23
 800b400:	4605      	mov	r5, r0
 800b402:	460c      	mov	r4, r1
 800b404:	4616      	mov	r6, r2
 800b406:	d505      	bpl.n	800b414 <__swrite+0x1e>
 800b408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40c:	2302      	movs	r3, #2
 800b40e:	2200      	movs	r2, #0
 800b410:	f000 f91e 	bl	800b650 <_lseek_r>
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b41a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b41e:	81a3      	strh	r3, [r4, #12]
 800b420:	4632      	mov	r2, r6
 800b422:	463b      	mov	r3, r7
 800b424:	4628      	mov	r0, r5
 800b426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b42a:	f000 b875 	b.w	800b518 <_write_r>

0800b42e <__sseek>:
 800b42e:	b510      	push	{r4, lr}
 800b430:	460c      	mov	r4, r1
 800b432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b436:	f000 f90b 	bl	800b650 <_lseek_r>
 800b43a:	1c43      	adds	r3, r0, #1
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	bf15      	itete	ne
 800b440:	6520      	strne	r0, [r4, #80]	; 0x50
 800b442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b44a:	81a3      	strheq	r3, [r4, #12]
 800b44c:	bf18      	it	ne
 800b44e:	81a3      	strhne	r3, [r4, #12]
 800b450:	bd10      	pop	{r4, pc}

0800b452 <__sclose>:
 800b452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b456:	f000 b871 	b.w	800b53c <_close_r>

0800b45a <__swbuf_r>:
 800b45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45c:	460e      	mov	r6, r1
 800b45e:	4614      	mov	r4, r2
 800b460:	4605      	mov	r5, r0
 800b462:	b118      	cbz	r0, 800b46c <__swbuf_r+0x12>
 800b464:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b466:	b90b      	cbnz	r3, 800b46c <__swbuf_r+0x12>
 800b468:	f7ff fd04 	bl	800ae74 <__sinit>
 800b46c:	69a3      	ldr	r3, [r4, #24]
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	0719      	lsls	r1, r3, #28
 800b474:	d529      	bpl.n	800b4ca <__swbuf_r+0x70>
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	b33b      	cbz	r3, 800b4ca <__swbuf_r+0x70>
 800b47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47e:	b2f6      	uxtb	r6, r6
 800b480:	049a      	lsls	r2, r3, #18
 800b482:	4637      	mov	r7, r6
 800b484:	d52a      	bpl.n	800b4dc <__swbuf_r+0x82>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	6920      	ldr	r0, [r4, #16]
 800b48a:	1a18      	subs	r0, r3, r0
 800b48c:	6963      	ldr	r3, [r4, #20]
 800b48e:	4283      	cmp	r3, r0
 800b490:	dc04      	bgt.n	800b49c <__swbuf_r+0x42>
 800b492:	4621      	mov	r1, r4
 800b494:	4628      	mov	r0, r5
 800b496:	f7ff fc81 	bl	800ad9c <_fflush_r>
 800b49a:	b9e0      	cbnz	r0, 800b4d6 <__swbuf_r+0x7c>
 800b49c:	68a3      	ldr	r3, [r4, #8]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	60a3      	str	r3, [r4, #8]
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	6022      	str	r2, [r4, #0]
 800b4a8:	701e      	strb	r6, [r3, #0]
 800b4aa:	6962      	ldr	r2, [r4, #20]
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d004      	beq.n	800b4bc <__swbuf_r+0x62>
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	07db      	lsls	r3, r3, #31
 800b4b6:	d506      	bpl.n	800b4c6 <__swbuf_r+0x6c>
 800b4b8:	2e0a      	cmp	r6, #10
 800b4ba:	d104      	bne.n	800b4c6 <__swbuf_r+0x6c>
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7ff fc6c 	bl	800ad9c <_fflush_r>
 800b4c4:	b938      	cbnz	r0, 800b4d6 <__swbuf_r+0x7c>
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f7ff fb77 	bl	800abc0 <__swsetup_r>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d0d1      	beq.n	800b47a <__swbuf_r+0x20>
 800b4d6:	f04f 37ff 	mov.w	r7, #4294967295
 800b4da:	e7f4      	b.n	800b4c6 <__swbuf_r+0x6c>
 800b4dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4e8:	6663      	str	r3, [r4, #100]	; 0x64
 800b4ea:	e7cc      	b.n	800b486 <__swbuf_r+0x2c>

0800b4ec <_wcrtomb_r>:
 800b4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ee:	4c09      	ldr	r4, [pc, #36]	; (800b514 <_wcrtomb_r+0x28>)
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	461e      	mov	r6, r3
 800b4fa:	b909      	cbnz	r1, 800b500 <_wcrtomb_r+0x14>
 800b4fc:	460a      	mov	r2, r1
 800b4fe:	a901      	add	r1, sp, #4
 800b500:	47b8      	blx	r7
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	bf01      	itttt	eq
 800b506:	2300      	moveq	r3, #0
 800b508:	6033      	streq	r3, [r6, #0]
 800b50a:	238a      	moveq	r3, #138	; 0x8a
 800b50c:	602b      	streq	r3, [r5, #0]
 800b50e:	b005      	add	sp, #20
 800b510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b512:	bf00      	nop
 800b514:	20000864 	.word	0x20000864

0800b518 <_write_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4d07      	ldr	r5, [pc, #28]	; (800b538 <_write_r+0x20>)
 800b51c:	4604      	mov	r4, r0
 800b51e:	4608      	mov	r0, r1
 800b520:	4611      	mov	r1, r2
 800b522:	2200      	movs	r2, #0
 800b524:	602a      	str	r2, [r5, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	f7fa fe0d 	bl	8006146 <_write>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_write_r+0x1e>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_write_r+0x1e>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20000ed8 	.word	0x20000ed8

0800b53c <_close_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d06      	ldr	r5, [pc, #24]	; (800b558 <_close_r+0x1c>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	602b      	str	r3, [r5, #0]
 800b548:	f7fa fe19 	bl	800617e <_close>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_close_r+0x1a>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_close_r+0x1a>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	20000ed8 	.word	0x20000ed8

0800b55c <_fclose_r>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	4606      	mov	r6, r0
 800b560:	460c      	mov	r4, r1
 800b562:	b911      	cbnz	r1, 800b56a <_fclose_r+0xe>
 800b564:	2500      	movs	r5, #0
 800b566:	4628      	mov	r0, r5
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	b118      	cbz	r0, 800b574 <_fclose_r+0x18>
 800b56c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b56e:	b90b      	cbnz	r3, 800b574 <_fclose_r+0x18>
 800b570:	f7ff fc80 	bl	800ae74 <__sinit>
 800b574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b576:	07d8      	lsls	r0, r3, #31
 800b578:	d405      	bmi.n	800b586 <_fclose_r+0x2a>
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	0599      	lsls	r1, r3, #22
 800b57e:	d402      	bmi.n	800b586 <_fclose_r+0x2a>
 800b580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b582:	f7fd fd25 	bl	8008fd0 <__retarget_lock_acquire_recursive>
 800b586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b58a:	b93b      	cbnz	r3, 800b59c <_fclose_r+0x40>
 800b58c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b58e:	f015 0501 	ands.w	r5, r5, #1
 800b592:	d1e7      	bne.n	800b564 <_fclose_r+0x8>
 800b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b596:	f7fd fd1c 	bl	8008fd2 <__retarget_lock_release_recursive>
 800b59a:	e7e4      	b.n	800b566 <_fclose_r+0xa>
 800b59c:	4621      	mov	r1, r4
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f7ff fb6e 	bl	800ac80 <__sflush_r>
 800b5a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	b133      	cbz	r3, 800b5b8 <_fclose_r+0x5c>
 800b5aa:	69e1      	ldr	r1, [r4, #28]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	4798      	blx	r3
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	bfb8      	it	lt
 800b5b4:	f04f 35ff 	movlt.w	r5, #4294967295
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	061a      	lsls	r2, r3, #24
 800b5bc:	d503      	bpl.n	800b5c6 <_fclose_r+0x6a>
 800b5be:	6921      	ldr	r1, [r4, #16]
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7fd fc3f 	bl	8008e44 <_free_r>
 800b5c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b5c8:	b141      	cbz	r1, 800b5dc <_fclose_r+0x80>
 800b5ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b5ce:	4299      	cmp	r1, r3
 800b5d0:	d002      	beq.n	800b5d8 <_fclose_r+0x7c>
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f7fd fc36 	bl	8008e44 <_free_r>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	6323      	str	r3, [r4, #48]	; 0x30
 800b5dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b5de:	b121      	cbz	r1, 800b5ea <_fclose_r+0x8e>
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7fd fc2f 	bl	8008e44 <_free_r>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	6463      	str	r3, [r4, #68]	; 0x44
 800b5ea:	f7ff fc2b 	bl	800ae44 <__sfp_lock_acquire>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f4:	07db      	lsls	r3, r3, #31
 800b5f6:	d402      	bmi.n	800b5fe <_fclose_r+0xa2>
 800b5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fa:	f7fd fcea 	bl	8008fd2 <__retarget_lock_release_recursive>
 800b5fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b600:	f7fd fce5 	bl	8008fce <__retarget_lock_close_recursive>
 800b604:	f7ff fc24 	bl	800ae50 <__sfp_lock_release>
 800b608:	e7ad      	b.n	800b566 <_fclose_r+0xa>
	...

0800b60c <_fstat_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d07      	ldr	r5, [pc, #28]	; (800b62c <_fstat_r+0x20>)
 800b610:	2300      	movs	r3, #0
 800b612:	4604      	mov	r4, r0
 800b614:	4608      	mov	r0, r1
 800b616:	4611      	mov	r1, r2
 800b618:	602b      	str	r3, [r5, #0]
 800b61a:	f7fa fdbc 	bl	8006196 <_fstat>
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	d102      	bne.n	800b628 <_fstat_r+0x1c>
 800b622:	682b      	ldr	r3, [r5, #0]
 800b624:	b103      	cbz	r3, 800b628 <_fstat_r+0x1c>
 800b626:	6023      	str	r3, [r4, #0]
 800b628:	bd38      	pop	{r3, r4, r5, pc}
 800b62a:	bf00      	nop
 800b62c:	20000ed8 	.word	0x20000ed8

0800b630 <_isatty_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d06      	ldr	r5, [pc, #24]	; (800b64c <_isatty_r+0x1c>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	f7fa fdbb 	bl	80061b6 <_isatty>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_isatty_r+0x1a>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_isatty_r+0x1a>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20000ed8 	.word	0x20000ed8

0800b650 <_lseek_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	; (800b670 <_lseek_r+0x20>)
 800b654:	4604      	mov	r4, r0
 800b656:	4608      	mov	r0, r1
 800b658:	4611      	mov	r1, r2
 800b65a:	2200      	movs	r2, #0
 800b65c:	602a      	str	r2, [r5, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	f7fa fdb4 	bl	80061cc <_lseek>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_lseek_r+0x1e>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_lseek_r+0x1e>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	20000ed8 	.word	0x20000ed8

0800b674 <_read_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d07      	ldr	r5, [pc, #28]	; (800b694 <_read_r+0x20>)
 800b678:	4604      	mov	r4, r0
 800b67a:	4608      	mov	r0, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	602a      	str	r2, [r5, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	f7fa fd42 	bl	800610c <_read>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_read_r+0x1e>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_read_r+0x1e>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	20000ed8 	.word	0x20000ed8

0800b698 <_init>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	bf00      	nop
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr

0800b6a4 <_fini>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	bf00      	nop
 800b6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6aa:	bc08      	pop	{r3}
 800b6ac:	469e      	mov	lr, r3
 800b6ae:	4770      	bx	lr
